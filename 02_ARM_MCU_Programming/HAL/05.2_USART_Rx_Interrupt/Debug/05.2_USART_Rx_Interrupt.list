
05.2_USART_Rx_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a4c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c10  08002c10  00003c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c28  08002c28  00003c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c30  08002c30  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c30  08002c30  00003c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c34  08002c34  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002c44  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002c44  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c73  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001811  00000000  00000000  0000ccaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058d  00000000  00000000  0000ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020365  00000000  00000000  0000f18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c2f  00000000  00000000  0002f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b95  00000000  00000000  00039121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdcb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb4  00000000  00000000  000fdcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000ff9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002bf8 	.word	0x08002bf8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002bf8 	.word	0x08002bf8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_UART_RxCpltCallback>:
static void MX_USART2_UART_Init(void);

uint8_t rx_buf[20];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004fc:	2120      	movs	r1, #32
 80004fe:	4803      	ldr	r0, [pc, #12]	@ (800050c <HAL_UART_RxCpltCallback+0x18>)
 8000500:	f000 fdd7 	bl	80010b2 <HAL_GPIO_TogglePin>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40020000 	.word	0x40020000

08000510 <main>:

int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  HAL_Init();
 8000514:	f000 fa0a 	bl	800092c <HAL_Init>
  SystemClock_Config();
 8000518:	f000 f80e 	bl	8000538 <SystemClock_Config>
  MX_GPIO_Init();
 800051c:	f000 f8a4 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000520:	f000 f878 	bl	8000614 <MX_USART2_UART_Init>

  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, rx_buf, 5); // Interrupt will not be triggered until required number of bytes (here 5 bytes) is not received.
 8000524:	2205      	movs	r2, #5
 8000526:	4902      	ldr	r1, [pc, #8]	@ (8000530 <main+0x20>)
 8000528:	4802      	ldr	r0, [pc, #8]	@ (8000534 <main+0x24>)
 800052a:	f001 fc15 	bl	8001d58 <HAL_UART_Receive_IT>
 800052e:	e7f9      	b.n	8000524 <main+0x14>
 8000530:	20000070 	.word	0x20000070
 8000534:	20000028 	.word	0x20000028

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	@ 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	@ 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fb2a 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b2a      	ldr	r3, [pc, #168]	@ (800060c <SystemClock_Config+0xd4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	4a29      	ldr	r2, [pc, #164]	@ (800060c <SystemClock_Config+0xd4>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
 800056c:	4b27      	ldr	r3, [pc, #156]	@ (800060c <SystemClock_Config+0xd4>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <SystemClock_Config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000584:	4a22      	ldr	r2, [pc, #136]	@ (8000610 <SystemClock_Config+0xd8>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <SystemClock_Config+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ac:	2310      	movs	r3, #16
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ba:	2302      	movs	r3, #2
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005be:	2302      	movs	r3, #2
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f8d8 	bl	800177c <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005d2:	f000 f8b7 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd78 	bl	80010e8 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005fe:	f000 f8a1 	bl	8000744 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f001 fb34 	bl	8001cb8 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 f875 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000028 	.word	0x20000028
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2c      	ldr	r2, [pc, #176]	@ (8000738 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a25      	ldr	r2, [pc, #148]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a1e      	ldr	r2, [pc, #120]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a17      	ldr	r2, [pc, #92]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2120      	movs	r1, #32
 80006f2:	4812      	ldr	r0, [pc, #72]	@ (800073c <MX_GPIO_Init+0xd4>)
 80006f4:	f000 fcc4 	bl	8001080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <MX_GPIO_Init+0xd8>)
 8000710:	f000 fb22 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_GPIO_Init+0xd4>)
 800072c:	f000 fb14 	bl	8000d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	bf00      	nop
 8000732:	3728      	adds	r7, #40	@ 0x28
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020800 	.word	0x40020800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800078e:	2007      	movs	r0, #7
 8000790:	f000 fa0e 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800

080007a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000834 <HAL_UART_MspInit+0x94>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d133      	bne.n	800082a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <HAL_UART_MspInit+0x98>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <HAL_UART_MspInit+0x98>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <HAL_UART_MspInit+0x98>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <HAL_UART_MspInit+0x98>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <HAL_UART_MspInit+0x98>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_UART_MspInit+0x98>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fa:	230c      	movs	r3, #12
 80007fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080a:	2307      	movs	r3, #7
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	@ (800083c <HAL_UART_MspInit+0x9c>)
 8000816:	f000 fa9f 	bl	8000d58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2026      	movs	r0, #38	@ 0x26
 8000820:	f000 f9d1 	bl	8000bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000824:	2026      	movs	r0, #38	@ 0x26
 8000826:	f000 f9ea 	bl	8000bfe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	@ 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40004400 	.word	0x40004400
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <UsageFault_Handler+0x4>

08000868 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000896:	f000 f89b 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008a4:	4802      	ldr	r0, [pc, #8]	@ (80008b0 <USART2_IRQHandler+0x10>)
 80008a6:	f001 fa7d 	bl	8001da4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000028 	.word	0x20000028

080008b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	@ (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000910 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008dc:	f7ff ffea 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	@ (8000918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000906:	f002 f953 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090a:	f7ff fe01 	bl	8000510 <main>
  bx  lr    
 800090e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800091c:	08002c38 	.word	0x08002c38
  ldr r2, =_sbss
 8000920:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000924:	20000088 	.word	0x20000088

08000928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000930:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	@ (800096c <HAL_Init+0x40>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800093a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <HAL_Init+0x40>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	@ (800096c <HAL_Init+0x40>)
 800094e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f92b 	bl	8000bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	2000      	movs	r0, #0
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff fef6 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023c00 	.word	0x40023c00

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f943 	bl	8000c1a <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	f000 f90b 	bl	8000bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_IncTick+0x20>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x24>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_IncTick+0x24>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000084 	.word	0x20000084

080009f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_GetTick+0x14>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000084 	.word	0x20000084

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	@ (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db0b      	blt.n	8000a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f003 021f 	and.w	r2, r3, #31
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <__NVIC_EnableIRQ+0x38>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	095b      	lsrs	r3, r3, #5
 8000a94:	2001      	movs	r0, #1
 8000a96:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	@ (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	@ (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	@ 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	@ 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
	...

08000b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b7c:	d301      	bcc.n	8000b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00f      	b.n	8000ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <SysTick_Config+0x40>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	f7ff ff8e 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <SysTick_Config+0x40>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <SysTick_Config+0x40>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	e000e010 	.word	0xe000e010

08000bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff29 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd8:	f7ff ff3e 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f7ff ff8e 	bl	8000b04 <NVIC_EncodePriority>
 8000be8:	4602      	mov	r2, r0
 8000bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff5d 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf6:	bf00      	nop
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff31 	bl	8000a74 <__NVIC_EnableIRQ>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffa2 	bl	8000b6c <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff feda 	bl	80009f8 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d008      	beq.n	8000c64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2280      	movs	r2, #128	@ 0x80
 8000c56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e052      	b.n	8000d0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0216 	bic.w	r2, r2, #22
 8000c72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d103      	bne.n	8000c94 <HAL_DMA_Abort+0x62>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d007      	beq.n	8000ca4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 0208 	bic.w	r2, r2, #8
 8000ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0201 	bic.w	r2, r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cb4:	e013      	b.n	8000cde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000cb6:	f7ff fe9f 	bl	80009f8 <HAL_GetTick>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d90c      	bls.n	8000cde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2203      	movs	r2, #3
 8000cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e015      	b.n	8000d0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d1e4      	bne.n	8000cb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cf0:	223f      	movs	r2, #63	@ 0x3f
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d004      	beq.n	8000d30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e00c      	b.n	8000d4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2205      	movs	r2, #5
 8000d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e165      	b.n	8001040 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d74:	2201      	movs	r2, #1
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f040 8154 	bne.w	800103a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d005      	beq.n	8000daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d130      	bne.n	8000e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	2203      	movs	r2, #3
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	091b      	lsrs	r3, r3, #4
 8000df6:	f003 0201 	and.w	r2, r3, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d017      	beq.n	8000e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	69b9      	ldr	r1, [r7, #24]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80ae 	beq.w	800103a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8001058 <HAL_GPIO_Init+0x300>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	4a5c      	ldr	r2, [pc, #368]	@ (8001058 <HAL_GPIO_Init+0x300>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eee:	4b5a      	ldr	r3, [pc, #360]	@ (8001058 <HAL_GPIO_Init+0x300>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a58      	ldr	r2, [pc, #352]	@ (800105c <HAL_GPIO_Init+0x304>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4f      	ldr	r2, [pc, #316]	@ (8001060 <HAL_GPIO_Init+0x308>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x21a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4e      	ldr	r2, [pc, #312]	@ (8001064 <HAL_GPIO_Init+0x30c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x216>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4d      	ldr	r2, [pc, #308]	@ (8001068 <HAL_GPIO_Init+0x310>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x212>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4c      	ldr	r2, [pc, #304]	@ (800106c <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x20e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	@ (8001070 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x20a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	@ (8001074 <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x206>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	@ (8001078 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x202>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x21c>
 8000f72:	2300      	movs	r3, #0
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f84:	4935      	ldr	r1, [pc, #212]	@ (800105c <HAL_GPIO_Init+0x304>)
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f92:	4b3a      	ldr	r3, [pc, #232]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb6:	4a31      	ldr	r2, [pc, #196]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe0:	4a26      	ldr	r2, [pc, #152]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	@ (800107c <HAL_GPIO_Init+0x324>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <HAL_GPIO_Init+0x324>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001034:	4a11      	ldr	r2, [pc, #68]	@ (800107c <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b0f      	cmp	r3, #15
 8001044:	f67f ae96 	bls.w	8000d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40013800 	.word	0x40013800
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800
 800106c:	40020c00 	.word	0x40020c00
 8001070:	40021000 	.word	0x40021000
 8001074:	40021400 	.word	0x40021400
 8001078:	40021800 	.word	0x40021800
 800107c:	40013c00 	.word	0x40013c00

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800109c:	e003      	b.n	80010a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109e:	887b      	ldrh	r3, [r7, #2]
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	619a      	str	r2, [r3, #24]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	400b      	ands	r3, r1
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	619a      	str	r2, [r3, #24]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0cc      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010fc:	4b68      	ldr	r3, [pc, #416]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d90c      	bls.n	8001124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b65      	ldr	r3, [pc, #404]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a58      	ldr	r2, [pc, #352]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001146:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	4a52      	ldr	r2, [pc, #328]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800115e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	4313      	orrs	r3, r2
 8001170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d044      	beq.n	8001208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d119      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d003      	beq.n	80011a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b3f      	ldr	r3, [pc, #252]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e067      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c6:	4b37      	ldr	r3, [pc, #220]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f023 0203 	bic.w	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4934      	ldr	r1, [pc, #208]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fc0e 	bl	80009f8 <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e0:	f7ff fc0a 	bl	80009f8 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e04f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	4b2b      	ldr	r3, [pc, #172]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 020c 	and.w	r2, r3, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d1eb      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d20c      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f855 	bl	800131c <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fb6e 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023c00 	.word	0x40023c00
 80012a4:	40023800 	.word	0x40023800
 80012a8:	08002c10 	.word	0x08002c10
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012d0:	f7ff fff0 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	0a9b      	lsrs	r3, r3, #10
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	4903      	ldr	r1, [pc, #12]	@ (80012f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40023800 	.word	0x40023800
 80012f0:	08002c20 	.word	0x08002c20

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012f8:	f7ff ffdc 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0b5b      	lsrs	r3, r3, #13
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4903      	ldr	r1, [pc, #12]	@ (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	08002c20 	.word	0x08002c20

0800131c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001320:	b0ae      	sub	sp, #184	@ 0xb8
 8001322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001342:	4bcb      	ldr	r3, [pc, #812]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b0c      	cmp	r3, #12
 800134c:	f200 8206 	bhi.w	800175c <HAL_RCC_GetSysClockFreq+0x440>
 8001350:	a201      	add	r2, pc, #4	@ (adr r2, 8001358 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	0800138d 	.word	0x0800138d
 800135c:	0800175d 	.word	0x0800175d
 8001360:	0800175d 	.word	0x0800175d
 8001364:	0800175d 	.word	0x0800175d
 8001368:	08001395 	.word	0x08001395
 800136c:	0800175d 	.word	0x0800175d
 8001370:	0800175d 	.word	0x0800175d
 8001374:	0800175d 	.word	0x0800175d
 8001378:	0800139d 	.word	0x0800139d
 800137c:	0800175d 	.word	0x0800175d
 8001380:	0800175d 	.word	0x0800175d
 8001384:	0800175d 	.word	0x0800175d
 8001388:	0800158d 	.word	0x0800158d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4bb9      	ldr	r3, [pc, #740]	@ (8001674 <HAL_RCC_GetSysClockFreq+0x358>)
 800138e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001392:	e1e7      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001394:	4bb8      	ldr	r3, [pc, #736]	@ (8001678 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800139a:	e1e3      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800139c:	4bb4      	ldr	r3, [pc, #720]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013a8:	4bb1      	ldr	r3, [pc, #708]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d071      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b4:	4bae      	ldr	r3, [pc, #696]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013da:	4622      	mov	r2, r4
 80013dc:	462b      	mov	r3, r5
 80013de:	f04f 0000 	mov.w	r0, #0
 80013e2:	f04f 0100 	mov.w	r1, #0
 80013e6:	0159      	lsls	r1, r3, #5
 80013e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013ec:	0150      	lsls	r0, r2, #5
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4621      	mov	r1, r4
 80013f4:	1a51      	subs	r1, r2, r1
 80013f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80013f8:	4629      	mov	r1, r5
 80013fa:	eb63 0301 	sbc.w	r3, r3, r1
 80013fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800140c:	4649      	mov	r1, r9
 800140e:	018b      	lsls	r3, r1, #6
 8001410:	4641      	mov	r1, r8
 8001412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001416:	4641      	mov	r1, r8
 8001418:	018a      	lsls	r2, r1, #6
 800141a:	4641      	mov	r1, r8
 800141c:	1a51      	subs	r1, r2, r1
 800141e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001420:	4649      	mov	r1, r9
 8001422:	eb63 0301 	sbc.w	r3, r3, r1
 8001426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001434:	4649      	mov	r1, r9
 8001436:	00cb      	lsls	r3, r1, #3
 8001438:	4641      	mov	r1, r8
 800143a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800143e:	4641      	mov	r1, r8
 8001440:	00ca      	lsls	r2, r1, #3
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	4603      	mov	r3, r0
 8001448:	4622      	mov	r2, r4
 800144a:	189b      	adds	r3, r3, r2
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
 800144e:	462b      	mov	r3, r5
 8001450:	460a      	mov	r2, r1
 8001452:	eb42 0303 	adc.w	r3, r2, r3
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001464:	4629      	mov	r1, r5
 8001466:	024b      	lsls	r3, r1, #9
 8001468:	4621      	mov	r1, r4
 800146a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800146e:	4621      	mov	r1, r4
 8001470:	024a      	lsls	r2, r1, #9
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800147a:	2200      	movs	r2, #0
 800147c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001480:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001484:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001488:	f7fe febc 	bl	8000204 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001496:	e067      	b.n	8001568 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014b2:	2300      	movs	r3, #0
 80014b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014ba:	4622      	mov	r2, r4
 80014bc:	462b      	mov	r3, r5
 80014be:	f04f 0000 	mov.w	r0, #0
 80014c2:	f04f 0100 	mov.w	r1, #0
 80014c6:	0159      	lsls	r1, r3, #5
 80014c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014cc:	0150      	lsls	r0, r2, #5
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4621      	mov	r1, r4
 80014d4:	1a51      	subs	r1, r2, r1
 80014d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014d8:	4629      	mov	r1, r5
 80014da:	eb63 0301 	sbc.w	r3, r3, r1
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f04f 0300 	mov.w	r3, #0
 80014e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014ec:	4649      	mov	r1, r9
 80014ee:	018b      	lsls	r3, r1, #6
 80014f0:	4641      	mov	r1, r8
 80014f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f6:	4641      	mov	r1, r8
 80014f8:	018a      	lsls	r2, r1, #6
 80014fa:	4641      	mov	r1, r8
 80014fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001500:	4649      	mov	r1, r9
 8001502:	eb63 0b01 	sbc.w	fp, r3, r1
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001512:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800151a:	4692      	mov	sl, r2
 800151c:	469b      	mov	fp, r3
 800151e:	4623      	mov	r3, r4
 8001520:	eb1a 0303 	adds.w	r3, sl, r3
 8001524:	623b      	str	r3, [r7, #32]
 8001526:	462b      	mov	r3, r5
 8001528:	eb4b 0303 	adc.w	r3, fp, r3
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800153a:	4629      	mov	r1, r5
 800153c:	028b      	lsls	r3, r1, #10
 800153e:	4621      	mov	r1, r4
 8001540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001544:	4621      	mov	r1, r4
 8001546:	028a      	lsls	r2, r1, #10
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001550:	2200      	movs	r2, #0
 8001552:	673b      	str	r3, [r7, #112]	@ 0x70
 8001554:	677a      	str	r2, [r7, #116]	@ 0x74
 8001556:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800155a:	f7fe fe53 	bl	8000204 <__aeabi_uldivmod>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4613      	mov	r3, r2
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001568:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	0c1b      	lsrs	r3, r3, #16
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	3301      	adds	r3, #1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800157a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800157e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158a:	e0eb      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d06b      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	2200      	movs	r2, #0
 80015ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80015b8:	2300      	movs	r3, #0
 80015ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80015bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015c0:	4622      	mov	r2, r4
 80015c2:	462b      	mov	r3, r5
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0159      	lsls	r1, r3, #5
 80015ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d2:	0150      	lsls	r0, r2, #5
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4621      	mov	r1, r4
 80015da:	1a51      	subs	r1, r2, r1
 80015dc:	61b9      	str	r1, [r7, #24]
 80015de:	4629      	mov	r1, r5
 80015e0:	eb63 0301 	sbc.w	r3, r3, r1
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015f2:	4659      	mov	r1, fp
 80015f4:	018b      	lsls	r3, r1, #6
 80015f6:	4651      	mov	r1, sl
 80015f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015fc:	4651      	mov	r1, sl
 80015fe:	018a      	lsls	r2, r1, #6
 8001600:	4651      	mov	r1, sl
 8001602:	ebb2 0801 	subs.w	r8, r2, r1
 8001606:	4659      	mov	r1, fp
 8001608:	eb63 0901 	sbc.w	r9, r3, r1
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001618:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800161c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001620:	4690      	mov	r8, r2
 8001622:	4699      	mov	r9, r3
 8001624:	4623      	mov	r3, r4
 8001626:	eb18 0303 	adds.w	r3, r8, r3
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	462b      	mov	r3, r5
 800162e:	eb49 0303 	adc.w	r3, r9, r3
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001640:	4629      	mov	r1, r5
 8001642:	024b      	lsls	r3, r1, #9
 8001644:	4621      	mov	r1, r4
 8001646:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800164a:	4621      	mov	r1, r4
 800164c:	024a      	lsls	r2, r1, #9
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001656:	2200      	movs	r2, #0
 8001658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800165a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800165c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001660:	f7fe fdd0 	bl	8000204 <__aeabi_uldivmod>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4613      	mov	r3, r2
 800166a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800166e:	e065      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x420>
 8001670:	40023800 	.word	0x40023800
 8001674:	00f42400 	.word	0x00f42400
 8001678:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167c:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x458>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	099b      	lsrs	r3, r3, #6
 8001682:	2200      	movs	r2, #0
 8001684:	4618      	mov	r0, r3
 8001686:	4611      	mov	r1, r2
 8001688:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800168c:	653b      	str	r3, [r7, #80]	@ 0x50
 800168e:	2300      	movs	r3, #0
 8001690:	657b      	str	r3, [r7, #84]	@ 0x54
 8001692:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001696:	4642      	mov	r2, r8
 8001698:	464b      	mov	r3, r9
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	0159      	lsls	r1, r3, #5
 80016a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a8:	0150      	lsls	r0, r2, #5
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4641      	mov	r1, r8
 80016b0:	1a51      	subs	r1, r2, r1
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	4649      	mov	r1, r9
 80016b6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016c8:	4659      	mov	r1, fp
 80016ca:	018b      	lsls	r3, r1, #6
 80016cc:	4651      	mov	r1, sl
 80016ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d2:	4651      	mov	r1, sl
 80016d4:	018a      	lsls	r2, r1, #6
 80016d6:	4651      	mov	r1, sl
 80016d8:	1a54      	subs	r4, r2, r1
 80016da:	4659      	mov	r1, fp
 80016dc:	eb63 0501 	sbc.w	r5, r3, r1
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	00eb      	lsls	r3, r5, #3
 80016ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ee:	00e2      	lsls	r2, r4, #3
 80016f0:	4614      	mov	r4, r2
 80016f2:	461d      	mov	r5, r3
 80016f4:	4643      	mov	r3, r8
 80016f6:	18e3      	adds	r3, r4, r3
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	464b      	mov	r3, r9
 80016fc:	eb45 0303 	adc.w	r3, r5, r3
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800170e:	4629      	mov	r1, r5
 8001710:	028b      	lsls	r3, r1, #10
 8001712:	4621      	mov	r1, r4
 8001714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001718:	4621      	mov	r1, r4
 800171a:	028a      	lsls	r2, r1, #10
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001724:	2200      	movs	r2, #0
 8001726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001728:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800172a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800172e:	f7fe fd69 	bl	8000204 <__aeabi_uldivmod>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4613      	mov	r3, r2
 8001738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_GetSysClockFreq+0x458>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	0f1b      	lsrs	r3, r3, #28
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800174a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800174e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800175a:	e003      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x45c>)
 800175e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001768:	4618      	mov	r0, r3
 800176a:	37b8      	adds	r7, #184	@ 0xb8
 800176c:	46bd      	mov	sp, r7
 800176e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	00f42400 	.word	0x00f42400

0800177c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e28d      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8083 	beq.w	80018a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800179c:	4b94      	ldr	r3, [pc, #592]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d019      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017a8:	4b91      	ldr	r3, [pc, #580]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017b4:	4b8e      	ldr	r3, [pc, #568]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017c0:	d00c      	beq.n	80017dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4b8b      	ldr	r3, [pc, #556]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b88      	ldr	r3, [pc, #544]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b84      	ldr	r3, [pc, #528]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d05b      	beq.n	80018a0 <HAL_RCC_OscConfig+0x124>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d157      	bne.n	80018a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e25a      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x90>
 80017fe:	4b7c      	ldr	r3, [pc, #496]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7b      	ldr	r2, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xcc>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0xb4>
 8001816:	4b76      	ldr	r3, [pc, #472]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a75      	ldr	r2, [pc, #468]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b73      	ldr	r3, [pc, #460]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a72      	ldr	r2, [pc, #456]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xcc>
 8001830:	4b6f      	ldr	r3, [pc, #444]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a6e      	ldr	r2, [pc, #440]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b6c      	ldr	r3, [pc, #432]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a6b      	ldr	r2, [pc, #428]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f8d2 	bl	80009f8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff f8ce 	bl	80009f8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e21f      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b61      	ldr	r3, [pc, #388]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xdc>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f8be 	bl	80009f8 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff f8ba 	bl	80009f8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e20b      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b57      	ldr	r3, [pc, #348]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x104>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d06f      	beq.n	800198e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018ae:	4b50      	ldr	r3, [pc, #320]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d017      	beq.n	80018ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ba:	4b4d      	ldr	r3, [pc, #308]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
        || \
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018c6:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d2:	4b47      	ldr	r3, [pc, #284]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d11c      	bne.n	8001918 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018de:	4b44      	ldr	r3, [pc, #272]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d116      	bne.n	8001918 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_RCC_OscConfig+0x186>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e1d3      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4937      	ldr	r1, [pc, #220]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	e03a      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001920:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff f867 	bl	80009f8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff f863 	bl	80009f8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1b4      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4925      	ldr	r1, [pc, #148]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 800195c:	4313      	orrs	r3, r2
 800195e:	600b      	str	r3, [r1, #0]
 8001960:	e015      	b.n	800198e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001962:	4b24      	ldr	r3, [pc, #144]	@ (80019f4 <HAL_RCC_OscConfig+0x278>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001968:	f7ff f846 	bl	80009f8 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001970:	f7ff f842 	bl	80009f8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e193      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d036      	beq.n	8001a08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d016      	beq.n	80019d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f826 	bl	80009f8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff f822 	bl	80009f8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e173      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_RCC_OscConfig+0x274>)
 80019c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x234>
 80019ce:	e01b      	b.n	8001a08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f80f 	bl	80009f8 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019dc:	e00e      	b.n	80019fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff f80b 	bl	80009f8 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d907      	bls.n	80019fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e15c      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 80019f0:	40023800 	.word	0x40023800
 80019f4:	42470000 	.word	0x42470000
 80019f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1ea      	bne.n	80019de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8097 	beq.w	8001b44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1a:	4b83      	ldr	r3, [pc, #524]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b79      	ldr	r3, [pc, #484]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b76      	ldr	r3, [pc, #472]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a75      	ldr	r2, [pc, #468]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7fe ffcb 	bl	80009f8 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7fe ffc7 	bl	80009f8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e118      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b6c      	ldr	r3, [pc, #432]	@ (8001c2c <HAL_RCC_OscConfig+0x4b0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x31e>
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a90:	4a65      	ldr	r2, [pc, #404]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a98:	e01c      	b.n	8001ad4 <HAL_RCC_OscConfig+0x358>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x340>
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	4a60      	ldr	r2, [pc, #384]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aae:	4b5e      	ldr	r3, [pc, #376]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x358>
 8001abc:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac0:	4a59      	ldr	r2, [pc, #356]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac8:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001acc:	4a56      	ldr	r2, [pc, #344]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001ace:	f023 0304 	bic.w	r3, r3, #4
 8001ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7fe ff8c 	bl	80009f8 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7fe ff88 	bl	80009f8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0d7      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ee      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x368>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7fe ff76 	bl	80009f8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7fe ff72 	bl	80009f8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0c1      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ee      	bne.n	8001b10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b32:	7dfb      	ldrb	r3, [r7, #23]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d105      	bne.n	8001b44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b38:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80ad 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4e:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d060      	beq.n	8001c1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d145      	bne.n	8001bee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7fe ff46 	bl	80009f8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7fe ff42 	bl	80009f8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e093      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	4b29      	ldr	r3, [pc, #164]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb0:	061b      	lsls	r3, r3, #24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb8:	071b      	lsls	r3, r3, #28
 8001bba:	491b      	ldr	r1, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ff17 	bl	80009f8 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bce:	f7fe ff13 	bl	80009f8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e064      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x452>
 8001bec:	e05c      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_RCC_OscConfig+0x4b4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff00 	bl	80009f8 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe fefc 	bl	80009f8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e04d      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x480>
 8001c1a:	e045      	b.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e040      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb4 <HAL_RCC_OscConfig+0x538>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d030      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d129      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d122      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d119      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10f      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e042      	b.n	8001d50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fd5e 	bl	80007a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2224      	movs	r2, #36	@ 0x24
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fcdb 	bl	80026b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	4613      	mov	r3, r2
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d112      	bne.n	8001d98 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_UART_Receive_IT+0x26>
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00b      	b.n	8001d9a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 faba 	bl	8002308 <UART_Start_Receive_IT>
 8001d94:	4603      	mov	r3, r0
 8001d96:	e000      	b.n	8001d9a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
  }
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0ba      	sub	sp, #232	@ 0xe8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001de2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_UART_IRQHandler+0x66>
 8001df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 fb99 	bl	800253a <UART_Receive_IT>
      return;
 8001e08:	e25b      	b.n	80022c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80de 	beq.w	8001fd0 <HAL_UART_IRQHandler+0x22c>
 8001e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d106      	bne.n	8001e2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e24:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80d1 	beq.w	8001fd0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <HAL_UART_IRQHandler+0xae>
 8001e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4a:	f043 0201 	orr.w	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_UART_IRQHandler+0xd2>
 8001e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f043 0202 	orr.w	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_UART_IRQHandler+0xf6>
 8001e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d011      	beq.n	8001eca <HAL_UART_IRQHandler+0x126>
 8001ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f043 0208 	orr.w	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 81f2 	beq.w	80022b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_UART_IRQHandler+0x14e>
 8001ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fb24 	bl	800253a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efc:	2b40      	cmp	r3, #64	@ 0x40
 8001efe:	bf0c      	ite	eq
 8001f00:	2301      	moveq	r3, #1
 8001f02:	2300      	movne	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d103      	bne.n	8001f1e <HAL_UART_IRQHandler+0x17a>
 8001f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d04f      	beq.n	8001fbe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa2c 	bl	800237c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f2e:	2b40      	cmp	r3, #64	@ 0x40
 8001f30:	d141      	bne.n	8001fb6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3314      	adds	r3, #20
 8001f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f40:	e853 3f00 	ldrex	r3, [r3]
 8001f44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001f5e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001f62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001f6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001f6e:	e841 2300 	strex	r3, r2, [r1]
 8001f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1d9      	bne.n	8001f32 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d013      	beq.n	8001fae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002184 <HAL_UART_IRQHandler+0x3e0>)
 8001f8c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe febd 	bl	8000d12 <HAL_DMA_Abort_IT>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001fa8:	4610      	mov	r0, r2
 8001faa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fac:	e00e      	b.n	8001fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f994 	bl	80022dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb4:	e00a      	b.n	8001fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f990 	bl	80022dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fbc:	e006      	b.n	8001fcc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f98c 	bl	80022dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001fca:	e175      	b.n	80022b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fcc:	bf00      	nop
    return;
 8001fce:	e173      	b.n	80022b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	f040 814f 	bne.w	8002278 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8148 	beq.w	8002278 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8141 	beq.w	8002278 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002016:	2b40      	cmp	r3, #64	@ 0x40
 8002018:	f040 80b6 	bne.w	8002188 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002028:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8145 	beq.w	80022bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800203a:	429a      	cmp	r2, r3
 800203c:	f080 813e 	bcs.w	80022bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002046:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002052:	f000 8088 	beq.w	8002166 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	330c      	adds	r3, #12
 800205c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002060:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002064:	e853 3f00 	ldrex	r3, [r3]
 8002068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800206c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002082:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800208a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800208e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002092:	e841 2300 	strex	r3, r2, [r1]
 8002096:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1d9      	bne.n	8002056 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3314      	adds	r3, #20
 80020a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ac:	e853 3f00 	ldrex	r3, [r3]
 80020b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80020b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3314      	adds	r3, #20
 80020c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80020c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80020ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80020ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80020d2:	e841 2300 	strex	r3, r2, [r1]
 80020d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80020d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e1      	bne.n	80020a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3314      	adds	r3, #20
 80020e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020e8:	e853 3f00 	ldrex	r3, [r3]
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80020ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80020f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3314      	adds	r3, #20
 80020fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002104:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002106:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002108:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800210a:	e841 2300 	strex	r3, r2, [r1]
 800210e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e3      	bne.n	80020de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	330c      	adds	r3, #12
 800212a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800212e:	e853 3f00 	ldrex	r3, [r3]
 8002132:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002136:	f023 0310 	bic.w	r3, r3, #16
 800213a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	330c      	adds	r3, #12
 8002144:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002148:	65ba      	str	r2, [r7, #88]	@ 0x58
 800214a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800214e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002150:	e841 2300 	strex	r3, r2, [r1]
 8002154:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e3      	bne.n	8002124 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe fd66 	bl	8000c32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002174:	b29b      	uxth	r3, r3
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	b29b      	uxth	r3, r3
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f8b7 	bl	80022f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002182:	e09b      	b.n	80022bc <HAL_UART_IRQHandler+0x518>
 8002184:	08002443 	.word	0x08002443
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002190:	b29b      	uxth	r3, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 808e 	beq.w	80022c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8089 	beq.w	80022c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	330c      	adds	r3, #12
 80021b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021b8:	e853 3f00 	ldrex	r3, [r3]
 80021bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80021be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80021d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80021d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021da:	e841 2300 	strex	r3, r2, [r1]
 80021de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80021e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e3      	bne.n	80021ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3314      	adds	r3, #20
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	e853 3f00 	ldrex	r3, [r3]
 80021f4:	623b      	str	r3, [r7, #32]
   return(result);
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	3314      	adds	r3, #20
 8002206:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800220a:	633a      	str	r2, [r7, #48]	@ 0x30
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e3      	bne.n	80021e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	330c      	adds	r3, #12
 8002232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	e853 3f00 	ldrex	r3, [r3]
 800223a:	60fb      	str	r3, [r7, #12]
   return(result);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0310 	bic.w	r3, r3, #16
 8002242:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002250:	61fa      	str	r2, [r7, #28]
 8002252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002254:	69b9      	ldr	r1, [r7, #24]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	e841 2300 	strex	r3, r2, [r1]
 800225c:	617b      	str	r3, [r7, #20]
   return(result);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e3      	bne.n	800222c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800226a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f83d 	bl	80022f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002276:	e023      	b.n	80022c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d009      	beq.n	8002298 <HAL_UART_IRQHandler+0x4f4>
 8002284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f8ea 	bl	800246a <UART_Transmit_IT>
    return;
 8002296:	e014      	b.n	80022c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800229c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00e      	beq.n	80022c2 <HAL_UART_IRQHandler+0x51e>
 80022a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f92a 	bl	800250a <UART_EndTransmit_IT>
    return;
 80022b6:	e004      	b.n	80022c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80022b8:	bf00      	nop
 80022ba:	e002      	b.n	80022c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80022bc:	bf00      	nop
 80022be:	e000      	b.n	80022c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80022c0:	bf00      	nop
  }
}
 80022c2:	37e8      	adds	r7, #232	@ 0xe8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2222      	movs	r2, #34	@ 0x22
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800234c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0201 	orr.w	r2, r2, #1
 800235c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800237c:	b480      	push	{r7}
 800237e:	b095      	sub	sp, #84	@ 0x54
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800238c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800238e:	e853 3f00 	ldrex	r3, [r3]
 8002392:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800239a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80023a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023ac:	e841 2300 	strex	r3, r2, [r1]
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e5      	bne.n	8002384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3314      	adds	r3, #20
 80023be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	e853 3f00 	ldrex	r3, [r3]
 80023c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3314      	adds	r3, #20
 80023d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023e0:	e841 2300 	strex	r3, r2, [r1]
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e5      	bne.n	80023b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d119      	bne.n	8002428 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	330c      	adds	r3, #12
 80023fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	e853 3f00 	ldrex	r3, [r3]
 8002402:	60bb      	str	r3, [r7, #8]
   return(result);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f023 0310 	bic.w	r3, r3, #16
 800240a:	647b      	str	r3, [r7, #68]	@ 0x44
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002414:	61ba      	str	r2, [r7, #24]
 8002416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002418:	6979      	ldr	r1, [r7, #20]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	e841 2300 	strex	r3, r2, [r1]
 8002420:	613b      	str	r3, [r7, #16]
   return(result);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1e5      	bne.n	80023f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002436:	bf00      	nop
 8002438:	3754      	adds	r7, #84	@ 0x54
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff ff3d 	bl	80022dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b21      	cmp	r3, #33	@ 0x21
 800247c:	d13e      	bne.n	80024fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002486:	d114      	bne.n	80024b2 <UART_Transmit_IT+0x48>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d110      	bne.n	80024b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	1c9a      	adds	r2, r3, #2
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	621a      	str	r2, [r3, #32]
 80024b0:	e008      	b.n	80024c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6211      	str	r1, [r2, #32]
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4619      	mov	r1, r3
 80024d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10f      	bne.n	80024f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002520:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fecc 	bl	80022c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b08c      	sub	sp, #48	@ 0x30
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b22      	cmp	r3, #34	@ 0x22
 800254c:	f040 80ae 	bne.w	80026ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002558:	d117      	bne.n	800258a <UART_Receive_IT+0x50>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d113      	bne.n	800258a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b29b      	uxth	r3, r3
 8002574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002578:	b29a      	uxth	r2, r3
 800257a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	1c9a      	adds	r2, r3, #2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
 8002588:	e026      	b.n	80025d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800259c:	d007      	beq.n	80025ae <UART_Receive_IT+0x74>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <UART_Receive_IT+0x82>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e008      	b.n	80025ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4619      	mov	r1, r3
 80025e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d15d      	bne.n	80026a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0220 	bic.w	r2, r2, #32
 80025fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	2b01      	cmp	r3, #1
 8002630:	d135      	bne.n	800269e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	613b      	str	r3, [r7, #16]
   return(result);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	330c      	adds	r3, #12
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	623a      	str	r2, [r7, #32]
 800265a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265c:	69f9      	ldr	r1, [r7, #28]
 800265e:	6a3a      	ldr	r2, [r7, #32]
 8002660:	e841 2300 	strex	r3, r2, [r1]
 8002664:	61bb      	str	r3, [r7, #24]
   return(result);
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e5      	bne.n	8002638 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b10      	cmp	r3, #16
 8002678:	d10a      	bne.n	8002690 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe2a 	bl	80022f0 <HAL_UARTEx_RxEventCallback>
 800269c:	e002      	b.n	80026a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fd ff28 	bl	80004f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e002      	b.n	80026ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	e000      	b.n	80026ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80026ac:	2302      	movs	r3, #2
  }
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3730      	adds	r7, #48	@ 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	b0c0      	sub	sp, #256	@ 0x100
 80026be:	af00      	add	r7, sp, #0
 80026c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	ea40 0301 	orr.w	r3, r0, r1
 80026e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002710:	f021 010c 	bic.w	r1, r1, #12
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800271e:	430b      	orrs	r3, r1
 8002720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002732:	6999      	ldr	r1, [r3, #24]
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	ea40 0301 	orr.w	r3, r0, r1
 800273e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b8f      	ldr	r3, [pc, #572]	@ (8002984 <UART_SetConfig+0x2cc>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d005      	beq.n	8002758 <UART_SetConfig+0xa0>
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b8d      	ldr	r3, [pc, #564]	@ (8002988 <UART_SetConfig+0x2d0>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d104      	bne.n	8002762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002758:	f7fe fdcc 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 800275c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002760:	e003      	b.n	800276a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002762:	f7fe fdb3 	bl	80012cc <HAL_RCC_GetPCLK1Freq>
 8002766:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002774:	f040 810c 	bne.w	8002990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800277c:	2200      	movs	r2, #0
 800277e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002782:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800278a:	4622      	mov	r2, r4
 800278c:	462b      	mov	r3, r5
 800278e:	1891      	adds	r1, r2, r2
 8002790:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002792:	415b      	adcs	r3, r3
 8002794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800279a:	4621      	mov	r1, r4
 800279c:	eb12 0801 	adds.w	r8, r2, r1
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb43 0901 	adc.w	r9, r3, r1
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ba:	4690      	mov	r8, r2
 80027bc:	4699      	mov	r9, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	eb18 0303 	adds.w	r3, r8, r3
 80027c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027c8:	462b      	mov	r3, r5
 80027ca:	eb49 0303 	adc.w	r3, r9, r3
 80027ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027e6:	460b      	mov	r3, r1
 80027e8:	18db      	adds	r3, r3, r3
 80027ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ec:	4613      	mov	r3, r2
 80027ee:	eb42 0303 	adc.w	r3, r2, r3
 80027f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027fc:	f7fd fd02 	bl	8000204 <__aeabi_uldivmod>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4b61      	ldr	r3, [pc, #388]	@ (800298c <UART_SetConfig+0x2d4>)
 8002806:	fba3 2302 	umull	r2, r3, r3, r2
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	011c      	lsls	r4, r3, #4
 800280e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002818:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800281c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002820:	4642      	mov	r2, r8
 8002822:	464b      	mov	r3, r9
 8002824:	1891      	adds	r1, r2, r2
 8002826:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002828:	415b      	adcs	r3, r3
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800282c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002830:	4641      	mov	r1, r8
 8002832:	eb12 0a01 	adds.w	sl, r2, r1
 8002836:	4649      	mov	r1, r9
 8002838:	eb43 0b01 	adc.w	fp, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800284c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002850:	4692      	mov	sl, r2
 8002852:	469b      	mov	fp, r3
 8002854:	4643      	mov	r3, r8
 8002856:	eb1a 0303 	adds.w	r3, sl, r3
 800285a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800285e:	464b      	mov	r3, r9
 8002860:	eb4b 0303 	adc.w	r3, fp, r3
 8002864:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002874:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800287c:	460b      	mov	r3, r1
 800287e:	18db      	adds	r3, r3, r3
 8002880:	643b      	str	r3, [r7, #64]	@ 0x40
 8002882:	4613      	mov	r3, r2
 8002884:	eb42 0303 	adc.w	r3, r2, r3
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
 800288a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800288e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002892:	f7fd fcb7 	bl	8000204 <__aeabi_uldivmod>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4611      	mov	r1, r2
 800289c:	4b3b      	ldr	r3, [pc, #236]	@ (800298c <UART_SetConfig+0x2d4>)
 800289e:	fba3 2301 	umull	r2, r3, r3, r1
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2264      	movs	r2, #100	@ 0x64
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	1acb      	subs	r3, r1, r3
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028b2:	4b36      	ldr	r3, [pc, #216]	@ (800298c <UART_SetConfig+0x2d4>)
 80028b4:	fba3 2302 	umull	r2, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028c0:	441c      	add	r4, r3
 80028c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028d4:	4642      	mov	r2, r8
 80028d6:	464b      	mov	r3, r9
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028dc:	415b      	adcs	r3, r3
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028e4:	4641      	mov	r1, r8
 80028e6:	1851      	adds	r1, r2, r1
 80028e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028ea:	4649      	mov	r1, r9
 80028ec:	414b      	adcs	r3, r1
 80028ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028fc:	4659      	mov	r1, fp
 80028fe:	00cb      	lsls	r3, r1, #3
 8002900:	4651      	mov	r1, sl
 8002902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002906:	4651      	mov	r1, sl
 8002908:	00ca      	lsls	r2, r1, #3
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	4603      	mov	r3, r0
 8002910:	4642      	mov	r2, r8
 8002912:	189b      	adds	r3, r3, r2
 8002914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002918:	464b      	mov	r3, r9
 800291a:	460a      	mov	r2, r1
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002930:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002938:	460b      	mov	r3, r1
 800293a:	18db      	adds	r3, r3, r3
 800293c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800293e:	4613      	mov	r3, r2
 8002940:	eb42 0303 	adc.w	r3, r2, r3
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800294a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800294e:	f7fd fc59 	bl	8000204 <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <UART_SetConfig+0x2d4>)
 8002958:	fba3 1302 	umull	r1, r3, r3, r2
 800295c:	095b      	lsrs	r3, r3, #5
 800295e:	2164      	movs	r1, #100	@ 0x64
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	3332      	adds	r3, #50	@ 0x32
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <UART_SetConfig+0x2d4>)
 800296c:	fba2 2303 	umull	r2, r3, r2, r3
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	f003 0207 	and.w	r2, r3, #7
 8002976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4422      	add	r2, r4
 800297e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002980:	e106      	b.n	8002b90 <UART_SetConfig+0x4d8>
 8002982:	bf00      	nop
 8002984:	40011000 	.word	0x40011000
 8002988:	40011400 	.word	0x40011400
 800298c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002994:	2200      	movs	r2, #0
 8002996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800299a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800299e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029a2:	4642      	mov	r2, r8
 80029a4:	464b      	mov	r3, r9
 80029a6:	1891      	adds	r1, r2, r2
 80029a8:	6239      	str	r1, [r7, #32]
 80029aa:	415b      	adcs	r3, r3
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029b2:	4641      	mov	r1, r8
 80029b4:	1854      	adds	r4, r2, r1
 80029b6:	4649      	mov	r1, r9
 80029b8:	eb43 0501 	adc.w	r5, r3, r1
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029d8:	464b      	mov	r3, r9
 80029da:	eb45 0303 	adc.w	r3, r5, r3
 80029de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029fe:	4629      	mov	r1, r5
 8002a00:	008b      	lsls	r3, r1, #2
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a08:	4621      	mov	r1, r4
 8002a0a:	008a      	lsls	r2, r1, #2
 8002a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a10:	f7fd fbf8 	bl	8000204 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4b60      	ldr	r3, [pc, #384]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	011c      	lsls	r4, r3, #4
 8002a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a26:	2200      	movs	r2, #0
 8002a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a34:	4642      	mov	r2, r8
 8002a36:	464b      	mov	r3, r9
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	61b9      	str	r1, [r7, #24]
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a44:	4641      	mov	r1, r8
 8002a46:	1851      	adds	r1, r2, r1
 8002a48:	6139      	str	r1, [r7, #16]
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	414b      	adcs	r3, r1
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	00cb      	lsls	r3, r1, #3
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a66:	4651      	mov	r1, sl
 8002a68:	00ca      	lsls	r2, r1, #3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4642      	mov	r2, r8
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a78:	464b      	mov	r3, r9
 8002a7a:	460a      	mov	r2, r1
 8002a7c:	eb42 0303 	adc.w	r3, r2, r3
 8002a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	008b      	lsls	r3, r1, #2
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	008a      	lsls	r2, r1, #2
 8002aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aae:	f7fd fba9 	bl	8000204 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4b38      	ldr	r3, [pc, #224]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002aba:	fba3 2301 	umull	r2, r3, r3, r1
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2264      	movs	r2, #100	@ 0x64
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	1acb      	subs	r3, r1, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	@ 0x32
 8002acc:	4a33      	ldr	r2, [pc, #204]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ad8:	441c      	add	r4, r3
 8002ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ade:	2200      	movs	r2, #0
 8002ae0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ae2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ae4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ae8:	4642      	mov	r2, r8
 8002aea:	464b      	mov	r3, r9
 8002aec:	1891      	adds	r1, r2, r2
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	415b      	adcs	r3, r3
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002af8:	4641      	mov	r1, r8
 8002afa:	1851      	adds	r1, r2, r1
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	4649      	mov	r1, r9
 8002b00:	414b      	adcs	r3, r1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b10:	4659      	mov	r1, fp
 8002b12:	00cb      	lsls	r3, r1, #3
 8002b14:	4651      	mov	r1, sl
 8002b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b1a:	4651      	mov	r1, sl
 8002b1c:	00ca      	lsls	r2, r1, #3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	4642      	mov	r2, r8
 8002b26:	189b      	adds	r3, r3, r2
 8002b28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	460a      	mov	r2, r1
 8002b2e:	eb42 0303 	adc.w	r3, r2, r3
 8002b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	008b      	lsls	r3, r1, #2
 8002b50:	4641      	mov	r1, r8
 8002b52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b56:	4641      	mov	r1, r8
 8002b58:	008a      	lsls	r2, r1, #2
 8002b5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b5e:	f7fd fb51 	bl	8000204 <__aeabi_uldivmod>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002b68:	fba3 1302 	umull	r1, r3, r3, r2
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	2164      	movs	r1, #100	@ 0x64
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	3332      	adds	r3, #50	@ 0x32
 8002b7a:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <UART_SetConfig+0x4e4>)
 8002b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4422      	add	r2, r4
 8002b8e:	609a      	str	r2, [r3, #8]
}
 8002b90:	bf00      	nop
 8002b92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b96:	46bd      	mov	sp, r7
 8002b98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9c:	51eb851f 	.word	0x51eb851f

08002ba0 <memset>:
 8002ba0:	4402      	add	r2, r0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8002be8 <__libc_init_array+0x38>)
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8002bec <__libc_init_array+0x3c>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	2600      	movs	r6, #0
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8002bf0 <__libc_init_array+0x40>)
 8002bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8002bf4 <__libc_init_array+0x44>)
 8002bc4:	f000 f818 	bl	8002bf8 <_init>
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	2600      	movs	r6, #0
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08002c30 	.word	0x08002c30
 8002bec:	08002c30 	.word	0x08002c30
 8002bf0:	08002c30 	.word	0x08002c30
 8002bf4:	08002c34 	.word	0x08002c34

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
