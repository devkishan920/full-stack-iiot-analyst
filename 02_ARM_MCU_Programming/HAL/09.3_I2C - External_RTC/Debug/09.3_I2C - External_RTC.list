
09.3_I2C - External_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004d50  08004d50  00005d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df8  08004df8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df8  08004df8  00005df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004e00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08004e68  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004e68  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b5  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a71  00000000  00000000  0001124d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00012cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000831  00000000  00000000  00013740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002234c  00000000  00000000  00013f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd4f  00000000  00000000  000362bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cca11  00000000  00000000  0004400c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003524  00000000  00000000  00110a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00113f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d38 	.word	0x08004d38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004d38 	.word	0x08004d38

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <decToBcd>:
#define DS1307_ADDRESS 0xD0
#define SLAVE_ADDRESS_LCD 0x4E

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <decToBcd+0x48>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1092      	asrs	r2, r2, #2
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	b2d8      	uxtb	r0, r3
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <decToBcd+0x48>)
 80005c0:	fb83 1302 	smull	r1, r3, r3, r2
 80005c4:	1099      	asrs	r1, r3, #2
 80005c6:	17d3      	asrs	r3, r2, #31
 80005c8:	1ac9      	subs	r1, r1, r3
 80005ca:	460b      	mov	r3, r1
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	1ad1      	subs	r1, r2, r3
 80005d4:	b2cb      	uxtb	r3, r1
 80005d6:	4403      	add	r3, r0
 80005d8:	b2db      	uxtb	r3, r3
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	66666667 	.word	0x66666667

080005ec <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	461a      	mov	r2, r3
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	4413      	add	r3, r2
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <Set_Time>:
} TIME;

 TIME Time;

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af04      	add	r7, sp, #16
 8000622:	4604      	mov	r4, r0
 8000624:	4608      	mov	r0, r1
 8000626:	4611      	mov	r1, r2
 8000628:	461a      	mov	r2, r3
 800062a:	4623      	mov	r3, r4
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	4603      	mov	r3, r0
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	460b      	mov	r3, r1
 8000634:	717b      	strb	r3, [r7, #5]
 8000636:	4613      	mov	r3, r2
 8000638:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffaf 	bl	80005a0 <decToBcd>
 8000642:	4603      	mov	r3, r0
 8000644:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffa9 	bl	80005a0 <decToBcd>
 800064e:	4603      	mov	r3, r0
 8000650:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffa3 	bl	80005a0 <decToBcd>
 800065a:	4603      	mov	r3, r0
 800065c:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 800065e:	793b      	ldrb	r3, [r7, #4]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff9d 	bl	80005a0 <decToBcd>
 8000666:	4603      	mov	r3, r0
 8000668:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 800066a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff96 	bl	80005a0 <decToBcd>
 8000674:	4603      	mov	r3, r0
 8000676:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000678:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff8f 	bl	80005a0 <decToBcd>
 8000682:	4603      	mov	r3, r0
 8000684:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8000686:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff88 	bl	80005a0 <decToBcd>
 8000690:	4603      	mov	r3, r0
 8000692:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS1307_ADDRESS, 0x00, 1, set_time, 7, 1000);
 8000694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2307      	movs	r3, #7
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2301      	movs	r3, #1
 80006a6:	2200      	movs	r2, #0
 80006a8:	21d0      	movs	r1, #208	@ 0xd0
 80006aa:	4803      	ldr	r0, [pc, #12]	@ (80006b8 <Set_Time+0x9c>)
 80006ac:	f001 f9f4 	bl	8001a98 <HAL_I2C_Mem_Write>
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd90      	pop	{r4, r7, pc}
 80006b8:	20000084 	.word	0x20000084

080006bc <Get_Time>:

//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);

void Get_Time (void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80006c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c6:	9302      	str	r3, [sp, #8]
 80006c8:	2307      	movs	r3, #7
 80006ca:	9301      	str	r3, [sp, #4]
 80006cc:	463b      	mov	r3, r7
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	2200      	movs	r2, #0
 80006d4:	21d0      	movs	r1, #208	@ 0xd0
 80006d6:	482c      	ldr	r0, [pc, #176]	@ (8000788 <Get_Time+0xcc>)
 80006d8:	f001 fad8 	bl	8001c8c <HAL_I2C_Mem_Read>
	Time.seconds = bcdToDec(get_time[0]);
 80006dc:	783b      	ldrb	r3, [r7, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff84 	bl	80005ec <bcdToDec>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b28      	ldr	r3, [pc, #160]	@ (800078c <Get_Time+0xd0>)
 80006ea:	701a      	strb	r2, [r3, #0]
	Time.minutes = bcdToDec(get_time[1]);
 80006ec:	787b      	ldrb	r3, [r7, #1]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff7c 	bl	80005ec <bcdToDec>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <Get_Time+0xd0>)
 80006fa:	705a      	strb	r2, [r3, #1]
	Time.hour = bcdToDec(get_time[2]);
 80006fc:	78bb      	ldrb	r3, [r7, #2]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff74 	bl	80005ec <bcdToDec>
 8000704:	4603      	mov	r3, r0
 8000706:	b2da      	uxtb	r2, r3
 8000708:	4b20      	ldr	r3, [pc, #128]	@ (800078c <Get_Time+0xd0>)
 800070a:	709a      	strb	r2, [r3, #2]
	Time.dayofweek = bcdToDec(get_time[3]);
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff6c 	bl	80005ec <bcdToDec>
 8000714:	4603      	mov	r3, r0
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <Get_Time+0xd0>)
 800071a:	70da      	strb	r2, [r3, #3]
	Time.dayofmonth = bcdToDec(get_time[4]);
 800071c:	793b      	ldrb	r3, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff64 	bl	80005ec <bcdToDec>
 8000724:	4603      	mov	r3, r0
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <Get_Time+0xd0>)
 800072a:	711a      	strb	r2, [r3, #4]
	Time.month = bcdToDec(get_time[5]);
 800072c:	797b      	ldrb	r3, [r7, #5]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff5c 	bl	80005ec <bcdToDec>
 8000734:	4603      	mov	r3, r0
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <Get_Time+0xd0>)
 800073a:	715a      	strb	r2, [r3, #5]
	Time.year = bcdToDec(get_time[6]);
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ff54 	bl	80005ec <bcdToDec>
 8000744:	4603      	mov	r3, r0
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <Get_Time+0xd0>)
 800074a:	719a      	strb	r2, [r3, #6]

//	-------------------------------------------------
	printf("Time: %02d:%02d:%02d\n", Time.hour, Time.minutes, Time.seconds);
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <Get_Time+0xd0>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	4619      	mov	r1, r3
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <Get_Time+0xd0>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	461a      	mov	r2, r3
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <Get_Time+0xd0>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	480c      	ldr	r0, [pc, #48]	@ (8000790 <Get_Time+0xd4>)
 800075e:	f003 fa6b 	bl	8003c38 <iprintf>
	printf("Date: %02d-%02d-20%02d\n", Time.dayofmonth, Time.month, Time.year);
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <Get_Time+0xd0>)
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	4619      	mov	r1, r3
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <Get_Time+0xd0>)
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	461a      	mov	r2, r3
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <Get_Time+0xd0>)
 8000770:	799b      	ldrb	r3, [r3, #6]
 8000772:	4808      	ldr	r0, [pc, #32]	@ (8000794 <Get_Time+0xd8>)
 8000774:	f003 fa60 	bl	8003c38 <iprintf>
	printf("\n");
 8000778:	200a      	movs	r0, #10
 800077a:	f003 fa6f 	bl	8003c5c <putchar>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000084 	.word	0x20000084
 800078c:	20000120 	.word	0x20000120
 8000790:	08004d50 	.word	0x08004d50
 8000794:	08004d68 	.word	0x08004d68

08000798 <lcd_send_cmd>:
char buffer2[10];


//--------------------------------------------------------------lcd
void lcd_send_cmd (char cmd)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af02      	add	r7, sp, #8
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f023 030f 	bic.w	r3, r3, #15
 80007a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	011b      	lsls	r3, r3, #4
 80007ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	f043 030c 	orr.w	r3, r3, #12
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	f043 030c 	orr.w	r3, r3, #12
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007d8:	f107 0208 	add.w	r2, r7, #8
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2304      	movs	r3, #4
 80007e2:	214e      	movs	r1, #78	@ 0x4e
 80007e4:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <lcd_send_cmd+0x5c>)
 80007e6:	f001 f859 	bl	800189c <HAL_I2C_Master_Transmit>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000084 	.word	0x20000084

080007f8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f023 030f 	bic.w	r3, r3, #15
 8000808:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f043 030d 	orr.w	r3, r3, #13
 8000816:	b2db      	uxtb	r3, r3
 8000818:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	f043 0309 	orr.w	r3, r3, #9
 8000820:	b2db      	uxtb	r3, r3
 8000822:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000824:	7bbb      	ldrb	r3, [r7, #14]
 8000826:	f043 030d 	orr.w	r3, r3, #13
 800082a:	b2db      	uxtb	r3, r3
 800082c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	f043 0309 	orr.w	r3, r3, #9
 8000834:	b2db      	uxtb	r3, r3
 8000836:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000838:	f107 0208 	add.w	r2, r7, #8
 800083c:	2364      	movs	r3, #100	@ 0x64
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2304      	movs	r3, #4
 8000842:	214e      	movs	r1, #78	@ 0x4e
 8000844:	4803      	ldr	r0, [pc, #12]	@ (8000854 <lcd_send_data+0x5c>)
 8000846:	f001 f829 	bl	800189c <HAL_I2C_Master_Transmit>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000084 	.word	0x20000084

08000858 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
    switch (row)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <lcd_put_cur+0x18>
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d005      	beq.n	800087a <lcd_put_cur+0x22>
 800086e:	e009      	b.n	8000884 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000876:	603b      	str	r3, [r7, #0]
            break;
 8000878:	e004      	b.n	8000884 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000880:	603b      	str	r3, [r7, #0]
            break;
 8000882:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff85 	bl	8000798 <lcd_send_cmd>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <lcd_send_string>:
	HAL_Delay(1);
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
}

void lcd_send_string (char *str)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800089e:	e006      	b.n	80008ae <lcd_send_string+0x18>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ffa5 	bl	80007f8 <lcd_send_data>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f4      	bne.n	80008a0 <lcd_send_string+0xa>
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <main>:

int row=0;
int col=0;
//--------------------------------------------------------------
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af04      	add	r7, sp, #16
  HAL_Init();
 80008c6:	f000 fb7b 	bl	8000fc0 <HAL_Init>

  SystemClock_Config();
 80008ca:	f000 f84f 	bl	800096c <SystemClock_Config>

  MX_GPIO_Init();
 80008ce:	f000 f913 	bl	8000af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d2:	f000 f8e7 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008d6:	f000 f8b7 	bl	8000a48 <MX_I2C1_Init>

//  void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Set_Time(30, 56, 4, 2, 10, 2, 25);
 80008da:	2319      	movs	r3, #25
 80008dc:	9302      	str	r3, [sp, #8]
 80008de:	2302      	movs	r3, #2
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	230a      	movs	r3, #10
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2302      	movs	r3, #2
 80008e8:	2204      	movs	r2, #4
 80008ea:	2138      	movs	r1, #56	@ 0x38
 80008ec:	201e      	movs	r0, #30
 80008ee:	f7ff fe95 	bl	800061c <Set_Time>

  while (1)
  {
//	  printf("Hello");
	  	  Get_Time();
 80008f2:	f7ff fee3 	bl	80006bc <Get_Time>
	  	  sprintf (buffer1, "%02d:%02d:%02d", Time.hour, Time.minutes, Time.seconds);
 80008f6:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <main+0x98>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	461a      	mov	r2, r3
 80008fc:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <main+0x98>)
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	4619      	mov	r1, r3
 8000902:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <main+0x98>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	460b      	mov	r3, r1
 800090a:	4914      	ldr	r1, [pc, #80]	@ (800095c <main+0x9c>)
 800090c:	4814      	ldr	r0, [pc, #80]	@ (8000960 <main+0xa0>)
 800090e:	f003 f9ad 	bl	8003c6c <siprintf>
		  lcd_put_cur (0,0);
 8000912:	2100      	movs	r1, #0
 8000914:	2000      	movs	r0, #0
 8000916:	f7ff ff9f 	bl	8000858 <lcd_put_cur>
		  lcd_send_string(buffer1);
 800091a:	4811      	ldr	r0, [pc, #68]	@ (8000960 <main+0xa0>)
 800091c:	f7ff ffbb 	bl	8000896 <lcd_send_string>
	  	  sprintf (buffer2, "%02d-%02d-20%02d", Time.dayofmonth, Time.month, Time.year);
 8000920:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <main+0x98>)
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	461a      	mov	r2, r3
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <main+0x98>)
 8000928:	795b      	ldrb	r3, [r3, #5]
 800092a:	4619      	mov	r1, r3
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <main+0x98>)
 800092e:	799b      	ldrb	r3, [r3, #6]
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	460b      	mov	r3, r1
 8000934:	490b      	ldr	r1, [pc, #44]	@ (8000964 <main+0xa4>)
 8000936:	480c      	ldr	r0, [pc, #48]	@ (8000968 <main+0xa8>)
 8000938:	f003 f998 	bl	8003c6c <siprintf>
		  lcd_put_cur (0,0);
 800093c:	2100      	movs	r1, #0
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ff8a 	bl	8000858 <lcd_put_cur>
		  lcd_send_string(buffer2);
 8000944:	4808      	ldr	r0, [pc, #32]	@ (8000968 <main+0xa8>)
 8000946:	f7ff ffa6 	bl	8000896 <lcd_send_string>
	  	  HAL_Delay(1000);
 800094a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094e:	f000 fba9 	bl	80010a4 <HAL_Delay>
	  	  Get_Time();
 8000952:	bf00      	nop
 8000954:	e7cd      	b.n	80008f2 <main+0x32>
 8000956:	bf00      	nop
 8000958:	20000120 	.word	0x20000120
 800095c:	08004d80 	.word	0x08004d80
 8000960:	20000128 	.word	0x20000128
 8000964:	08004d90 	.word	0x08004d90
 8000968:	20000134 	.word	0x20000134

0800096c <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	@ 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2234      	movs	r2, #52	@ 0x34
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 f9d9 	bl	8003d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <SystemClock_Config+0xd4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a29      	ldr	r2, [pc, #164]	@ (8000a40 <SystemClock_Config+0xd4>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a0:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <SystemClock_Config+0xd4>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b24      	ldr	r3, [pc, #144]	@ (8000a44 <SystemClock_Config+0xd8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b8:	4a22      	ldr	r2, [pc, #136]	@ (8000a44 <SystemClock_Config+0xd8>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <SystemClock_Config+0xd8>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e0:	2310      	movs	r3, #16
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 faf8 	bl	8002ff0 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a06:	f000 f8e5 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 ff98 	bl	800295c <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a32:	f000 f8cf 	bl	8000bd4 <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	@ 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a4e:	4a13      	ldr	r2, [pc, #76]	@ (8000a9c <MX_I2C1_Init+0x54>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a52:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a54:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <MX_I2C1_Init+0x58>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	@ (8000a98 <MX_I2C1_Init+0x50>)
 8000a86:	f000 fdc5 	bl	8001614 <HAL_I2C_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f000 f8a0 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000084 	.word	0x20000084
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	000186a0 	.word	0x000186a0

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_USART2_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000adc:	f002 fd26 	bl	800352c <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f875 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000d8 	.word	0x200000d8
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b26      	ldr	r3, [pc, #152]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a25      	ldr	r2, [pc, #148]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <MX_GPIO_Init+0xd4>)
 8000b84:	f000 fd2c 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <MX_GPIO_Init+0xd8>)
 8000ba0:	f000 fb8a 	bl	80012b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <MX_GPIO_Init+0xd4>)
 8000bbc:	f000 fb7c 	bl	80012b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	@ 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1e:	2007      	movs	r0, #7
 8000c20:	f000 fb16 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	@ (8000cb4 <HAL_I2C_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	@ 0xc0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <HAL_I2C_MspInit+0x8c>)
 8000c8a:	f000 fb15 	bl	80012b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a08      	ldr	r2, [pc, #32]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000c98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_I2C_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	@ 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_UART_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12b      	bne.n	8000d3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d36:	f000 fabf 	bl	80012b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	@ 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40004400 	.word	0x40004400
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <MemManage_Handler+0x4>

08000d68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da6:	f000 f95d 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <ITM_SendChar>:
// ITM Register Addresses
#define ITM_STIMULUS_PORT0 *((volatile uint32_t *)0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t *)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
    DEMCR |= (1 << 24); // Enable TRACENA
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <ITM_SendChar+0x48>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <ITM_SendChar+0x48>)
 8000dc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000dc4:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1 << 0); // Enable Stimulus Port 0
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <ITM_SendChar+0x4c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <ITM_SendChar+0x4c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6013      	str	r3, [r2, #0]

    while (!(ITM_STIMULUS_PORT0 & 1))
 8000dd2:	bf00      	nop
 8000dd4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f8      	beq.n	8000dd4 <ITM_SendChar+0x24>
        ; // read FIFO Status in bit[0]

    ITM_STIMULUS_PORT0 = ch;
 8000de2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000edfc 	.word	0xe000edfc
 8000dfc:	e0000e00 	.word	0xe0000e00

08000e00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e00a      	b.n	8000e28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e12:	f3af 8000 	nop.w
 8000e16:	4601      	mov	r1, r0
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60ba      	str	r2, [r7, #8]
 8000e1e:	b2ca      	uxtb	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf0      	blt.n	8000e12 <_read+0x12>
  }

  return len;
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	60f8      	str	r0, [r7, #12]
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	e009      	b.n	8000e60 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	1c5a      	adds	r2, r3, #1
 8000e50:	60ba      	str	r2, [r7, #8]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ffab 	bl	8000db0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	dbf1      	blt.n	8000e4c <_write+0x12>
  }
  return len;
 8000e68:	687b      	ldr	r3, [r7, #4]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_close>:

int _close(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_isatty>:

int _isatty(int file)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b083      	sub	sp, #12
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f002 ff60 	bl	8003dd0 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	@ (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20020000 	.word	0x20020000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	20000140 	.word	0x20000140
 8000f44:	20000298 	.word	0x20000298

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f70:	f7ff ffea 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	@ (8000fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f002 ff1f 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fc8f 	bl	80008c0 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fb0:	08004e00 	.word	0x08004e00
  ldr r2, =_sbss
 8000fb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fb8:	20000294 	.word	0x20000294

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	@ (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f931 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fdf4 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f93b 	bl	800129e <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f911 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000144 	.word	0x20000144

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000144 	.word	0x20000144

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	@ (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	@ 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff47 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff5c 	bl	8001134 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffb0 	bl	800120c <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e165      	b.n	80015a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8154 	bne.w	800159a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d005      	beq.n	800130a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001306:	2b02      	cmp	r3, #2
 8001308:	d130      	bne.n	800136c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	2203      	movs	r2, #3
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 0201 	and.w	r2, r3, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0303 	and.w	r3, r3, #3
 8001374:	2b03      	cmp	r3, #3
 8001376:	d017      	beq.n	80013a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	2203      	movs	r2, #3
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d123      	bne.n	80013fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	08da      	lsrs	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3208      	adds	r2, #8
 80013bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0203 	and.w	r2, r3, #3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 80ae 	beq.w	800159a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b5d      	ldr	r3, [pc, #372]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a5c      	ldr	r2, [pc, #368]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b5a      	ldr	r3, [pc, #360]	@ (80015b8 <HAL_GPIO_Init+0x300>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145a:	4a58      	ldr	r2, [pc, #352]	@ (80015bc <HAL_GPIO_Init+0x304>)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4f      	ldr	r2, [pc, #316]	@ (80015c0 <HAL_GPIO_Init+0x308>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4e      	ldr	r2, [pc, #312]	@ (80015c4 <HAL_GPIO_Init+0x30c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4d      	ldr	r2, [pc, #308]	@ (80015c8 <HAL_GPIO_Init+0x310>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4c      	ldr	r2, [pc, #304]	@ (80015cc <HAL_GPIO_Init+0x314>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4b      	ldr	r2, [pc, #300]	@ (80015d0 <HAL_GPIO_Init+0x318>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x20a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4a      	ldr	r2, [pc, #296]	@ (80015d4 <HAL_GPIO_Init+0x31c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x206>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_GPIO_Init+0x320>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x202>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x21c>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	@ (80015bc <HAL_GPIO_Init+0x304>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <HAL_GPIO_Init+0x324>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a31      	ldr	r2, [pc, #196]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <HAL_GPIO_Init+0x324>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <HAL_GPIO_Init+0x324>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <HAL_GPIO_Init+0x324>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae96 	bls.w	80012d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	@ 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e12b      	b.n	800187e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff faf8 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2224      	movs	r2, #36	@ 0x24
 8001644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001678:	f001 fa62 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 800167c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a81      	ldr	r2, [pc, #516]	@ (8001888 <HAL_I2C_Init+0x274>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d807      	bhi.n	8001698 <HAL_I2C_Init+0x84>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4a80      	ldr	r2, [pc, #512]	@ (800188c <HAL_I2C_Init+0x278>)
 800168c:	4293      	cmp	r3, r2
 800168e:	bf94      	ite	ls
 8001690:	2301      	movls	r3, #1
 8001692:	2300      	movhi	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	e006      	b.n	80016a6 <HAL_I2C_Init+0x92>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4a7d      	ldr	r2, [pc, #500]	@ (8001890 <HAL_I2C_Init+0x27c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	bf94      	ite	ls
 80016a0:	2301      	movls	r3, #1
 80016a2:	2300      	movhi	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0e7      	b.n	800187e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4a78      	ldr	r2, [pc, #480]	@ (8001894 <HAL_I2C_Init+0x280>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	0c9b      	lsrs	r3, r3, #18
 80016b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001888 <HAL_I2C_Init+0x274>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d802      	bhi.n	80016e8 <HAL_I2C_Init+0xd4>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	3301      	adds	r3, #1
 80016e6:	e009      	b.n	80016fc <HAL_I2C_Init+0xe8>
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	4a69      	ldr	r2, [pc, #420]	@ (8001898 <HAL_I2C_Init+0x284>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	3301      	adds	r3, #1
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	430b      	orrs	r3, r1
 8001702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800170e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	495c      	ldr	r1, [pc, #368]	@ (8001888 <HAL_I2C_Init+0x274>)
 8001718:	428b      	cmp	r3, r1
 800171a:	d819      	bhi.n	8001750 <HAL_I2C_Init+0x13c>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e59      	subs	r1, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fbb1 f3f3 	udiv	r3, r1, r3
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001730:	400b      	ands	r3, r1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00a      	beq.n	800174c <HAL_I2C_Init+0x138>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e59      	subs	r1, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fbb1 f3f3 	udiv	r3, r1, r3
 8001744:	3301      	adds	r3, #1
 8001746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174a:	e051      	b.n	80017f0 <HAL_I2C_Init+0x1dc>
 800174c:	2304      	movs	r3, #4
 800174e:	e04f      	b.n	80017f0 <HAL_I2C_Init+0x1dc>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d111      	bne.n	800177c <HAL_I2C_Init+0x168>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	440b      	add	r3, r1
 8001766:	fbb0 f3f3 	udiv	r3, r0, r3
 800176a:	3301      	adds	r3, #1
 800176c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf0c      	ite	eq
 8001774:	2301      	moveq	r3, #1
 8001776:	2300      	movne	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	e012      	b.n	80017a2 <HAL_I2C_Init+0x18e>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	0099      	lsls	r1, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001792:	3301      	adds	r3, #1
 8001794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Init+0x196>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e022      	b.n	80017f0 <HAL_I2C_Init+0x1dc>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10e      	bne.n	80017d0 <HAL_I2C_Init+0x1bc>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1e58      	subs	r0, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	440b      	add	r3, r1
 80017c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ce:	e00f      	b.n	80017f0 <HAL_I2C_Init+0x1dc>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	6809      	ldr	r1, [r1, #0]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800181e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6911      	ldr	r1, [r2, #16]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68d2      	ldr	r2, [r2, #12]
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	430b      	orrs	r3, r1
 8001832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695a      	ldr	r2, [r3, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2220      	movs	r2, #32
 800186a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	000186a0 	.word	0x000186a0
 800188c:	001e847f 	.word	0x001e847f
 8001890:	003d08ff 	.word	0x003d08ff
 8001894:	431bde83 	.word	0x431bde83
 8001898:	10624dd3 	.word	0x10624dd3

0800189c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af02      	add	r7, sp, #8
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	461a      	mov	r2, r3
 80018a8:	460b      	mov	r3, r1
 80018aa:	817b      	strh	r3, [r7, #10]
 80018ac:	4613      	mov	r3, r2
 80018ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018b0:	f7ff fbec 	bl	800108c <HAL_GetTick>
 80018b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b20      	cmp	r3, #32
 80018c0:	f040 80e0 	bne.w	8001a84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2319      	movs	r3, #25
 80018ca:	2201      	movs	r2, #1
 80018cc:	4970      	ldr	r1, [pc, #448]	@ (8001a90 <HAL_I2C_Master_Transmit+0x1f4>)
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 fe0e 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018da:	2302      	movs	r3, #2
 80018dc:	e0d3      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_I2C_Master_Transmit+0x50>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e0cc      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1ea>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d007      	beq.n	8001912 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001920:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2221      	movs	r2, #33	@ 0x21
 8001926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2210      	movs	r2, #16
 800192e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	893a      	ldrh	r2, [r7, #8]
 8001942:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4a50      	ldr	r2, [pc, #320]	@ (8001a94 <HAL_I2C_Master_Transmit+0x1f8>)
 8001952:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001954:	8979      	ldrh	r1, [r7, #10]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fbc8 	bl	80020f0 <I2C_MasterRequestWrite>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e08d      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001980:	e066      	b.n	8001a50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6a39      	ldr	r1, [r7, #32]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fecc 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00d      	beq.n	80019ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	2b04      	cmp	r3, #4
 8001998:	d107      	bne.n	80019aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06b      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b2:	781a      	ldrb	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d11b      	bne.n	8001a24 <HAL_I2C_Master_Transmit+0x188>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	6a39      	ldr	r1, [r7, #32]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 fec3 	bl	80027b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00d      	beq.n	8001a50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d107      	bne.n	8001a4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e01a      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d194      	bne.n	8001982 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a84:	2302      	movs	r3, #2
  }
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3718      	adds	r7, #24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	00100002 	.word	0x00100002
 8001a94:	ffff0000 	.word	0xffff0000

08001a98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	817b      	strh	r3, [r7, #10]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	813b      	strh	r3, [r7, #8]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ab2:	f7ff faeb 	bl	800108c <HAL_GetTick>
 8001ab6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	f040 80d9 	bne.w	8001c78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2319      	movs	r3, #25
 8001acc:	2201      	movs	r2, #1
 8001ace:	496d      	ldr	r1, [pc, #436]	@ (8001c84 <HAL_I2C_Mem_Write+0x1ec>)
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fd0d 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
 8001ade:	e0cc      	b.n	8001c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_I2C_Mem_Write+0x56>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e0c5      	b.n	8001c7a <HAL_I2C_Mem_Write+0x1e2>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d007      	beq.n	8001b14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2221      	movs	r2, #33	@ 0x21
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	@ 0x40
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a4d      	ldr	r2, [pc, #308]	@ (8001c88 <HAL_I2C_Mem_Write+0x1f0>)
 8001b54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b56:	88f8      	ldrh	r0, [r7, #6]
 8001b58:	893a      	ldrh	r2, [r7, #8]
 8001b5a:	8979      	ldrh	r1, [r7, #10]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4603      	mov	r3, r0
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 fb44 	bl	80021f4 <I2C_RequestMemoryWrite>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d052      	beq.n	8001c18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e081      	b.n	8001c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fdd2 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d107      	bne.n	8001b9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e06b      	b.n	8001c7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	781a      	ldrb	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d11b      	bne.n	8001c18 <HAL_I2C_Mem_Write+0x180>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d017      	beq.n	8001c18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1aa      	bne.n	8001b76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fdc5 	bl	80027b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d107      	bne.n	8001c48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e016      	b.n	8001c7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	00100002 	.word	0x00100002
 8001c88:	ffff0000 	.word	0xffff0000

08001c8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	@ 0x30
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	817b      	strh	r3, [r7, #10]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	813b      	strh	r3, [r7, #8]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ca6:	f7ff f9f1 	bl	800108c <HAL_GetTick>
 8001caa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	f040 8214 	bne.w	80020e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2319      	movs	r3, #25
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	497b      	ldr	r1, [pc, #492]	@ (8001eb0 <HAL_I2C_Mem_Read+0x224>)
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fc13 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e207      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Mem_Read+0x56>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e200      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d007      	beq.n	8001d08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2222      	movs	r2, #34	@ 0x22
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2240      	movs	r2, #64	@ 0x40
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb4 <HAL_I2C_Mem_Read+0x228>)
 8001d48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d4a:	88f8      	ldrh	r0, [r7, #6]
 8001d4c:	893a      	ldrh	r2, [r7, #8]
 8001d4e:	8979      	ldrh	r1, [r7, #10]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4603      	mov	r3, r0
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 fae0 	bl	8002320 <I2C_RequestMemoryRead>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e1bc      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d113      	bne.n	8001d9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	623b      	str	r3, [r7, #32]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	623b      	str	r3, [r7, #32]
 8001d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e190      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d11b      	bne.n	8001dda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e170      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d11b      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	e150      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001e30:	e144      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	f200 80f1 	bhi.w	800201e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d123      	bne.n	8001e8c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fcfb 	bl	8002844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e145      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e8a:	e117      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d14e      	bne.n	8001f32 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <HAL_I2C_Mem_Read+0x22c>)
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fb26 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e11a      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
 8001eae:	bf00      	nop
 8001eb0:	00100002 	.word	0x00100002
 8001eb4:	ffff0000 	.word	0xffff0000
 8001eb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f30:	e0c4      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f38:	2200      	movs	r2, #0
 8001f3a:	496c      	ldr	r1, [pc, #432]	@ (80020ec <HAL_I2C_Mem_Read+0x460>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fad7 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0cb      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f94:	2200      	movs	r2, #0
 8001f96:	4955      	ldr	r1, [pc, #340]	@ (80020ec <HAL_I2C_Mem_Read+0x460>)
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 faa9 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e09d      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800201c:	e04e      	b.n	80020bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002020:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fc0e 	bl	8002844 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e058      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b04      	cmp	r3, #4
 8002070:	d124      	bne.n	80020bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002088:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f47f aeb6 	bne.w	8001e32 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3728      	adds	r7, #40	@ 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	00010004 	.word	0x00010004

080020f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	460b      	mov	r3, r1
 80020fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d006      	beq.n	800211a <I2C_MasterRequestWrite+0x2a>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d003      	beq.n	800211a <I2C_MasterRequestWrite+0x2a>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002118:	d108      	bne.n	800212c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e00b      	b.n	8002144 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	2b12      	cmp	r3, #18
 8002132:	d107      	bne.n	8002144 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002142:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f9cd 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800216a:	d103      	bne.n	8002174 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e035      	b.n	80021e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002180:	d108      	bne.n	8002194 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002182:	897b      	ldrh	r3, [r7, #10]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002190:	611a      	str	r2, [r3, #16]
 8002192:	e01b      	b.n	80021cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002194:	897b      	ldrh	r3, [r7, #10]
 8002196:	11db      	asrs	r3, r3, #7
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f003 0306 	and.w	r3, r3, #6
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f063 030f 	orn	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	490e      	ldr	r1, [pc, #56]	@ (80021ec <I2C_MasterRequestWrite+0xfc>)
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa16 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e010      	b.n	80021e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4907      	ldr	r1, [pc, #28]	@ (80021f0 <I2C_MasterRequestWrite+0x100>)
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fa06 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	00010008 	.word	0x00010008
 80021f0:	00010002 	.word	0x00010002

080021f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	4608      	mov	r0, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	461a      	mov	r2, r3
 8002202:	4603      	mov	r3, r0
 8002204:	817b      	strh	r3, [r7, #10]
 8002206:	460b      	mov	r3, r1
 8002208:	813b      	strh	r3, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	2200      	movs	r2, #0
 8002226:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f960 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00d      	beq.n	8002252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002244:	d103      	bne.n	800224e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e05f      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	6a3a      	ldr	r2, [r7, #32]
 8002266:	492d      	ldr	r1, [pc, #180]	@ (800231c <I2C_RequestMemoryWrite+0x128>)
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f9bb 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04c      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa46 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d107      	bne.n	80022b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e02b      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022c0:	893b      	ldrh	r3, [r7, #8]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	e021      	b.n	8002310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022cc:	893b      	ldrh	r3, [r7, #8]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fa20 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00d      	beq.n	8002306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d107      	bne.n	8002302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e005      	b.n	8002312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002306:	893b      	ldrh	r3, [r7, #8]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	00010002 	.word	0x00010002

08002320 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	817b      	strh	r3, [r7, #10]
 8002332:	460b      	mov	r3, r1
 8002334:	813b      	strh	r3, [r7, #8]
 8002336:	4613      	mov	r3, r2
 8002338:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002348:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002358:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2200      	movs	r2, #0
 8002362:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f8c2 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002380:	d103      	bne.n	800238a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0aa      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800238e:	897b      	ldrh	r3, [r7, #10]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800239c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	6a3a      	ldr	r2, [r7, #32]
 80023a2:	4952      	ldr	r1, [pc, #328]	@ (80024ec <I2C_RequestMemoryRead+0x1cc>)
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f91d 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e097      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f9a8 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e076      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023f6:	88fb      	ldrh	r3, [r7, #6]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d105      	bne.n	8002408 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023fc:	893b      	ldrh	r3, [r7, #8]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	e021      	b.n	800244c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002408:	893b      	ldrh	r3, [r7, #8]
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	b29b      	uxth	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f982 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800243c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e050      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800244c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800244e:	6a39      	ldr	r1, [r7, #32]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f967 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	2b04      	cmp	r3, #4
 8002462:	d107      	bne.n	8002474 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002472:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e035      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002486:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2200      	movs	r2, #0
 8002490:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f82b 	bl	80024f0 <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ae:	d103      	bne.n	80024b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e013      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024bc:	897b      	ldrh	r3, [r7, #10]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	6a3a      	ldr	r2, [r7, #32]
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <I2C_RequestMemoryRead+0x1cc>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f886 	bl	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	00010002 	.word	0x00010002

080024f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002500:	e048      	b.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d044      	beq.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800250a:	f7fe fdbf 	bl	800108c <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d302      	bcc.n	8002520 <I2C_WaitOnFlagUntilTimeout+0x30>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d139      	bne.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	0c1b      	lsrs	r3, r3, #16
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10d      	bne.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x56>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	43da      	mvns	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf0c      	ite	eq
 800253c:	2301      	moveq	r3, #1
 800253e:	2300      	movne	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	e00c      	b.n	8002560 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	43da      	mvns	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4013      	ands	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	429a      	cmp	r2, r3
 8002564:	d116      	bne.n	8002594 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e023      	b.n	80025dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	0c1b      	lsrs	r3, r3, #16
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d10d      	bne.n	80025ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	43da      	mvns	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	e00c      	b.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d093      	beq.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
 80025f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f2:	e071      	b.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002602:	d123      	bne.n	800264c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002612:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800261c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e067      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d041      	beq.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002654:	f7fe fd1a 	bl	800108c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	429a      	cmp	r2, r3
 8002662:	d302      	bcc.n	800266a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d136      	bne.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10c      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e00b      	b.n	80026a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	43da      	mvns	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4013      	ands	r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d016      	beq.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	f043 0220 	orr.w	r2, r3, #32
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e021      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10c      	bne.n	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e00b      	b.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	f47f af6d 	bne.w	80025f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002730:	e034      	b.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f8e3 	bl	80028fe <I2C_IsAcknowledgeFailed>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e034      	b.n	80027ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d028      	beq.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fc9f 	bl	800108c <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11d      	bne.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276a:	2b80      	cmp	r3, #128	@ 0x80
 800276c:	d016      	beq.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e007      	b.n	80027ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a6:	2b80      	cmp	r3, #128	@ 0x80
 80027a8:	d1c3      	bne.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c0:	e034      	b.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f89b 	bl	80028fe <I2C_IsAcknowledgeFailed>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e034      	b.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d028      	beq.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7fe fc57 	bl	800108c <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11d      	bne.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d016      	beq.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f043 0220 	orr.w	r2, r3, #32
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e007      	b.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d1c3      	bne.n	80027c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002850:	e049      	b.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b10      	cmp	r3, #16
 800285e:	d119      	bne.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0210 	mvn.w	r2, #16
 8002868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e030      	b.n	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7fe fbfa 	bl	800108c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b4:	2b40      	cmp	r3, #64	@ 0x40
 80028b6:	d016      	beq.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e007      	b.n	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f0:	2b40      	cmp	r3, #64	@ 0x40
 80028f2:	d1ae      	bne.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002914:	d11b      	bne.n	800294e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800291e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f043 0204 	orr.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fb1e 	bl	800108c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe fb1a 	bl	800108c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f855 	bl	8002b90 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fa7e 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08004da4 	.word	0x08004da4
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	@ (8002b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000000 	.word	0x20000000

08002b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b44:	f7ff fff0 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0a9b      	lsrs	r3, r3, #10
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	@ (8002b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	08004db4 	.word	0x08004db4

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b6c:	f7ff ffdc 	bl	8002b28 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0b5b      	lsrs	r3, r3, #13
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	@ (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08004db4 	.word	0x08004db4

08002b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b94:	b0ae      	sub	sp, #184	@ 0xb8
 8002b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb6:	4bcb      	ldr	r3, [pc, #812]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	f200 8206 	bhi.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x440>
 8002bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002fd1 	.word	0x08002fd1
 8002bd4:	08002fd1 	.word	0x08002fd1
 8002bd8:	08002fd1 	.word	0x08002fd1
 8002bdc:	08002c09 	.word	0x08002c09
 8002be0:	08002fd1 	.word	0x08002fd1
 8002be4:	08002fd1 	.word	0x08002fd1
 8002be8:	08002fd1 	.word	0x08002fd1
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002fd1 	.word	0x08002fd1
 8002bf4:	08002fd1 	.word	0x08002fd1
 8002bf8:	08002fd1 	.word	0x08002fd1
 8002bfc:	08002e01 	.word	0x08002e01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4bb9      	ldr	r3, [pc, #740]	@ (8002ee8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c06:	e1e7      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c08:	4bb8      	ldr	r3, [pc, #736]	@ (8002eec <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c0e:	e1e3      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c10:	4bb4      	ldr	r3, [pc, #720]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c1c:	4bb1      	ldr	r3, [pc, #708]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d071      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c28:	4bae      	ldr	r3, [pc, #696]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c34:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c4e:	4622      	mov	r2, r4
 8002c50:	462b      	mov	r3, r5
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	0159      	lsls	r1, r3, #5
 8002c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c60:	0150      	lsls	r0, r2, #5
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4621      	mov	r1, r4
 8002c68:	1a51      	subs	r1, r2, r1
 8002c6a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c80:	4649      	mov	r1, r9
 8002c82:	018b      	lsls	r3, r1, #6
 8002c84:	4641      	mov	r1, r8
 8002c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c8a:	4641      	mov	r1, r8
 8002c8c:	018a      	lsls	r2, r1, #6
 8002c8e:	4641      	mov	r1, r8
 8002c90:	1a51      	subs	r1, r2, r1
 8002c92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c94:	4649      	mov	r1, r9
 8002c96:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ca8:	4649      	mov	r1, r9
 8002caa:	00cb      	lsls	r3, r1, #3
 8002cac:	4641      	mov	r1, r8
 8002cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	00ca      	lsls	r2, r1, #3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	189b      	adds	r3, r3, r2
 8002cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	eb42 0303 	adc.w	r3, r2, r3
 8002cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cd8:	4629      	mov	r1, r5
 8002cda:	024b      	lsls	r3, r1, #9
 8002cdc:	4621      	mov	r1, r4
 8002cde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	024a      	lsls	r2, r1, #9
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cf8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002cfc:	f7fd fad8 	bl	80002b0 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d0a:	e067      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0c:	4b75      	ldr	r3, [pc, #468]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d18:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d26:	2300      	movs	r3, #0
 8002d28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d2a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d2e:	4622      	mov	r2, r4
 8002d30:	462b      	mov	r3, r5
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	0159      	lsls	r1, r3, #5
 8002d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d40:	0150      	lsls	r0, r2, #5
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4621      	mov	r1, r4
 8002d48:	1a51      	subs	r1, r2, r1
 8002d4a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d60:	4649      	mov	r1, r9
 8002d62:	018b      	lsls	r3, r1, #6
 8002d64:	4641      	mov	r1, r8
 8002d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	018a      	lsls	r2, r1, #6
 8002d6e:	4641      	mov	r1, r8
 8002d70:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d74:	4649      	mov	r1, r9
 8002d76:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d86:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d8e:	4692      	mov	sl, r2
 8002d90:	469b      	mov	fp, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb1a 0303 	adds.w	r3, sl, r3
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dc8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002dce:	f7fd fa6f 	bl	80002b0 <__aeabi_uldivmod>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ddc:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	3301      	adds	r3, #1
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002df2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dfe:	e0eb      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e00:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d06b      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e18:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	2200      	movs	r2, #0
 8002e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e34:	4622      	mov	r2, r4
 8002e36:	462b      	mov	r3, r5
 8002e38:	f04f 0000 	mov.w	r0, #0
 8002e3c:	f04f 0100 	mov.w	r1, #0
 8002e40:	0159      	lsls	r1, r3, #5
 8002e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e46:	0150      	lsls	r0, r2, #5
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	1a51      	subs	r1, r2, r1
 8002e50:	61b9      	str	r1, [r7, #24]
 8002e52:	4629      	mov	r1, r5
 8002e54:	eb63 0301 	sbc.w	r3, r3, r1
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e66:	4659      	mov	r1, fp
 8002e68:	018b      	lsls	r3, r1, #6
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e70:	4651      	mov	r1, sl
 8002e72:	018a      	lsls	r2, r1, #6
 8002e74:	4651      	mov	r1, sl
 8002e76:	ebb2 0801 	subs.w	r8, r2, r1
 8002e7a:	4659      	mov	r1, fp
 8002e7c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e94:	4690      	mov	r8, r2
 8002e96:	4699      	mov	r9, r3
 8002e98:	4623      	mov	r3, r4
 8002e9a:	eb18 0303 	adds.w	r3, r8, r3
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	eb49 0303 	adc.w	r3, r9, r3
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	024b      	lsls	r3, r1, #9
 8002eb8:	4621      	mov	r1, r4
 8002eba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	024a      	lsls	r2, r1, #9
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eca:	2200      	movs	r2, #0
 8002ecc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ece:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ed0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ed4:	f7fd f9ec 	bl	80002b0 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4613      	mov	r3, r2
 8002ede:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ee2:	e065      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x420>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	00f42400 	.word	0x00f42400
 8002eec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	099b      	lsrs	r3, r3, #6
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4611      	mov	r1, r2
 8002efc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f00:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f02:	2300      	movs	r3, #0
 8002f04:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f06:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f0a:	4642      	mov	r2, r8
 8002f0c:	464b      	mov	r3, r9
 8002f0e:	f04f 0000 	mov.w	r0, #0
 8002f12:	f04f 0100 	mov.w	r1, #0
 8002f16:	0159      	lsls	r1, r3, #5
 8002f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f1c:	0150      	lsls	r0, r2, #5
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4641      	mov	r1, r8
 8002f24:	1a51      	subs	r1, r2, r1
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	4649      	mov	r1, r9
 8002f2a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	018b      	lsls	r3, r1, #6
 8002f40:	4651      	mov	r1, sl
 8002f42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f46:	4651      	mov	r1, sl
 8002f48:	018a      	lsls	r2, r1, #6
 8002f4a:	4651      	mov	r1, sl
 8002f4c:	1a54      	subs	r4, r2, r1
 8002f4e:	4659      	mov	r1, fp
 8002f50:	eb63 0501 	sbc.w	r5, r3, r1
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	00eb      	lsls	r3, r5, #3
 8002f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f62:	00e2      	lsls	r2, r4, #3
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4643      	mov	r3, r8
 8002f6a:	18e3      	adds	r3, r4, r3
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	464b      	mov	r3, r9
 8002f70:	eb45 0303 	adc.w	r3, r5, r3
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f82:	4629      	mov	r1, r5
 8002f84:	028b      	lsls	r3, r1, #10
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	028a      	lsls	r2, r1, #10
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f98:	2200      	movs	r2, #0
 8002f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fa2:	f7fd f985 	bl	80002b0 <__aeabi_uldivmod>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4613      	mov	r3, r2
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	0f1b      	lsrs	r3, r3, #28
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002fbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fce:	e003      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	37b8      	adds	r7, #184	@ 0xb8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	00f42400 	.word	0x00f42400

08002ff0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e28d      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 8083 	beq.w	8003116 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003010:	4b94      	ldr	r3, [pc, #592]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 030c 	and.w	r3, r3, #12
 8003018:	2b04      	cmp	r3, #4
 800301a:	d019      	beq.n	8003050 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800301c:	4b91      	ldr	r3, [pc, #580]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
        || \
 8003024:	2b08      	cmp	r3, #8
 8003026:	d106      	bne.n	8003036 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003028:	4b8e      	ldr	r3, [pc, #568]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b8b      	ldr	r3, [pc, #556]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b88      	ldr	r3, [pc, #544]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b84      	ldr	r3, [pc, #528]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x124>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e25a      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x90>
 8003072:	4b7c      	ldr	r3, [pc, #496]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7b      	ldr	r2, [pc, #492]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xcc>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0xb4>
 800308a:	4b76      	ldr	r3, [pc, #472]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a75      	ldr	r2, [pc, #468]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b73      	ldr	r3, [pc, #460]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a72      	ldr	r2, [pc, #456]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xcc>
 80030a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a6b      	ldr	r2, [pc, #428]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fd ffe2 	bl	800108c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fd ffde 	bl	800108c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e21f      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b61      	ldr	r3, [pc, #388]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xdc>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fd ffce 	bl	800108c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7fd ffca 	bl	800108c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e20b      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b57      	ldr	r3, [pc, #348]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x104>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d06f      	beq.n	8003202 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003122:	4b50      	ldr	r3, [pc, #320]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d017      	beq.n	800315e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800312e:	4b4d      	ldr	r3, [pc, #308]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
        || \
 8003136:	2b08      	cmp	r3, #8
 8003138:	d105      	bne.n	8003146 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800313a:	4b4a      	ldr	r3, [pc, #296]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b47      	ldr	r3, [pc, #284]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003152:	4b44      	ldr	r3, [pc, #272]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b41      	ldr	r3, [pc, #260]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x186>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1d3      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4937      	ldr	r1, [pc, #220]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e03a      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b34      	ldr	r3, [pc, #208]	@ (8003268 <HAL_RCC_OscConfig+0x278>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fd ff77 	bl	800108c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fd ff73 	bl	800108c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1b4      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b28      	ldr	r3, [pc, #160]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4925      	ldr	r1, [pc, #148]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_RCC_OscConfig+0x278>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fd ff56 	bl	800108c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e4:	f7fd ff52 	bl	800108c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e193      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d036      	beq.n	800327c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b15      	ldr	r3, [pc, #84]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fd ff36 	bl	800108c <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7fd ff32 	bl	800108c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e173      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_OscConfig+0x274>)
 8003238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x234>
 8003242:	e01b      	b.n	800327c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4b09      	ldr	r3, [pc, #36]	@ (800326c <HAL_RCC_OscConfig+0x27c>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fd ff1f 	bl	800108c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	e00e      	b.n	8003270 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003252:	f7fd ff1b 	bl	800108c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d907      	bls.n	8003270 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e15c      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
 8003264:	40023800 	.word	0x40023800
 8003268:	42470000 	.word	0x42470000
 800326c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	4b8a      	ldr	r3, [pc, #552]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003272:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ea      	bne.n	8003252 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8097 	beq.w	80033b8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328e:	4b83      	ldr	r3, [pc, #524]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10f      	bne.n	80032ba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	4b7f      	ldr	r3, [pc, #508]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	4a7e      	ldr	r2, [pc, #504]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032aa:	4b7c      	ldr	r3, [pc, #496]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b79      	ldr	r3, [pc, #484]	@ (80034a0 <HAL_RCC_OscConfig+0x4b0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b76      	ldr	r3, [pc, #472]	@ (80034a0 <HAL_RCC_OscConfig+0x4b0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a75      	ldr	r2, [pc, #468]	@ (80034a0 <HAL_RCC_OscConfig+0x4b0>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7fd fedb 	bl	800108c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7fd fed7 	bl	800108c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e118      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b6c      	ldr	r3, [pc, #432]	@ (80034a0 <HAL_RCC_OscConfig+0x4b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x31e>
 8003300:	4b66      	ldr	r3, [pc, #408]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	4a65      	ldr	r2, [pc, #404]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	@ 0x70
 800330c:	e01c      	b.n	8003348 <HAL_RCC_OscConfig+0x358>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x340>
 8003316:	4b61      	ldr	r3, [pc, #388]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331a:	4a60      	ldr	r2, [pc, #384]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	6713      	str	r3, [r2, #112]	@ 0x70
 8003322:	4b5e      	ldr	r3, [pc, #376]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003326:	4a5d      	ldr	r2, [pc, #372]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6713      	str	r3, [r2, #112]	@ 0x70
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0x358>
 8003330:	4b5a      	ldr	r3, [pc, #360]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003334:	4a59      	ldr	r2, [pc, #356]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6713      	str	r3, [r2, #112]	@ 0x70
 800333c:	4b57      	ldr	r3, [pc, #348]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003340:	4a56      	ldr	r2, [pc, #344]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003342:	f023 0304 	bic.w	r3, r3, #4
 8003346:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d015      	beq.n	800337c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd fe9c 	bl	800108c <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fd fe98 	bl	800108c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0d7      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	4b4b      	ldr	r3, [pc, #300]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0ee      	beq.n	8003358 <HAL_RCC_OscConfig+0x368>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fd fe86 	bl	800108c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fd fe82 	bl	800108c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0c1      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339a:	4b40      	ldr	r3, [pc, #256]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ee      	bne.n	8003384 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b3b      	ldr	r3, [pc, #236]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	4a3a      	ldr	r2, [pc, #232]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80ad 	beq.w	800351c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c2:	4b36      	ldr	r3, [pc, #216]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d060      	beq.n	8003490 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d145      	bne.n	8003462 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	4b33      	ldr	r3, [pc, #204]	@ (80034a4 <HAL_RCC_OscConfig+0x4b4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd fe56 	bl	800108c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fd fe52 	bl	800108c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e093      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	4b29      	ldr	r3, [pc, #164]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	3b01      	subs	r3, #1
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	491b      	ldr	r1, [pc, #108]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <HAL_RCC_OscConfig+0x4b4>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fd fe27 	bl	800108c <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fd fe23 	bl	800108c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e064      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x452>
 8003460:	e05c      	b.n	800351c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <HAL_RCC_OscConfig+0x4b4>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fd fe10 	bl	800108c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fd fe0c 	bl	800108c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e04d      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b06      	ldr	r3, [pc, #24]	@ (800349c <HAL_RCC_OscConfig+0x4ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x480>
 800348e:	e045      	b.n	800351c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e040      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
 800349c:	40023800 	.word	0x40023800
 80034a0:	40007000 	.word	0x40007000
 80034a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003528 <HAL_RCC_OscConfig+0x538>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d030      	beq.n	8003518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d129      	bne.n	8003518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d122      	bne.n	8003518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034d8:	4013      	ands	r3, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d119      	bne.n	8003518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	3b01      	subs	r3, #1
 80034f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d10f      	bne.n	8003518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003504:	429a      	cmp	r2, r3
 8003506:	d107      	bne.n	8003518 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800

0800352c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e042      	b.n	80035c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fbb4 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	@ 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800356e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f82b 	bl	80035cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b0c0      	sub	sp, #256	@ 0x100
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	68d9      	ldr	r1, [r3, #12]
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	ea40 0301 	orr.w	r3, r0, r1
 80035f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	431a      	orrs	r2, r3
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003624:	f021 010c 	bic.w	r1, r1, #12
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003632:	430b      	orrs	r3, r1
 8003634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003646:	6999      	ldr	r1, [r3, #24]
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	ea40 0301 	orr.w	r3, r0, r1
 8003652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b8f      	ldr	r3, [pc, #572]	@ (8003898 <UART_SetConfig+0x2cc>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d005      	beq.n	800366c <UART_SetConfig+0xa0>
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4b8d      	ldr	r3, [pc, #564]	@ (800389c <UART_SetConfig+0x2d0>)
 8003668:	429a      	cmp	r2, r3
 800366a:	d104      	bne.n	8003676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800366c:	f7ff fa7c 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8003670:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003674:	e003      	b.n	800367e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003676:	f7ff fa63 	bl	8002b40 <HAL_RCC_GetPCLK1Freq>
 800367a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800367e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003688:	f040 810c 	bne.w	80038a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800368c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003690:	2200      	movs	r2, #0
 8003692:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003696:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800369a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800369e:	4622      	mov	r2, r4
 80036a0:	462b      	mov	r3, r5
 80036a2:	1891      	adds	r1, r2, r2
 80036a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80036a6:	415b      	adcs	r3, r3
 80036a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036ae:	4621      	mov	r1, r4
 80036b0:	eb12 0801 	adds.w	r8, r2, r1
 80036b4:	4629      	mov	r1, r5
 80036b6:	eb43 0901 	adc.w	r9, r3, r1
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ce:	4690      	mov	r8, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	eb18 0303 	adds.w	r3, r8, r3
 80036d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036dc:	462b      	mov	r3, r5
 80036de:	eb49 0303 	adc.w	r3, r9, r3
 80036e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80036f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036fa:	460b      	mov	r3, r1
 80036fc:	18db      	adds	r3, r3, r3
 80036fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003700:	4613      	mov	r3, r2
 8003702:	eb42 0303 	adc.w	r3, r2, r3
 8003706:	657b      	str	r3, [r7, #84]	@ 0x54
 8003708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800370c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003710:	f7fc fdce 	bl	80002b0 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4b61      	ldr	r3, [pc, #388]	@ (80038a0 <UART_SetConfig+0x2d4>)
 800371a:	fba3 2302 	umull	r2, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	011c      	lsls	r4, r3, #4
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800372c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800373c:	415b      	adcs	r3, r3
 800373e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003744:	4641      	mov	r1, r8
 8003746:	eb12 0a01 	adds.w	sl, r2, r1
 800374a:	4649      	mov	r1, r9
 800374c:	eb43 0b01 	adc.w	fp, r3, r1
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800375c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003764:	4692      	mov	sl, r2
 8003766:	469b      	mov	fp, r3
 8003768:	4643      	mov	r3, r8
 800376a:	eb1a 0303 	adds.w	r3, sl, r3
 800376e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003772:	464b      	mov	r3, r9
 8003774:	eb4b 0303 	adc.w	r3, fp, r3
 8003778:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003788:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800378c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003790:	460b      	mov	r3, r1
 8003792:	18db      	adds	r3, r3, r3
 8003794:	643b      	str	r3, [r7, #64]	@ 0x40
 8003796:	4613      	mov	r3, r2
 8003798:	eb42 0303 	adc.w	r3, r2, r3
 800379c:	647b      	str	r3, [r7, #68]	@ 0x44
 800379e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80037a6:	f7fc fd83 	bl	80002b0 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4611      	mov	r1, r2
 80037b0:	4b3b      	ldr	r3, [pc, #236]	@ (80038a0 <UART_SetConfig+0x2d4>)
 80037b2:	fba3 2301 	umull	r2, r3, r3, r1
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2264      	movs	r2, #100	@ 0x64
 80037ba:	fb02 f303 	mul.w	r3, r2, r3
 80037be:	1acb      	subs	r3, r1, r3
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80037c6:	4b36      	ldr	r3, [pc, #216]	@ (80038a0 <UART_SetConfig+0x2d4>)
 80037c8:	fba3 2302 	umull	r2, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037d4:	441c      	add	r4, r3
 80037d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037da:	2200      	movs	r2, #0
 80037dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	1891      	adds	r1, r2, r2
 80037ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037f0:	415b      	adcs	r3, r3
 80037f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037f8:	4641      	mov	r1, r8
 80037fa:	1851      	adds	r1, r2, r1
 80037fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80037fe:	4649      	mov	r1, r9
 8003800:	414b      	adcs	r3, r1
 8003802:	637b      	str	r3, [r7, #52]	@ 0x34
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003810:	4659      	mov	r1, fp
 8003812:	00cb      	lsls	r3, r1, #3
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800381a:	4651      	mov	r1, sl
 800381c:	00ca      	lsls	r2, r1, #3
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	4603      	mov	r3, r0
 8003824:	4642      	mov	r2, r8
 8003826:	189b      	adds	r3, r3, r2
 8003828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800382c:	464b      	mov	r3, r9
 800382e:	460a      	mov	r2, r1
 8003830:	eb42 0303 	adc.w	r3, r2, r3
 8003834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003844:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800384c:	460b      	mov	r3, r1
 800384e:	18db      	adds	r3, r3, r3
 8003850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003852:	4613      	mov	r3, r2
 8003854:	eb42 0303 	adc.w	r3, r2, r3
 8003858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800385e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003862:	f7fc fd25 	bl	80002b0 <__aeabi_uldivmod>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4b0d      	ldr	r3, [pc, #52]	@ (80038a0 <UART_SetConfig+0x2d4>)
 800386c:	fba3 1302 	umull	r1, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	2164      	movs	r1, #100	@ 0x64
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	3332      	adds	r3, #50	@ 0x32
 800387e:	4a08      	ldr	r2, [pc, #32]	@ (80038a0 <UART_SetConfig+0x2d4>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	095b      	lsrs	r3, r3, #5
 8003886:	f003 0207 	and.w	r2, r3, #7
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4422      	add	r2, r4
 8003892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003894:	e106      	b.n	8003aa4 <UART_SetConfig+0x4d8>
 8003896:	bf00      	nop
 8003898:	40011000 	.word	0x40011000
 800389c:	40011400 	.word	0x40011400
 80038a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a8:	2200      	movs	r2, #0
 80038aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80038ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80038b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80038b6:	4642      	mov	r2, r8
 80038b8:	464b      	mov	r3, r9
 80038ba:	1891      	adds	r1, r2, r2
 80038bc:	6239      	str	r1, [r7, #32]
 80038be:	415b      	adcs	r3, r3
 80038c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038c6:	4641      	mov	r1, r8
 80038c8:	1854      	adds	r4, r2, r1
 80038ca:	4649      	mov	r1, r9
 80038cc:	eb43 0501 	adc.w	r5, r3, r1
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	00eb      	lsls	r3, r5, #3
 80038da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038de:	00e2      	lsls	r2, r4, #3
 80038e0:	4614      	mov	r4, r2
 80038e2:	461d      	mov	r5, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	18e3      	adds	r3, r4, r3
 80038e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038ec:	464b      	mov	r3, r9
 80038ee:	eb45 0303 	adc.w	r3, r5, r3
 80038f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003902:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003912:	4629      	mov	r1, r5
 8003914:	008b      	lsls	r3, r1, #2
 8003916:	4621      	mov	r1, r4
 8003918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391c:	4621      	mov	r1, r4
 800391e:	008a      	lsls	r2, r1, #2
 8003920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003924:	f7fc fcc4 	bl	80002b0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b60      	ldr	r3, [pc, #384]	@ (8003ab0 <UART_SetConfig+0x4e4>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011c      	lsls	r4, r3, #4
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003940:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	61b9      	str	r1, [r7, #24]
 8003950:	415b      	adcs	r3, r3
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003958:	4641      	mov	r1, r8
 800395a:	1851      	adds	r1, r2, r1
 800395c:	6139      	str	r1, [r7, #16]
 800395e:	4649      	mov	r1, r9
 8003960:	414b      	adcs	r3, r1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003970:	4659      	mov	r1, fp
 8003972:	00cb      	lsls	r3, r1, #3
 8003974:	4651      	mov	r1, sl
 8003976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800397a:	4651      	mov	r1, sl
 800397c:	00ca      	lsls	r2, r1, #3
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	4603      	mov	r3, r0
 8003984:	4642      	mov	r2, r8
 8003986:	189b      	adds	r3, r3, r2
 8003988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800398c:	464b      	mov	r3, r9
 800398e:	460a      	mov	r2, r1
 8003990:	eb42 0303 	adc.w	r3, r2, r3
 8003994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80039b0:	4649      	mov	r1, r9
 80039b2:	008b      	lsls	r3, r1, #2
 80039b4:	4641      	mov	r1, r8
 80039b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ba:	4641      	mov	r1, r8
 80039bc:	008a      	lsls	r2, r1, #2
 80039be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80039c2:	f7fc fc75 	bl	80002b0 <__aeabi_uldivmod>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	4b38      	ldr	r3, [pc, #224]	@ (8003ab0 <UART_SetConfig+0x4e4>)
 80039ce:	fba3 2301 	umull	r2, r3, r3, r1
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2264      	movs	r2, #100	@ 0x64
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	1acb      	subs	r3, r1, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	@ 0x32
 80039e0:	4a33      	ldr	r2, [pc, #204]	@ (8003ab0 <UART_SetConfig+0x4e4>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ec:	441c      	add	r4, r3
 80039ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039f2:	2200      	movs	r2, #0
 80039f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80039f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80039f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	415b      	adcs	r3, r3
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6039      	str	r1, [r7, #0]
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a3e:	464b      	mov	r3, r9
 8003a40:	460a      	mov	r2, r1
 8003a42:	eb42 0303 	adc.w	r3, r2, r3
 8003a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a52:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a54:	f04f 0200 	mov.w	r2, #0
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a60:	4649      	mov	r1, r9
 8003a62:	008b      	lsls	r3, r1, #2
 8003a64:	4641      	mov	r1, r8
 8003a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	008a      	lsls	r2, r1, #2
 8003a6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a72:	f7fc fc1d 	bl	80002b0 <__aeabi_uldivmod>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <UART_SetConfig+0x4e4>)
 8003a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a80:	095b      	lsrs	r3, r3, #5
 8003a82:	2164      	movs	r1, #100	@ 0x64
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	3332      	adds	r3, #50	@ 0x32
 8003a8e:	4a08      	ldr	r2, [pc, #32]	@ (8003ab0 <UART_SetConfig+0x4e4>)
 8003a90:	fba2 2303 	umull	r2, r3, r2, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4422      	add	r2, r4
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ab0:	51eb851f 	.word	0x51eb851f

08003ab4 <std>:
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	b510      	push	{r4, lr}
 8003ab8:	4604      	mov	r4, r0
 8003aba:	e9c0 3300 	strd	r3, r3, [r0]
 8003abe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ac2:	6083      	str	r3, [r0, #8]
 8003ac4:	8181      	strh	r1, [r0, #12]
 8003ac6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ac8:	81c2      	strh	r2, [r0, #14]
 8003aca:	6183      	str	r3, [r0, #24]
 8003acc:	4619      	mov	r1, r3
 8003ace:	2208      	movs	r2, #8
 8003ad0:	305c      	adds	r0, #92	@ 0x5c
 8003ad2:	f000 f92e 	bl	8003d32 <memset>
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <std+0x58>)
 8003ad8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <std+0x5c>)
 8003adc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ade:	4b0d      	ldr	r3, [pc, #52]	@ (8003b14 <std+0x60>)
 8003ae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <std+0x64>)
 8003ae4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <std+0x68>)
 8003ae8:	6224      	str	r4, [r4, #32]
 8003aea:	429c      	cmp	r4, r3
 8003aec:	d006      	beq.n	8003afc <std+0x48>
 8003aee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003af2:	4294      	cmp	r4, r2
 8003af4:	d002      	beq.n	8003afc <std+0x48>
 8003af6:	33d0      	adds	r3, #208	@ 0xd0
 8003af8:	429c      	cmp	r4, r3
 8003afa:	d105      	bne.n	8003b08 <std+0x54>
 8003afc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b04:	f000 b98e 	b.w	8003e24 <__retarget_lock_init_recursive>
 8003b08:	bd10      	pop	{r4, pc}
 8003b0a:	bf00      	nop
 8003b0c:	08003cad 	.word	0x08003cad
 8003b10:	08003ccf 	.word	0x08003ccf
 8003b14:	08003d07 	.word	0x08003d07
 8003b18:	08003d2b 	.word	0x08003d2b
 8003b1c:	20000148 	.word	0x20000148

08003b20 <stdio_exit_handler>:
 8003b20:	4a02      	ldr	r2, [pc, #8]	@ (8003b2c <stdio_exit_handler+0xc>)
 8003b22:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <stdio_exit_handler+0x10>)
 8003b24:	4803      	ldr	r0, [pc, #12]	@ (8003b34 <stdio_exit_handler+0x14>)
 8003b26:	f000 b869 	b.w	8003bfc <_fwalk_sglue>
 8003b2a:	bf00      	nop
 8003b2c:	2000000c 	.word	0x2000000c
 8003b30:	08004975 	.word	0x08004975
 8003b34:	2000001c 	.word	0x2000001c

08003b38 <cleanup_stdio>:
 8003b38:	6841      	ldr	r1, [r0, #4]
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <cleanup_stdio+0x34>)
 8003b3c:	4299      	cmp	r1, r3
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	4604      	mov	r4, r0
 8003b42:	d001      	beq.n	8003b48 <cleanup_stdio+0x10>
 8003b44:	f000 ff16 	bl	8004974 <_fflush_r>
 8003b48:	68a1      	ldr	r1, [r4, #8]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <cleanup_stdio+0x38>)
 8003b4c:	4299      	cmp	r1, r3
 8003b4e:	d002      	beq.n	8003b56 <cleanup_stdio+0x1e>
 8003b50:	4620      	mov	r0, r4
 8003b52:	f000 ff0f 	bl	8004974 <_fflush_r>
 8003b56:	68e1      	ldr	r1, [r4, #12]
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <cleanup_stdio+0x3c>)
 8003b5a:	4299      	cmp	r1, r3
 8003b5c:	d004      	beq.n	8003b68 <cleanup_stdio+0x30>
 8003b5e:	4620      	mov	r0, r4
 8003b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b64:	f000 bf06 	b.w	8004974 <_fflush_r>
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000148 	.word	0x20000148
 8003b70:	200001b0 	.word	0x200001b0
 8003b74:	20000218 	.word	0x20000218

08003b78 <global_stdio_init.part.0>:
 8003b78:	b510      	push	{r4, lr}
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <global_stdio_init.part.0+0x30>)
 8003b7c:	4c0b      	ldr	r4, [pc, #44]	@ (8003bac <global_stdio_init.part.0+0x34>)
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <global_stdio_init.part.0+0x38>)
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	4620      	mov	r0, r4
 8003b84:	2200      	movs	r2, #0
 8003b86:	2104      	movs	r1, #4
 8003b88:	f7ff ff94 	bl	8003ab4 <std>
 8003b8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b90:	2201      	movs	r2, #1
 8003b92:	2109      	movs	r1, #9
 8003b94:	f7ff ff8e 	bl	8003ab4 <std>
 8003b98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ba2:	2112      	movs	r1, #18
 8003ba4:	f7ff bf86 	b.w	8003ab4 <std>
 8003ba8:	20000280 	.word	0x20000280
 8003bac:	20000148 	.word	0x20000148
 8003bb0:	08003b21 	.word	0x08003b21

08003bb4 <__sfp_lock_acquire>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	@ (8003bbc <__sfp_lock_acquire+0x8>)
 8003bb6:	f000 b936 	b.w	8003e26 <__retarget_lock_acquire_recursive>
 8003bba:	bf00      	nop
 8003bbc:	20000289 	.word	0x20000289

08003bc0 <__sfp_lock_release>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	@ (8003bc8 <__sfp_lock_release+0x8>)
 8003bc2:	f000 b931 	b.w	8003e28 <__retarget_lock_release_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20000289 	.word	0x20000289

08003bcc <__sinit>:
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	4604      	mov	r4, r0
 8003bd0:	f7ff fff0 	bl	8003bb4 <__sfp_lock_acquire>
 8003bd4:	6a23      	ldr	r3, [r4, #32]
 8003bd6:	b11b      	cbz	r3, 8003be0 <__sinit+0x14>
 8003bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bdc:	f7ff bff0 	b.w	8003bc0 <__sfp_lock_release>
 8003be0:	4b04      	ldr	r3, [pc, #16]	@ (8003bf4 <__sinit+0x28>)
 8003be2:	6223      	str	r3, [r4, #32]
 8003be4:	4b04      	ldr	r3, [pc, #16]	@ (8003bf8 <__sinit+0x2c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f5      	bne.n	8003bd8 <__sinit+0xc>
 8003bec:	f7ff ffc4 	bl	8003b78 <global_stdio_init.part.0>
 8003bf0:	e7f2      	b.n	8003bd8 <__sinit+0xc>
 8003bf2:	bf00      	nop
 8003bf4:	08003b39 	.word	0x08003b39
 8003bf8:	20000280 	.word	0x20000280

08003bfc <_fwalk_sglue>:
 8003bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c00:	4607      	mov	r7, r0
 8003c02:	4688      	mov	r8, r1
 8003c04:	4614      	mov	r4, r2
 8003c06:	2600      	movs	r6, #0
 8003c08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c0c:	f1b9 0901 	subs.w	r9, r9, #1
 8003c10:	d505      	bpl.n	8003c1e <_fwalk_sglue+0x22>
 8003c12:	6824      	ldr	r4, [r4, #0]
 8003c14:	2c00      	cmp	r4, #0
 8003c16:	d1f7      	bne.n	8003c08 <_fwalk_sglue+0xc>
 8003c18:	4630      	mov	r0, r6
 8003c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d907      	bls.n	8003c34 <_fwalk_sglue+0x38>
 8003c24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	d003      	beq.n	8003c34 <_fwalk_sglue+0x38>
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	4638      	mov	r0, r7
 8003c30:	47c0      	blx	r8
 8003c32:	4306      	orrs	r6, r0
 8003c34:	3568      	adds	r5, #104	@ 0x68
 8003c36:	e7e9      	b.n	8003c0c <_fwalk_sglue+0x10>

08003c38 <iprintf>:
 8003c38:	b40f      	push	{r0, r1, r2, r3}
 8003c3a:	b507      	push	{r0, r1, r2, lr}
 8003c3c:	4906      	ldr	r1, [pc, #24]	@ (8003c58 <iprintf+0x20>)
 8003c3e:	ab04      	add	r3, sp, #16
 8003c40:	6808      	ldr	r0, [r1, #0]
 8003c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c46:	6881      	ldr	r1, [r0, #8]
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	f000 fb69 	bl	8004320 <_vfiprintf_r>
 8003c4e:	b003      	add	sp, #12
 8003c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c54:	b004      	add	sp, #16
 8003c56:	4770      	bx	lr
 8003c58:	20000018 	.word	0x20000018

08003c5c <putchar>:
 8003c5c:	4b02      	ldr	r3, [pc, #8]	@ (8003c68 <putchar+0xc>)
 8003c5e:	4601      	mov	r1, r0
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	6882      	ldr	r2, [r0, #8]
 8003c64:	f000 beae 	b.w	80049c4 <_putc_r>
 8003c68:	20000018 	.word	0x20000018

08003c6c <siprintf>:
 8003c6c:	b40e      	push	{r1, r2, r3}
 8003c6e:	b500      	push	{lr}
 8003c70:	b09c      	sub	sp, #112	@ 0x70
 8003c72:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c74:	9002      	str	r0, [sp, #8]
 8003c76:	9006      	str	r0, [sp, #24]
 8003c78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c7c:	4809      	ldr	r0, [pc, #36]	@ (8003ca4 <siprintf+0x38>)
 8003c7e:	9107      	str	r1, [sp, #28]
 8003c80:	9104      	str	r1, [sp, #16]
 8003c82:	4909      	ldr	r1, [pc, #36]	@ (8003ca8 <siprintf+0x3c>)
 8003c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c88:	9105      	str	r1, [sp, #20]
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	a902      	add	r1, sp, #8
 8003c90:	f000 fa20 	bl	80040d4 <_svfiprintf_r>
 8003c94:	9b02      	ldr	r3, [sp, #8]
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	b01c      	add	sp, #112	@ 0x70
 8003c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ca0:	b003      	add	sp, #12
 8003ca2:	4770      	bx	lr
 8003ca4:	20000018 	.word	0x20000018
 8003ca8:	ffff0208 	.word	0xffff0208

08003cac <__sread>:
 8003cac:	b510      	push	{r4, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	f000 f868 	bl	8003d88 <_read_r>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	bfab      	itete	ge
 8003cbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc0:	181b      	addge	r3, r3, r0
 8003cc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003cc6:	bfac      	ite	ge
 8003cc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cca:	81a3      	strhlt	r3, [r4, #12]
 8003ccc:	bd10      	pop	{r4, pc}

08003cce <__swrite>:
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	461f      	mov	r7, r3
 8003cd4:	898b      	ldrh	r3, [r1, #12]
 8003cd6:	05db      	lsls	r3, r3, #23
 8003cd8:	4605      	mov	r5, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	4616      	mov	r6, r2
 8003cde:	d505      	bpl.n	8003cec <__swrite+0x1e>
 8003ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f000 f83c 	bl	8003d64 <_lseek_r>
 8003cec:	89a3      	ldrh	r3, [r4, #12]
 8003cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cf6:	81a3      	strh	r3, [r4, #12]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d02:	f000 b853 	b.w	8003dac <_write_r>

08003d06 <__sseek>:
 8003d06:	b510      	push	{r4, lr}
 8003d08:	460c      	mov	r4, r1
 8003d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0e:	f000 f829 	bl	8003d64 <_lseek_r>
 8003d12:	1c43      	adds	r3, r0, #1
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	bf15      	itete	ne
 8003d18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003d1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d22:	81a3      	strheq	r3, [r4, #12]
 8003d24:	bf18      	it	ne
 8003d26:	81a3      	strhne	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__sclose>:
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 b809 	b.w	8003d44 <_close_r>

08003d32 <memset>:
 8003d32:	4402      	add	r2, r0
 8003d34:	4603      	mov	r3, r0
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d100      	bne.n	8003d3c <memset+0xa>
 8003d3a:	4770      	bx	lr
 8003d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d40:	e7f9      	b.n	8003d36 <memset+0x4>
	...

08003d44 <_close_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d06      	ldr	r5, [pc, #24]	@ (8003d60 <_close_r+0x1c>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	f7fd f88f 	bl	8000e72 <_close>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_close_r+0x1a>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_close_r+0x1a>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20000284 	.word	0x20000284

08003d64 <_lseek_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4d07      	ldr	r5, [pc, #28]	@ (8003d84 <_lseek_r+0x20>)
 8003d68:	4604      	mov	r4, r0
 8003d6a:	4608      	mov	r0, r1
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	2200      	movs	r2, #0
 8003d70:	602a      	str	r2, [r5, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f7fd f8a4 	bl	8000ec0 <_lseek>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_lseek_r+0x1e>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_lseek_r+0x1e>
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	20000284 	.word	0x20000284

08003d88 <_read_r>:
 8003d88:	b538      	push	{r3, r4, r5, lr}
 8003d8a:	4d07      	ldr	r5, [pc, #28]	@ (8003da8 <_read_r+0x20>)
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	4608      	mov	r0, r1
 8003d90:	4611      	mov	r1, r2
 8003d92:	2200      	movs	r2, #0
 8003d94:	602a      	str	r2, [r5, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f7fd f832 	bl	8000e00 <_read>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_read_r+0x1e>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_read_r+0x1e>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000284 	.word	0x20000284

08003dac <_write_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4d07      	ldr	r5, [pc, #28]	@ (8003dcc <_write_r+0x20>)
 8003db0:	4604      	mov	r4, r0
 8003db2:	4608      	mov	r0, r1
 8003db4:	4611      	mov	r1, r2
 8003db6:	2200      	movs	r2, #0
 8003db8:	602a      	str	r2, [r5, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7fd f83d 	bl	8000e3a <_write>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_write_r+0x1e>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_write_r+0x1e>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	20000284 	.word	0x20000284

08003dd0 <__errno>:
 8003dd0:	4b01      	ldr	r3, [pc, #4]	@ (8003dd8 <__errno+0x8>)
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	20000018 	.word	0x20000018

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4d0d      	ldr	r5, [pc, #52]	@ (8003e14 <__libc_init_array+0x38>)
 8003de0:	4c0d      	ldr	r4, [pc, #52]	@ (8003e18 <__libc_init_array+0x3c>)
 8003de2:	1b64      	subs	r4, r4, r5
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	2600      	movs	r6, #0
 8003de8:	42a6      	cmp	r6, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	4d0b      	ldr	r5, [pc, #44]	@ (8003e1c <__libc_init_array+0x40>)
 8003dee:	4c0c      	ldr	r4, [pc, #48]	@ (8003e20 <__libc_init_array+0x44>)
 8003df0:	f000 ffa2 	bl	8004d38 <_init>
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	2600      	movs	r6, #0
 8003dfa:	42a6      	cmp	r6, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e04:	4798      	blx	r3
 8003e06:	3601      	adds	r6, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0e:	4798      	blx	r3
 8003e10:	3601      	adds	r6, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	08004df8 	.word	0x08004df8
 8003e18:	08004df8 	.word	0x08004df8
 8003e1c:	08004df8 	.word	0x08004df8
 8003e20:	08004dfc 	.word	0x08004dfc

08003e24 <__retarget_lock_init_recursive>:
 8003e24:	4770      	bx	lr

08003e26 <__retarget_lock_acquire_recursive>:
 8003e26:	4770      	bx	lr

08003e28 <__retarget_lock_release_recursive>:
 8003e28:	4770      	bx	lr
	...

08003e2c <_free_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	4605      	mov	r5, r0
 8003e30:	2900      	cmp	r1, #0
 8003e32:	d041      	beq.n	8003eb8 <_free_r+0x8c>
 8003e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e38:	1f0c      	subs	r4, r1, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bfb8      	it	lt
 8003e3e:	18e4      	addlt	r4, r4, r3
 8003e40:	f000 f8e0 	bl	8004004 <__malloc_lock>
 8003e44:	4a1d      	ldr	r2, [pc, #116]	@ (8003ebc <_free_r+0x90>)
 8003e46:	6813      	ldr	r3, [r2, #0]
 8003e48:	b933      	cbnz	r3, 8003e58 <_free_r+0x2c>
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	6014      	str	r4, [r2, #0]
 8003e4e:	4628      	mov	r0, r5
 8003e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e54:	f000 b8dc 	b.w	8004010 <__malloc_unlock>
 8003e58:	42a3      	cmp	r3, r4
 8003e5a:	d908      	bls.n	8003e6e <_free_r+0x42>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	1821      	adds	r1, r4, r0
 8003e60:	428b      	cmp	r3, r1
 8003e62:	bf01      	itttt	eq
 8003e64:	6819      	ldreq	r1, [r3, #0]
 8003e66:	685b      	ldreq	r3, [r3, #4]
 8003e68:	1809      	addeq	r1, r1, r0
 8003e6a:	6021      	streq	r1, [r4, #0]
 8003e6c:	e7ed      	b.n	8003e4a <_free_r+0x1e>
 8003e6e:	461a      	mov	r2, r3
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b10b      	cbz	r3, 8003e78 <_free_r+0x4c>
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	d9fa      	bls.n	8003e6e <_free_r+0x42>
 8003e78:	6811      	ldr	r1, [r2, #0]
 8003e7a:	1850      	adds	r0, r2, r1
 8003e7c:	42a0      	cmp	r0, r4
 8003e7e:	d10b      	bne.n	8003e98 <_free_r+0x6c>
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	4401      	add	r1, r0
 8003e84:	1850      	adds	r0, r2, r1
 8003e86:	4283      	cmp	r3, r0
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	d1e0      	bne.n	8003e4e <_free_r+0x22>
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	6053      	str	r3, [r2, #4]
 8003e92:	4408      	add	r0, r1
 8003e94:	6010      	str	r0, [r2, #0]
 8003e96:	e7da      	b.n	8003e4e <_free_r+0x22>
 8003e98:	d902      	bls.n	8003ea0 <_free_r+0x74>
 8003e9a:	230c      	movs	r3, #12
 8003e9c:	602b      	str	r3, [r5, #0]
 8003e9e:	e7d6      	b.n	8003e4e <_free_r+0x22>
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	1821      	adds	r1, r4, r0
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	bf04      	itt	eq
 8003ea8:	6819      	ldreq	r1, [r3, #0]
 8003eaa:	685b      	ldreq	r3, [r3, #4]
 8003eac:	6063      	str	r3, [r4, #4]
 8003eae:	bf04      	itt	eq
 8003eb0:	1809      	addeq	r1, r1, r0
 8003eb2:	6021      	streq	r1, [r4, #0]
 8003eb4:	6054      	str	r4, [r2, #4]
 8003eb6:	e7ca      	b.n	8003e4e <_free_r+0x22>
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000290 	.word	0x20000290

08003ec0 <sbrk_aligned>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4e0f      	ldr	r6, [pc, #60]	@ (8003f00 <sbrk_aligned+0x40>)
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	6831      	ldr	r1, [r6, #0]
 8003ec8:	4605      	mov	r5, r0
 8003eca:	b911      	cbnz	r1, 8003ed2 <sbrk_aligned+0x12>
 8003ecc:	f000 fe5c 	bl	8004b88 <_sbrk_r>
 8003ed0:	6030      	str	r0, [r6, #0]
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	f000 fe57 	bl	8004b88 <_sbrk_r>
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	d103      	bne.n	8003ee6 <sbrk_aligned+0x26>
 8003ede:	f04f 34ff 	mov.w	r4, #4294967295
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
 8003ee6:	1cc4      	adds	r4, r0, #3
 8003ee8:	f024 0403 	bic.w	r4, r4, #3
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d0f8      	beq.n	8003ee2 <sbrk_aligned+0x22>
 8003ef0:	1a21      	subs	r1, r4, r0
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fe48 	bl	8004b88 <_sbrk_r>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d1f2      	bne.n	8003ee2 <sbrk_aligned+0x22>
 8003efc:	e7ef      	b.n	8003ede <sbrk_aligned+0x1e>
 8003efe:	bf00      	nop
 8003f00:	2000028c 	.word	0x2000028c

08003f04 <_malloc_r>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	1ccd      	adds	r5, r1, #3
 8003f0a:	f025 0503 	bic.w	r5, r5, #3
 8003f0e:	3508      	adds	r5, #8
 8003f10:	2d0c      	cmp	r5, #12
 8003f12:	bf38      	it	cc
 8003f14:	250c      	movcc	r5, #12
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	4606      	mov	r6, r0
 8003f1a:	db01      	blt.n	8003f20 <_malloc_r+0x1c>
 8003f1c:	42a9      	cmp	r1, r5
 8003f1e:	d904      	bls.n	8003f2a <_malloc_r+0x26>
 8003f20:	230c      	movs	r3, #12
 8003f22:	6033      	str	r3, [r6, #0]
 8003f24:	2000      	movs	r0, #0
 8003f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004000 <_malloc_r+0xfc>
 8003f2e:	f000 f869 	bl	8004004 <__malloc_lock>
 8003f32:	f8d8 3000 	ldr.w	r3, [r8]
 8003f36:	461c      	mov	r4, r3
 8003f38:	bb44      	cbnz	r4, 8003f8c <_malloc_r+0x88>
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f7ff ffbf 	bl	8003ec0 <sbrk_aligned>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	4604      	mov	r4, r0
 8003f46:	d158      	bne.n	8003ffa <_malloc_r+0xf6>
 8003f48:	f8d8 4000 	ldr.w	r4, [r8]
 8003f4c:	4627      	mov	r7, r4
 8003f4e:	2f00      	cmp	r7, #0
 8003f50:	d143      	bne.n	8003fda <_malloc_r+0xd6>
 8003f52:	2c00      	cmp	r4, #0
 8003f54:	d04b      	beq.n	8003fee <_malloc_r+0xea>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	4639      	mov	r1, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	eb04 0903 	add.w	r9, r4, r3
 8003f60:	f000 fe12 	bl	8004b88 <_sbrk_r>
 8003f64:	4581      	cmp	r9, r0
 8003f66:	d142      	bne.n	8003fee <_malloc_r+0xea>
 8003f68:	6821      	ldr	r1, [r4, #0]
 8003f6a:	1a6d      	subs	r5, r5, r1
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f7ff ffa6 	bl	8003ec0 <sbrk_aligned>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d03a      	beq.n	8003fee <_malloc_r+0xea>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	442b      	add	r3, r5
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	bb62      	cbnz	r2, 8003fe0 <_malloc_r+0xdc>
 8003f86:	f8c8 7000 	str.w	r7, [r8]
 8003f8a:	e00f      	b.n	8003fac <_malloc_r+0xa8>
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	1b52      	subs	r2, r2, r5
 8003f90:	d420      	bmi.n	8003fd4 <_malloc_r+0xd0>
 8003f92:	2a0b      	cmp	r2, #11
 8003f94:	d917      	bls.n	8003fc6 <_malloc_r+0xc2>
 8003f96:	1961      	adds	r1, r4, r5
 8003f98:	42a3      	cmp	r3, r4
 8003f9a:	6025      	str	r5, [r4, #0]
 8003f9c:	bf18      	it	ne
 8003f9e:	6059      	strne	r1, [r3, #4]
 8003fa0:	6863      	ldr	r3, [r4, #4]
 8003fa2:	bf08      	it	eq
 8003fa4:	f8c8 1000 	streq.w	r1, [r8]
 8003fa8:	5162      	str	r2, [r4, r5]
 8003faa:	604b      	str	r3, [r1, #4]
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 f82f 	bl	8004010 <__malloc_unlock>
 8003fb2:	f104 000b 	add.w	r0, r4, #11
 8003fb6:	1d23      	adds	r3, r4, #4
 8003fb8:	f020 0007 	bic.w	r0, r0, #7
 8003fbc:	1ac2      	subs	r2, r0, r3
 8003fbe:	bf1c      	itt	ne
 8003fc0:	1a1b      	subne	r3, r3, r0
 8003fc2:	50a3      	strne	r3, [r4, r2]
 8003fc4:	e7af      	b.n	8003f26 <_malloc_r+0x22>
 8003fc6:	6862      	ldr	r2, [r4, #4]
 8003fc8:	42a3      	cmp	r3, r4
 8003fca:	bf0c      	ite	eq
 8003fcc:	f8c8 2000 	streq.w	r2, [r8]
 8003fd0:	605a      	strne	r2, [r3, #4]
 8003fd2:	e7eb      	b.n	8003fac <_malloc_r+0xa8>
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	6864      	ldr	r4, [r4, #4]
 8003fd8:	e7ae      	b.n	8003f38 <_malloc_r+0x34>
 8003fda:	463c      	mov	r4, r7
 8003fdc:	687f      	ldr	r7, [r7, #4]
 8003fde:	e7b6      	b.n	8003f4e <_malloc_r+0x4a>
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	42a3      	cmp	r3, r4
 8003fe6:	d1fb      	bne.n	8003fe0 <_malloc_r+0xdc>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6053      	str	r3, [r2, #4]
 8003fec:	e7de      	b.n	8003fac <_malloc_r+0xa8>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	6033      	str	r3, [r6, #0]
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 f80c 	bl	8004010 <__malloc_unlock>
 8003ff8:	e794      	b.n	8003f24 <_malloc_r+0x20>
 8003ffa:	6005      	str	r5, [r0, #0]
 8003ffc:	e7d6      	b.n	8003fac <_malloc_r+0xa8>
 8003ffe:	bf00      	nop
 8004000:	20000290 	.word	0x20000290

08004004 <__malloc_lock>:
 8004004:	4801      	ldr	r0, [pc, #4]	@ (800400c <__malloc_lock+0x8>)
 8004006:	f7ff bf0e 	b.w	8003e26 <__retarget_lock_acquire_recursive>
 800400a:	bf00      	nop
 800400c:	20000288 	.word	0x20000288

08004010 <__malloc_unlock>:
 8004010:	4801      	ldr	r0, [pc, #4]	@ (8004018 <__malloc_unlock+0x8>)
 8004012:	f7ff bf09 	b.w	8003e28 <__retarget_lock_release_recursive>
 8004016:	bf00      	nop
 8004018:	20000288 	.word	0x20000288

0800401c <__ssputs_r>:
 800401c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	688e      	ldr	r6, [r1, #8]
 8004022:	461f      	mov	r7, r3
 8004024:	42be      	cmp	r6, r7
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	4682      	mov	sl, r0
 800402a:	460c      	mov	r4, r1
 800402c:	4690      	mov	r8, r2
 800402e:	d82d      	bhi.n	800408c <__ssputs_r+0x70>
 8004030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004038:	d026      	beq.n	8004088 <__ssputs_r+0x6c>
 800403a:	6965      	ldr	r5, [r4, #20]
 800403c:	6909      	ldr	r1, [r1, #16]
 800403e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004042:	eba3 0901 	sub.w	r9, r3, r1
 8004046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800404a:	1c7b      	adds	r3, r7, #1
 800404c:	444b      	add	r3, r9
 800404e:	106d      	asrs	r5, r5, #1
 8004050:	429d      	cmp	r5, r3
 8004052:	bf38      	it	cc
 8004054:	461d      	movcc	r5, r3
 8004056:	0553      	lsls	r3, r2, #21
 8004058:	d527      	bpl.n	80040aa <__ssputs_r+0x8e>
 800405a:	4629      	mov	r1, r5
 800405c:	f7ff ff52 	bl	8003f04 <_malloc_r>
 8004060:	4606      	mov	r6, r0
 8004062:	b360      	cbz	r0, 80040be <__ssputs_r+0xa2>
 8004064:	6921      	ldr	r1, [r4, #16]
 8004066:	464a      	mov	r2, r9
 8004068:	f000 fd9e 	bl	8004ba8 <memcpy>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	6126      	str	r6, [r4, #16]
 800407a:	6165      	str	r5, [r4, #20]
 800407c:	444e      	add	r6, r9
 800407e:	eba5 0509 	sub.w	r5, r5, r9
 8004082:	6026      	str	r6, [r4, #0]
 8004084:	60a5      	str	r5, [r4, #8]
 8004086:	463e      	mov	r6, r7
 8004088:	42be      	cmp	r6, r7
 800408a:	d900      	bls.n	800408e <__ssputs_r+0x72>
 800408c:	463e      	mov	r6, r7
 800408e:	6820      	ldr	r0, [r4, #0]
 8004090:	4632      	mov	r2, r6
 8004092:	4641      	mov	r1, r8
 8004094:	f000 fd5e 	bl	8004b54 <memmove>
 8004098:	68a3      	ldr	r3, [r4, #8]
 800409a:	1b9b      	subs	r3, r3, r6
 800409c:	60a3      	str	r3, [r4, #8]
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	4433      	add	r3, r6
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	2000      	movs	r0, #0
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	462a      	mov	r2, r5
 80040ac:	f000 fd8a 	bl	8004bc4 <_realloc_r>
 80040b0:	4606      	mov	r6, r0
 80040b2:	2800      	cmp	r0, #0
 80040b4:	d1e0      	bne.n	8004078 <__ssputs_r+0x5c>
 80040b6:	6921      	ldr	r1, [r4, #16]
 80040b8:	4650      	mov	r0, sl
 80040ba:	f7ff feb7 	bl	8003e2c <_free_r>
 80040be:	230c      	movs	r3, #12
 80040c0:	f8ca 3000 	str.w	r3, [sl]
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	e7e9      	b.n	80040a6 <__ssputs_r+0x8a>
	...

080040d4 <_svfiprintf_r>:
 80040d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d8:	4698      	mov	r8, r3
 80040da:	898b      	ldrh	r3, [r1, #12]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	b09d      	sub	sp, #116	@ 0x74
 80040e0:	4607      	mov	r7, r0
 80040e2:	460d      	mov	r5, r1
 80040e4:	4614      	mov	r4, r2
 80040e6:	d510      	bpl.n	800410a <_svfiprintf_r+0x36>
 80040e8:	690b      	ldr	r3, [r1, #16]
 80040ea:	b973      	cbnz	r3, 800410a <_svfiprintf_r+0x36>
 80040ec:	2140      	movs	r1, #64	@ 0x40
 80040ee:	f7ff ff09 	bl	8003f04 <_malloc_r>
 80040f2:	6028      	str	r0, [r5, #0]
 80040f4:	6128      	str	r0, [r5, #16]
 80040f6:	b930      	cbnz	r0, 8004106 <_svfiprintf_r+0x32>
 80040f8:	230c      	movs	r3, #12
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	b01d      	add	sp, #116	@ 0x74
 8004102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004106:	2340      	movs	r3, #64	@ 0x40
 8004108:	616b      	str	r3, [r5, #20]
 800410a:	2300      	movs	r3, #0
 800410c:	9309      	str	r3, [sp, #36]	@ 0x24
 800410e:	2320      	movs	r3, #32
 8004110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004114:	f8cd 800c 	str.w	r8, [sp, #12]
 8004118:	2330      	movs	r3, #48	@ 0x30
 800411a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80042b8 <_svfiprintf_r+0x1e4>
 800411e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004122:	f04f 0901 	mov.w	r9, #1
 8004126:	4623      	mov	r3, r4
 8004128:	469a      	mov	sl, r3
 800412a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800412e:	b10a      	cbz	r2, 8004134 <_svfiprintf_r+0x60>
 8004130:	2a25      	cmp	r2, #37	@ 0x25
 8004132:	d1f9      	bne.n	8004128 <_svfiprintf_r+0x54>
 8004134:	ebba 0b04 	subs.w	fp, sl, r4
 8004138:	d00b      	beq.n	8004152 <_svfiprintf_r+0x7e>
 800413a:	465b      	mov	r3, fp
 800413c:	4622      	mov	r2, r4
 800413e:	4629      	mov	r1, r5
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff ff6b 	bl	800401c <__ssputs_r>
 8004146:	3001      	adds	r0, #1
 8004148:	f000 80a7 	beq.w	800429a <_svfiprintf_r+0x1c6>
 800414c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800414e:	445a      	add	r2, fp
 8004150:	9209      	str	r2, [sp, #36]	@ 0x24
 8004152:	f89a 3000 	ldrb.w	r3, [sl]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 809f 	beq.w	800429a <_svfiprintf_r+0x1c6>
 800415c:	2300      	movs	r3, #0
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004166:	f10a 0a01 	add.w	sl, sl, #1
 800416a:	9304      	str	r3, [sp, #16]
 800416c:	9307      	str	r3, [sp, #28]
 800416e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004172:	931a      	str	r3, [sp, #104]	@ 0x68
 8004174:	4654      	mov	r4, sl
 8004176:	2205      	movs	r2, #5
 8004178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417c:	484e      	ldr	r0, [pc, #312]	@ (80042b8 <_svfiprintf_r+0x1e4>)
 800417e:	f7fc f847 	bl	8000210 <memchr>
 8004182:	9a04      	ldr	r2, [sp, #16]
 8004184:	b9d8      	cbnz	r0, 80041be <_svfiprintf_r+0xea>
 8004186:	06d0      	lsls	r0, r2, #27
 8004188:	bf44      	itt	mi
 800418a:	2320      	movmi	r3, #32
 800418c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004190:	0711      	lsls	r1, r2, #28
 8004192:	bf44      	itt	mi
 8004194:	232b      	movmi	r3, #43	@ 0x2b
 8004196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800419a:	f89a 3000 	ldrb.w	r3, [sl]
 800419e:	2b2a      	cmp	r3, #42	@ 0x2a
 80041a0:	d015      	beq.n	80041ce <_svfiprintf_r+0xfa>
 80041a2:	9a07      	ldr	r2, [sp, #28]
 80041a4:	4654      	mov	r4, sl
 80041a6:	2000      	movs	r0, #0
 80041a8:	f04f 0c0a 	mov.w	ip, #10
 80041ac:	4621      	mov	r1, r4
 80041ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041b2:	3b30      	subs	r3, #48	@ 0x30
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d94b      	bls.n	8004250 <_svfiprintf_r+0x17c>
 80041b8:	b1b0      	cbz	r0, 80041e8 <_svfiprintf_r+0x114>
 80041ba:	9207      	str	r2, [sp, #28]
 80041bc:	e014      	b.n	80041e8 <_svfiprintf_r+0x114>
 80041be:	eba0 0308 	sub.w	r3, r0, r8
 80041c2:	fa09 f303 	lsl.w	r3, r9, r3
 80041c6:	4313      	orrs	r3, r2
 80041c8:	9304      	str	r3, [sp, #16]
 80041ca:	46a2      	mov	sl, r4
 80041cc:	e7d2      	b.n	8004174 <_svfiprintf_r+0xa0>
 80041ce:	9b03      	ldr	r3, [sp, #12]
 80041d0:	1d19      	adds	r1, r3, #4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	9103      	str	r1, [sp, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	bfbb      	ittet	lt
 80041da:	425b      	neglt	r3, r3
 80041dc:	f042 0202 	orrlt.w	r2, r2, #2
 80041e0:	9307      	strge	r3, [sp, #28]
 80041e2:	9307      	strlt	r3, [sp, #28]
 80041e4:	bfb8      	it	lt
 80041e6:	9204      	strlt	r2, [sp, #16]
 80041e8:	7823      	ldrb	r3, [r4, #0]
 80041ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80041ec:	d10a      	bne.n	8004204 <_svfiprintf_r+0x130>
 80041ee:	7863      	ldrb	r3, [r4, #1]
 80041f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f2:	d132      	bne.n	800425a <_svfiprintf_r+0x186>
 80041f4:	9b03      	ldr	r3, [sp, #12]
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	9203      	str	r2, [sp, #12]
 80041fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004200:	3402      	adds	r4, #2
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80042c8 <_svfiprintf_r+0x1f4>
 8004208:	7821      	ldrb	r1, [r4, #0]
 800420a:	2203      	movs	r2, #3
 800420c:	4650      	mov	r0, sl
 800420e:	f7fb ffff 	bl	8000210 <memchr>
 8004212:	b138      	cbz	r0, 8004224 <_svfiprintf_r+0x150>
 8004214:	9b04      	ldr	r3, [sp, #16]
 8004216:	eba0 000a 	sub.w	r0, r0, sl
 800421a:	2240      	movs	r2, #64	@ 0x40
 800421c:	4082      	lsls	r2, r0
 800421e:	4313      	orrs	r3, r2
 8004220:	3401      	adds	r4, #1
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004228:	4824      	ldr	r0, [pc, #144]	@ (80042bc <_svfiprintf_r+0x1e8>)
 800422a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800422e:	2206      	movs	r2, #6
 8004230:	f7fb ffee 	bl	8000210 <memchr>
 8004234:	2800      	cmp	r0, #0
 8004236:	d036      	beq.n	80042a6 <_svfiprintf_r+0x1d2>
 8004238:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <_svfiprintf_r+0x1ec>)
 800423a:	bb1b      	cbnz	r3, 8004284 <_svfiprintf_r+0x1b0>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	3307      	adds	r3, #7
 8004240:	f023 0307 	bic.w	r3, r3, #7
 8004244:	3308      	adds	r3, #8
 8004246:	9303      	str	r3, [sp, #12]
 8004248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800424a:	4433      	add	r3, r6
 800424c:	9309      	str	r3, [sp, #36]	@ 0x24
 800424e:	e76a      	b.n	8004126 <_svfiprintf_r+0x52>
 8004250:	fb0c 3202 	mla	r2, ip, r2, r3
 8004254:	460c      	mov	r4, r1
 8004256:	2001      	movs	r0, #1
 8004258:	e7a8      	b.n	80041ac <_svfiprintf_r+0xd8>
 800425a:	2300      	movs	r3, #0
 800425c:	3401      	adds	r4, #1
 800425e:	9305      	str	r3, [sp, #20]
 8004260:	4619      	mov	r1, r3
 8004262:	f04f 0c0a 	mov.w	ip, #10
 8004266:	4620      	mov	r0, r4
 8004268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800426c:	3a30      	subs	r2, #48	@ 0x30
 800426e:	2a09      	cmp	r2, #9
 8004270:	d903      	bls.n	800427a <_svfiprintf_r+0x1a6>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0c6      	beq.n	8004204 <_svfiprintf_r+0x130>
 8004276:	9105      	str	r1, [sp, #20]
 8004278:	e7c4      	b.n	8004204 <_svfiprintf_r+0x130>
 800427a:	fb0c 2101 	mla	r1, ip, r1, r2
 800427e:	4604      	mov	r4, r0
 8004280:	2301      	movs	r3, #1
 8004282:	e7f0      	b.n	8004266 <_svfiprintf_r+0x192>
 8004284:	ab03      	add	r3, sp, #12
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	462a      	mov	r2, r5
 800428a:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <_svfiprintf_r+0x1f0>)
 800428c:	a904      	add	r1, sp, #16
 800428e:	4638      	mov	r0, r7
 8004290:	f3af 8000 	nop.w
 8004294:	1c42      	adds	r2, r0, #1
 8004296:	4606      	mov	r6, r0
 8004298:	d1d6      	bne.n	8004248 <_svfiprintf_r+0x174>
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	065b      	lsls	r3, r3, #25
 800429e:	f53f af2d 	bmi.w	80040fc <_svfiprintf_r+0x28>
 80042a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042a4:	e72c      	b.n	8004100 <_svfiprintf_r+0x2c>
 80042a6:	ab03      	add	r3, sp, #12
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	462a      	mov	r2, r5
 80042ac:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <_svfiprintf_r+0x1f0>)
 80042ae:	a904      	add	r1, sp, #16
 80042b0:	4638      	mov	r0, r7
 80042b2:	f000 f9bb 	bl	800462c <_printf_i>
 80042b6:	e7ed      	b.n	8004294 <_svfiprintf_r+0x1c0>
 80042b8:	08004dbc 	.word	0x08004dbc
 80042bc:	08004dc6 	.word	0x08004dc6
 80042c0:	00000000 	.word	0x00000000
 80042c4:	0800401d 	.word	0x0800401d
 80042c8:	08004dc2 	.word	0x08004dc2

080042cc <__sfputc_r>:
 80042cc:	6893      	ldr	r3, [r2, #8]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	b410      	push	{r4}
 80042d4:	6093      	str	r3, [r2, #8]
 80042d6:	da08      	bge.n	80042ea <__sfputc_r+0x1e>
 80042d8:	6994      	ldr	r4, [r2, #24]
 80042da:	42a3      	cmp	r3, r4
 80042dc:	db01      	blt.n	80042e2 <__sfputc_r+0x16>
 80042de:	290a      	cmp	r1, #10
 80042e0:	d103      	bne.n	80042ea <__sfputc_r+0x1e>
 80042e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e6:	f000 bba1 	b.w	8004a2c <__swbuf_r>
 80042ea:	6813      	ldr	r3, [r2, #0]
 80042ec:	1c58      	adds	r0, r3, #1
 80042ee:	6010      	str	r0, [r2, #0]
 80042f0:	7019      	strb	r1, [r3, #0]
 80042f2:	4608      	mov	r0, r1
 80042f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <__sfputs_r>:
 80042fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fc:	4606      	mov	r6, r0
 80042fe:	460f      	mov	r7, r1
 8004300:	4614      	mov	r4, r2
 8004302:	18d5      	adds	r5, r2, r3
 8004304:	42ac      	cmp	r4, r5
 8004306:	d101      	bne.n	800430c <__sfputs_r+0x12>
 8004308:	2000      	movs	r0, #0
 800430a:	e007      	b.n	800431c <__sfputs_r+0x22>
 800430c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004310:	463a      	mov	r2, r7
 8004312:	4630      	mov	r0, r6
 8004314:	f7ff ffda 	bl	80042cc <__sfputc_r>
 8004318:	1c43      	adds	r3, r0, #1
 800431a:	d1f3      	bne.n	8004304 <__sfputs_r+0xa>
 800431c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004320 <_vfiprintf_r>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	460d      	mov	r5, r1
 8004326:	b09d      	sub	sp, #116	@ 0x74
 8004328:	4614      	mov	r4, r2
 800432a:	4698      	mov	r8, r3
 800432c:	4606      	mov	r6, r0
 800432e:	b118      	cbz	r0, 8004338 <_vfiprintf_r+0x18>
 8004330:	6a03      	ldr	r3, [r0, #32]
 8004332:	b90b      	cbnz	r3, 8004338 <_vfiprintf_r+0x18>
 8004334:	f7ff fc4a 	bl	8003bcc <__sinit>
 8004338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800433a:	07d9      	lsls	r1, r3, #31
 800433c:	d405      	bmi.n	800434a <_vfiprintf_r+0x2a>
 800433e:	89ab      	ldrh	r3, [r5, #12]
 8004340:	059a      	lsls	r2, r3, #22
 8004342:	d402      	bmi.n	800434a <_vfiprintf_r+0x2a>
 8004344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004346:	f7ff fd6e 	bl	8003e26 <__retarget_lock_acquire_recursive>
 800434a:	89ab      	ldrh	r3, [r5, #12]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	d501      	bpl.n	8004354 <_vfiprintf_r+0x34>
 8004350:	692b      	ldr	r3, [r5, #16]
 8004352:	b99b      	cbnz	r3, 800437c <_vfiprintf_r+0x5c>
 8004354:	4629      	mov	r1, r5
 8004356:	4630      	mov	r0, r6
 8004358:	f000 fba6 	bl	8004aa8 <__swsetup_r>
 800435c:	b170      	cbz	r0, 800437c <_vfiprintf_r+0x5c>
 800435e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004360:	07dc      	lsls	r4, r3, #31
 8004362:	d504      	bpl.n	800436e <_vfiprintf_r+0x4e>
 8004364:	f04f 30ff 	mov.w	r0, #4294967295
 8004368:	b01d      	add	sp, #116	@ 0x74
 800436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436e:	89ab      	ldrh	r3, [r5, #12]
 8004370:	0598      	lsls	r0, r3, #22
 8004372:	d4f7      	bmi.n	8004364 <_vfiprintf_r+0x44>
 8004374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004376:	f7ff fd57 	bl	8003e28 <__retarget_lock_release_recursive>
 800437a:	e7f3      	b.n	8004364 <_vfiprintf_r+0x44>
 800437c:	2300      	movs	r3, #0
 800437e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004380:	2320      	movs	r3, #32
 8004382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004386:	f8cd 800c 	str.w	r8, [sp, #12]
 800438a:	2330      	movs	r3, #48	@ 0x30
 800438c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800453c <_vfiprintf_r+0x21c>
 8004390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004394:	f04f 0901 	mov.w	r9, #1
 8004398:	4623      	mov	r3, r4
 800439a:	469a      	mov	sl, r3
 800439c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a0:	b10a      	cbz	r2, 80043a6 <_vfiprintf_r+0x86>
 80043a2:	2a25      	cmp	r2, #37	@ 0x25
 80043a4:	d1f9      	bne.n	800439a <_vfiprintf_r+0x7a>
 80043a6:	ebba 0b04 	subs.w	fp, sl, r4
 80043aa:	d00b      	beq.n	80043c4 <_vfiprintf_r+0xa4>
 80043ac:	465b      	mov	r3, fp
 80043ae:	4622      	mov	r2, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7ff ffa1 	bl	80042fa <__sfputs_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	f000 80a7 	beq.w	800450c <_vfiprintf_r+0x1ec>
 80043be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043c0:	445a      	add	r2, fp
 80043c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80043c4:	f89a 3000 	ldrb.w	r3, [sl]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 809f 	beq.w	800450c <_vfiprintf_r+0x1ec>
 80043ce:	2300      	movs	r3, #0
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d8:	f10a 0a01 	add.w	sl, sl, #1
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	9307      	str	r3, [sp, #28]
 80043e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80043e6:	4654      	mov	r4, sl
 80043e8:	2205      	movs	r2, #5
 80043ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ee:	4853      	ldr	r0, [pc, #332]	@ (800453c <_vfiprintf_r+0x21c>)
 80043f0:	f7fb ff0e 	bl	8000210 <memchr>
 80043f4:	9a04      	ldr	r2, [sp, #16]
 80043f6:	b9d8      	cbnz	r0, 8004430 <_vfiprintf_r+0x110>
 80043f8:	06d1      	lsls	r1, r2, #27
 80043fa:	bf44      	itt	mi
 80043fc:	2320      	movmi	r3, #32
 80043fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004402:	0713      	lsls	r3, r2, #28
 8004404:	bf44      	itt	mi
 8004406:	232b      	movmi	r3, #43	@ 0x2b
 8004408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800440c:	f89a 3000 	ldrb.w	r3, [sl]
 8004410:	2b2a      	cmp	r3, #42	@ 0x2a
 8004412:	d015      	beq.n	8004440 <_vfiprintf_r+0x120>
 8004414:	9a07      	ldr	r2, [sp, #28]
 8004416:	4654      	mov	r4, sl
 8004418:	2000      	movs	r0, #0
 800441a:	f04f 0c0a 	mov.w	ip, #10
 800441e:	4621      	mov	r1, r4
 8004420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004424:	3b30      	subs	r3, #48	@ 0x30
 8004426:	2b09      	cmp	r3, #9
 8004428:	d94b      	bls.n	80044c2 <_vfiprintf_r+0x1a2>
 800442a:	b1b0      	cbz	r0, 800445a <_vfiprintf_r+0x13a>
 800442c:	9207      	str	r2, [sp, #28]
 800442e:	e014      	b.n	800445a <_vfiprintf_r+0x13a>
 8004430:	eba0 0308 	sub.w	r3, r0, r8
 8004434:	fa09 f303 	lsl.w	r3, r9, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	46a2      	mov	sl, r4
 800443e:	e7d2      	b.n	80043e6 <_vfiprintf_r+0xc6>
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	1d19      	adds	r1, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	9103      	str	r1, [sp, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	bfbb      	ittet	lt
 800444c:	425b      	neglt	r3, r3
 800444e:	f042 0202 	orrlt.w	r2, r2, #2
 8004452:	9307      	strge	r3, [sp, #28]
 8004454:	9307      	strlt	r3, [sp, #28]
 8004456:	bfb8      	it	lt
 8004458:	9204      	strlt	r2, [sp, #16]
 800445a:	7823      	ldrb	r3, [r4, #0]
 800445c:	2b2e      	cmp	r3, #46	@ 0x2e
 800445e:	d10a      	bne.n	8004476 <_vfiprintf_r+0x156>
 8004460:	7863      	ldrb	r3, [r4, #1]
 8004462:	2b2a      	cmp	r3, #42	@ 0x2a
 8004464:	d132      	bne.n	80044cc <_vfiprintf_r+0x1ac>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	1d1a      	adds	r2, r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	9203      	str	r2, [sp, #12]
 800446e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004472:	3402      	adds	r4, #2
 8004474:	9305      	str	r3, [sp, #20]
 8004476:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800454c <_vfiprintf_r+0x22c>
 800447a:	7821      	ldrb	r1, [r4, #0]
 800447c:	2203      	movs	r2, #3
 800447e:	4650      	mov	r0, sl
 8004480:	f7fb fec6 	bl	8000210 <memchr>
 8004484:	b138      	cbz	r0, 8004496 <_vfiprintf_r+0x176>
 8004486:	9b04      	ldr	r3, [sp, #16]
 8004488:	eba0 000a 	sub.w	r0, r0, sl
 800448c:	2240      	movs	r2, #64	@ 0x40
 800448e:	4082      	lsls	r2, r0
 8004490:	4313      	orrs	r3, r2
 8004492:	3401      	adds	r4, #1
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800449a:	4829      	ldr	r0, [pc, #164]	@ (8004540 <_vfiprintf_r+0x220>)
 800449c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044a0:	2206      	movs	r2, #6
 80044a2:	f7fb feb5 	bl	8000210 <memchr>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d03f      	beq.n	800452a <_vfiprintf_r+0x20a>
 80044aa:	4b26      	ldr	r3, [pc, #152]	@ (8004544 <_vfiprintf_r+0x224>)
 80044ac:	bb1b      	cbnz	r3, 80044f6 <_vfiprintf_r+0x1d6>
 80044ae:	9b03      	ldr	r3, [sp, #12]
 80044b0:	3307      	adds	r3, #7
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	3308      	adds	r3, #8
 80044b8:	9303      	str	r3, [sp, #12]
 80044ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044bc:	443b      	add	r3, r7
 80044be:	9309      	str	r3, [sp, #36]	@ 0x24
 80044c0:	e76a      	b.n	8004398 <_vfiprintf_r+0x78>
 80044c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c6:	460c      	mov	r4, r1
 80044c8:	2001      	movs	r0, #1
 80044ca:	e7a8      	b.n	800441e <_vfiprintf_r+0xfe>
 80044cc:	2300      	movs	r3, #0
 80044ce:	3401      	adds	r4, #1
 80044d0:	9305      	str	r3, [sp, #20]
 80044d2:	4619      	mov	r1, r3
 80044d4:	f04f 0c0a 	mov.w	ip, #10
 80044d8:	4620      	mov	r0, r4
 80044da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044de:	3a30      	subs	r2, #48	@ 0x30
 80044e0:	2a09      	cmp	r2, #9
 80044e2:	d903      	bls.n	80044ec <_vfiprintf_r+0x1cc>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0c6      	beq.n	8004476 <_vfiprintf_r+0x156>
 80044e8:	9105      	str	r1, [sp, #20]
 80044ea:	e7c4      	b.n	8004476 <_vfiprintf_r+0x156>
 80044ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80044f0:	4604      	mov	r4, r0
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7f0      	b.n	80044d8 <_vfiprintf_r+0x1b8>
 80044f6:	ab03      	add	r3, sp, #12
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	462a      	mov	r2, r5
 80044fc:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <_vfiprintf_r+0x228>)
 80044fe:	a904      	add	r1, sp, #16
 8004500:	4630      	mov	r0, r6
 8004502:	f3af 8000 	nop.w
 8004506:	4607      	mov	r7, r0
 8004508:	1c78      	adds	r0, r7, #1
 800450a:	d1d6      	bne.n	80044ba <_vfiprintf_r+0x19a>
 800450c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800450e:	07d9      	lsls	r1, r3, #31
 8004510:	d405      	bmi.n	800451e <_vfiprintf_r+0x1fe>
 8004512:	89ab      	ldrh	r3, [r5, #12]
 8004514:	059a      	lsls	r2, r3, #22
 8004516:	d402      	bmi.n	800451e <_vfiprintf_r+0x1fe>
 8004518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800451a:	f7ff fc85 	bl	8003e28 <__retarget_lock_release_recursive>
 800451e:	89ab      	ldrh	r3, [r5, #12]
 8004520:	065b      	lsls	r3, r3, #25
 8004522:	f53f af1f 	bmi.w	8004364 <_vfiprintf_r+0x44>
 8004526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004528:	e71e      	b.n	8004368 <_vfiprintf_r+0x48>
 800452a:	ab03      	add	r3, sp, #12
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	462a      	mov	r2, r5
 8004530:	4b05      	ldr	r3, [pc, #20]	@ (8004548 <_vfiprintf_r+0x228>)
 8004532:	a904      	add	r1, sp, #16
 8004534:	4630      	mov	r0, r6
 8004536:	f000 f879 	bl	800462c <_printf_i>
 800453a:	e7e4      	b.n	8004506 <_vfiprintf_r+0x1e6>
 800453c:	08004dbc 	.word	0x08004dbc
 8004540:	08004dc6 	.word	0x08004dc6
 8004544:	00000000 	.word	0x00000000
 8004548:	080042fb 	.word	0x080042fb
 800454c:	08004dc2 	.word	0x08004dc2

08004550 <_printf_common>:
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	4698      	mov	r8, r3
 8004558:	688a      	ldr	r2, [r1, #8]
 800455a:	690b      	ldr	r3, [r1, #16]
 800455c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004560:	4293      	cmp	r3, r2
 8004562:	bfb8      	it	lt
 8004564:	4613      	movlt	r3, r2
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800456c:	4607      	mov	r7, r0
 800456e:	460c      	mov	r4, r1
 8004570:	b10a      	cbz	r2, 8004576 <_printf_common+0x26>
 8004572:	3301      	adds	r3, #1
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	0699      	lsls	r1, r3, #26
 800457a:	bf42      	ittt	mi
 800457c:	6833      	ldrmi	r3, [r6, #0]
 800457e:	3302      	addmi	r3, #2
 8004580:	6033      	strmi	r3, [r6, #0]
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f015 0506 	ands.w	r5, r5, #6
 8004588:	d106      	bne.n	8004598 <_printf_common+0x48>
 800458a:	f104 0a19 	add.w	sl, r4, #25
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dc26      	bgt.n	80045e6 <_printf_common+0x96>
 8004598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	3b00      	subs	r3, #0
 80045a0:	bf18      	it	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d42b      	bmi.n	8004600 <_printf_common+0xb0>
 80045a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045ac:	4641      	mov	r1, r8
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c8      	blx	r9
 80045b2:	3001      	adds	r0, #1
 80045b4:	d01e      	beq.n	80045f4 <_printf_common+0xa4>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	6922      	ldr	r2, [r4, #16]
 80045ba:	f003 0306 	and.w	r3, r3, #6
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf02      	ittt	eq
 80045c2:	68e5      	ldreq	r5, [r4, #12]
 80045c4:	6833      	ldreq	r3, [r6, #0]
 80045c6:	1aed      	subeq	r5, r5, r3
 80045c8:	68a3      	ldr	r3, [r4, #8]
 80045ca:	bf0c      	ite	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	2500      	movne	r5, #0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bfc4      	itt	gt
 80045d6:	1a9b      	subgt	r3, r3, r2
 80045d8:	18ed      	addgt	r5, r5, r3
 80045da:	2600      	movs	r6, #0
 80045dc:	341a      	adds	r4, #26
 80045de:	42b5      	cmp	r5, r6
 80045e0:	d11a      	bne.n	8004618 <_printf_common+0xc8>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e008      	b.n	80045f8 <_printf_common+0xa8>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4641      	mov	r1, r8
 80045ec:	4638      	mov	r0, r7
 80045ee:	47c8      	blx	r9
 80045f0:	3001      	adds	r0, #1
 80045f2:	d103      	bne.n	80045fc <_printf_common+0xac>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7c6      	b.n	800458e <_printf_common+0x3e>
 8004600:	18e1      	adds	r1, r4, r3
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	2030      	movs	r0, #48	@ 0x30
 8004606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800460a:	4422      	add	r2, r4
 800460c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004614:	3302      	adds	r3, #2
 8004616:	e7c7      	b.n	80045a8 <_printf_common+0x58>
 8004618:	2301      	movs	r3, #1
 800461a:	4622      	mov	r2, r4
 800461c:	4641      	mov	r1, r8
 800461e:	4638      	mov	r0, r7
 8004620:	47c8      	blx	r9
 8004622:	3001      	adds	r0, #1
 8004624:	d0e6      	beq.n	80045f4 <_printf_common+0xa4>
 8004626:	3601      	adds	r6, #1
 8004628:	e7d9      	b.n	80045de <_printf_common+0x8e>
	...

0800462c <_printf_i>:
 800462c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	7e0f      	ldrb	r7, [r1, #24]
 8004632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004634:	2f78      	cmp	r7, #120	@ 0x78
 8004636:	4691      	mov	r9, r2
 8004638:	4680      	mov	r8, r0
 800463a:	460c      	mov	r4, r1
 800463c:	469a      	mov	sl, r3
 800463e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004642:	d807      	bhi.n	8004654 <_printf_i+0x28>
 8004644:	2f62      	cmp	r7, #98	@ 0x62
 8004646:	d80a      	bhi.n	800465e <_printf_i+0x32>
 8004648:	2f00      	cmp	r7, #0
 800464a:	f000 80d2 	beq.w	80047f2 <_printf_i+0x1c6>
 800464e:	2f58      	cmp	r7, #88	@ 0x58
 8004650:	f000 80b9 	beq.w	80047c6 <_printf_i+0x19a>
 8004654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800465c:	e03a      	b.n	80046d4 <_printf_i+0xa8>
 800465e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004662:	2b15      	cmp	r3, #21
 8004664:	d8f6      	bhi.n	8004654 <_printf_i+0x28>
 8004666:	a101      	add	r1, pc, #4	@ (adr r1, 800466c <_printf_i+0x40>)
 8004668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046d9 	.word	0x080046d9
 8004674:	08004655 	.word	0x08004655
 8004678:	08004655 	.word	0x08004655
 800467c:	08004655 	.word	0x08004655
 8004680:	08004655 	.word	0x08004655
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004655 	.word	0x08004655
 800468c:	08004655 	.word	0x08004655
 8004690:	08004655 	.word	0x08004655
 8004694:	08004655 	.word	0x08004655
 8004698:	080047d9 	.word	0x080047d9
 800469c:	08004703 	.word	0x08004703
 80046a0:	08004793 	.word	0x08004793
 80046a4:	08004655 	.word	0x08004655
 80046a8:	08004655 	.word	0x08004655
 80046ac:	080047fb 	.word	0x080047fb
 80046b0:	08004655 	.word	0x08004655
 80046b4:	08004703 	.word	0x08004703
 80046b8:	08004655 	.word	0x08004655
 80046bc:	08004655 	.word	0x08004655
 80046c0:	0800479b 	.word	0x0800479b
 80046c4:	6833      	ldr	r3, [r6, #0]
 80046c6:	1d1a      	adds	r2, r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6032      	str	r2, [r6, #0]
 80046cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046d4:	2301      	movs	r3, #1
 80046d6:	e09d      	b.n	8004814 <_printf_i+0x1e8>
 80046d8:	6833      	ldr	r3, [r6, #0]
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	1d19      	adds	r1, r3, #4
 80046de:	6031      	str	r1, [r6, #0]
 80046e0:	0606      	lsls	r6, r0, #24
 80046e2:	d501      	bpl.n	80046e8 <_printf_i+0xbc>
 80046e4:	681d      	ldr	r5, [r3, #0]
 80046e6:	e003      	b.n	80046f0 <_printf_i+0xc4>
 80046e8:	0645      	lsls	r5, r0, #25
 80046ea:	d5fb      	bpl.n	80046e4 <_printf_i+0xb8>
 80046ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046f0:	2d00      	cmp	r5, #0
 80046f2:	da03      	bge.n	80046fc <_printf_i+0xd0>
 80046f4:	232d      	movs	r3, #45	@ 0x2d
 80046f6:	426d      	negs	r5, r5
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046fc:	4859      	ldr	r0, [pc, #356]	@ (8004864 <_printf_i+0x238>)
 80046fe:	230a      	movs	r3, #10
 8004700:	e011      	b.n	8004726 <_printf_i+0xfa>
 8004702:	6821      	ldr	r1, [r4, #0]
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	0608      	lsls	r0, r1, #24
 8004708:	f853 5b04 	ldr.w	r5, [r3], #4
 800470c:	d402      	bmi.n	8004714 <_printf_i+0xe8>
 800470e:	0649      	lsls	r1, r1, #25
 8004710:	bf48      	it	mi
 8004712:	b2ad      	uxthmi	r5, r5
 8004714:	2f6f      	cmp	r7, #111	@ 0x6f
 8004716:	4853      	ldr	r0, [pc, #332]	@ (8004864 <_printf_i+0x238>)
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	bf14      	ite	ne
 800471c:	230a      	movne	r3, #10
 800471e:	2308      	moveq	r3, #8
 8004720:	2100      	movs	r1, #0
 8004722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004726:	6866      	ldr	r6, [r4, #4]
 8004728:	60a6      	str	r6, [r4, #8]
 800472a:	2e00      	cmp	r6, #0
 800472c:	bfa2      	ittt	ge
 800472e:	6821      	ldrge	r1, [r4, #0]
 8004730:	f021 0104 	bicge.w	r1, r1, #4
 8004734:	6021      	strge	r1, [r4, #0]
 8004736:	b90d      	cbnz	r5, 800473c <_printf_i+0x110>
 8004738:	2e00      	cmp	r6, #0
 800473a:	d04b      	beq.n	80047d4 <_printf_i+0x1a8>
 800473c:	4616      	mov	r6, r2
 800473e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004742:	fb03 5711 	mls	r7, r3, r1, r5
 8004746:	5dc7      	ldrb	r7, [r0, r7]
 8004748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800474c:	462f      	mov	r7, r5
 800474e:	42bb      	cmp	r3, r7
 8004750:	460d      	mov	r5, r1
 8004752:	d9f4      	bls.n	800473e <_printf_i+0x112>
 8004754:	2b08      	cmp	r3, #8
 8004756:	d10b      	bne.n	8004770 <_printf_i+0x144>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	07df      	lsls	r7, r3, #31
 800475c:	d508      	bpl.n	8004770 <_printf_i+0x144>
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	6861      	ldr	r1, [r4, #4]
 8004762:	4299      	cmp	r1, r3
 8004764:	bfde      	ittt	le
 8004766:	2330      	movle	r3, #48	@ 0x30
 8004768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800476c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004770:	1b92      	subs	r2, r2, r6
 8004772:	6122      	str	r2, [r4, #16]
 8004774:	f8cd a000 	str.w	sl, [sp]
 8004778:	464b      	mov	r3, r9
 800477a:	aa03      	add	r2, sp, #12
 800477c:	4621      	mov	r1, r4
 800477e:	4640      	mov	r0, r8
 8004780:	f7ff fee6 	bl	8004550 <_printf_common>
 8004784:	3001      	adds	r0, #1
 8004786:	d14a      	bne.n	800481e <_printf_i+0x1f2>
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	b004      	add	sp, #16
 800478e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f043 0320 	orr.w	r3, r3, #32
 8004798:	6023      	str	r3, [r4, #0]
 800479a:	4833      	ldr	r0, [pc, #204]	@ (8004868 <_printf_i+0x23c>)
 800479c:	2778      	movs	r7, #120	@ 0x78
 800479e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	6831      	ldr	r1, [r6, #0]
 80047a6:	061f      	lsls	r7, r3, #24
 80047a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80047ac:	d402      	bmi.n	80047b4 <_printf_i+0x188>
 80047ae:	065f      	lsls	r7, r3, #25
 80047b0:	bf48      	it	mi
 80047b2:	b2ad      	uxthmi	r5, r5
 80047b4:	6031      	str	r1, [r6, #0]
 80047b6:	07d9      	lsls	r1, r3, #31
 80047b8:	bf44      	itt	mi
 80047ba:	f043 0320 	orrmi.w	r3, r3, #32
 80047be:	6023      	strmi	r3, [r4, #0]
 80047c0:	b11d      	cbz	r5, 80047ca <_printf_i+0x19e>
 80047c2:	2310      	movs	r3, #16
 80047c4:	e7ac      	b.n	8004720 <_printf_i+0xf4>
 80047c6:	4827      	ldr	r0, [pc, #156]	@ (8004864 <_printf_i+0x238>)
 80047c8:	e7e9      	b.n	800479e <_printf_i+0x172>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	f023 0320 	bic.w	r3, r3, #32
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	e7f6      	b.n	80047c2 <_printf_i+0x196>
 80047d4:	4616      	mov	r6, r2
 80047d6:	e7bd      	b.n	8004754 <_printf_i+0x128>
 80047d8:	6833      	ldr	r3, [r6, #0]
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	6961      	ldr	r1, [r4, #20]
 80047de:	1d18      	adds	r0, r3, #4
 80047e0:	6030      	str	r0, [r6, #0]
 80047e2:	062e      	lsls	r6, r5, #24
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	d501      	bpl.n	80047ec <_printf_i+0x1c0>
 80047e8:	6019      	str	r1, [r3, #0]
 80047ea:	e002      	b.n	80047f2 <_printf_i+0x1c6>
 80047ec:	0668      	lsls	r0, r5, #25
 80047ee:	d5fb      	bpl.n	80047e8 <_printf_i+0x1bc>
 80047f0:	8019      	strh	r1, [r3, #0]
 80047f2:	2300      	movs	r3, #0
 80047f4:	6123      	str	r3, [r4, #16]
 80047f6:	4616      	mov	r6, r2
 80047f8:	e7bc      	b.n	8004774 <_printf_i+0x148>
 80047fa:	6833      	ldr	r3, [r6, #0]
 80047fc:	1d1a      	adds	r2, r3, #4
 80047fe:	6032      	str	r2, [r6, #0]
 8004800:	681e      	ldr	r6, [r3, #0]
 8004802:	6862      	ldr	r2, [r4, #4]
 8004804:	2100      	movs	r1, #0
 8004806:	4630      	mov	r0, r6
 8004808:	f7fb fd02 	bl	8000210 <memchr>
 800480c:	b108      	cbz	r0, 8004812 <_printf_i+0x1e6>
 800480e:	1b80      	subs	r0, r0, r6
 8004810:	6060      	str	r0, [r4, #4]
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	6123      	str	r3, [r4, #16]
 8004816:	2300      	movs	r3, #0
 8004818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800481c:	e7aa      	b.n	8004774 <_printf_i+0x148>
 800481e:	6923      	ldr	r3, [r4, #16]
 8004820:	4632      	mov	r2, r6
 8004822:	4649      	mov	r1, r9
 8004824:	4640      	mov	r0, r8
 8004826:	47d0      	blx	sl
 8004828:	3001      	adds	r0, #1
 800482a:	d0ad      	beq.n	8004788 <_printf_i+0x15c>
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	079b      	lsls	r3, r3, #30
 8004830:	d413      	bmi.n	800485a <_printf_i+0x22e>
 8004832:	68e0      	ldr	r0, [r4, #12]
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	4298      	cmp	r0, r3
 8004838:	bfb8      	it	lt
 800483a:	4618      	movlt	r0, r3
 800483c:	e7a6      	b.n	800478c <_printf_i+0x160>
 800483e:	2301      	movs	r3, #1
 8004840:	4632      	mov	r2, r6
 8004842:	4649      	mov	r1, r9
 8004844:	4640      	mov	r0, r8
 8004846:	47d0      	blx	sl
 8004848:	3001      	adds	r0, #1
 800484a:	d09d      	beq.n	8004788 <_printf_i+0x15c>
 800484c:	3501      	adds	r5, #1
 800484e:	68e3      	ldr	r3, [r4, #12]
 8004850:	9903      	ldr	r1, [sp, #12]
 8004852:	1a5b      	subs	r3, r3, r1
 8004854:	42ab      	cmp	r3, r5
 8004856:	dcf2      	bgt.n	800483e <_printf_i+0x212>
 8004858:	e7eb      	b.n	8004832 <_printf_i+0x206>
 800485a:	2500      	movs	r5, #0
 800485c:	f104 0619 	add.w	r6, r4, #25
 8004860:	e7f5      	b.n	800484e <_printf_i+0x222>
 8004862:	bf00      	nop
 8004864:	08004dcd 	.word	0x08004dcd
 8004868:	08004dde 	.word	0x08004dde

0800486c <__sflush_r>:
 800486c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004874:	0716      	lsls	r6, r2, #28
 8004876:	4605      	mov	r5, r0
 8004878:	460c      	mov	r4, r1
 800487a:	d454      	bmi.n	8004926 <__sflush_r+0xba>
 800487c:	684b      	ldr	r3, [r1, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	dc02      	bgt.n	8004888 <__sflush_r+0x1c>
 8004882:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	dd48      	ble.n	800491a <__sflush_r+0xae>
 8004888:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800488a:	2e00      	cmp	r6, #0
 800488c:	d045      	beq.n	800491a <__sflush_r+0xae>
 800488e:	2300      	movs	r3, #0
 8004890:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004894:	682f      	ldr	r7, [r5, #0]
 8004896:	6a21      	ldr	r1, [r4, #32]
 8004898:	602b      	str	r3, [r5, #0]
 800489a:	d030      	beq.n	80048fe <__sflush_r+0x92>
 800489c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	0759      	lsls	r1, r3, #29
 80048a2:	d505      	bpl.n	80048b0 <__sflush_r+0x44>
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048aa:	b10b      	cbz	r3, 80048b0 <__sflush_r+0x44>
 80048ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048b4:	6a21      	ldr	r1, [r4, #32]
 80048b6:	4628      	mov	r0, r5
 80048b8:	47b0      	blx	r6
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	d106      	bne.n	80048ce <__sflush_r+0x62>
 80048c0:	6829      	ldr	r1, [r5, #0]
 80048c2:	291d      	cmp	r1, #29
 80048c4:	d82b      	bhi.n	800491e <__sflush_r+0xb2>
 80048c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004970 <__sflush_r+0x104>)
 80048c8:	410a      	asrs	r2, r1
 80048ca:	07d6      	lsls	r6, r2, #31
 80048cc:	d427      	bmi.n	800491e <__sflush_r+0xb2>
 80048ce:	2200      	movs	r2, #0
 80048d0:	6062      	str	r2, [r4, #4]
 80048d2:	04d9      	lsls	r1, r3, #19
 80048d4:	6922      	ldr	r2, [r4, #16]
 80048d6:	6022      	str	r2, [r4, #0]
 80048d8:	d504      	bpl.n	80048e4 <__sflush_r+0x78>
 80048da:	1c42      	adds	r2, r0, #1
 80048dc:	d101      	bne.n	80048e2 <__sflush_r+0x76>
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	b903      	cbnz	r3, 80048e4 <__sflush_r+0x78>
 80048e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80048e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048e6:	602f      	str	r7, [r5, #0]
 80048e8:	b1b9      	cbz	r1, 800491a <__sflush_r+0xae>
 80048ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048ee:	4299      	cmp	r1, r3
 80048f0:	d002      	beq.n	80048f8 <__sflush_r+0x8c>
 80048f2:	4628      	mov	r0, r5
 80048f4:	f7ff fa9a 	bl	8003e2c <_free_r>
 80048f8:	2300      	movs	r3, #0
 80048fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80048fc:	e00d      	b.n	800491a <__sflush_r+0xae>
 80048fe:	2301      	movs	r3, #1
 8004900:	4628      	mov	r0, r5
 8004902:	47b0      	blx	r6
 8004904:	4602      	mov	r2, r0
 8004906:	1c50      	adds	r0, r2, #1
 8004908:	d1c9      	bne.n	800489e <__sflush_r+0x32>
 800490a:	682b      	ldr	r3, [r5, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0c6      	beq.n	800489e <__sflush_r+0x32>
 8004910:	2b1d      	cmp	r3, #29
 8004912:	d001      	beq.n	8004918 <__sflush_r+0xac>
 8004914:	2b16      	cmp	r3, #22
 8004916:	d11e      	bne.n	8004956 <__sflush_r+0xea>
 8004918:	602f      	str	r7, [r5, #0]
 800491a:	2000      	movs	r0, #0
 800491c:	e022      	b.n	8004964 <__sflush_r+0xf8>
 800491e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004922:	b21b      	sxth	r3, r3
 8004924:	e01b      	b.n	800495e <__sflush_r+0xf2>
 8004926:	690f      	ldr	r7, [r1, #16]
 8004928:	2f00      	cmp	r7, #0
 800492a:	d0f6      	beq.n	800491a <__sflush_r+0xae>
 800492c:	0793      	lsls	r3, r2, #30
 800492e:	680e      	ldr	r6, [r1, #0]
 8004930:	bf08      	it	eq
 8004932:	694b      	ldreq	r3, [r1, #20]
 8004934:	600f      	str	r7, [r1, #0]
 8004936:	bf18      	it	ne
 8004938:	2300      	movne	r3, #0
 800493a:	eba6 0807 	sub.w	r8, r6, r7
 800493e:	608b      	str	r3, [r1, #8]
 8004940:	f1b8 0f00 	cmp.w	r8, #0
 8004944:	dde9      	ble.n	800491a <__sflush_r+0xae>
 8004946:	6a21      	ldr	r1, [r4, #32]
 8004948:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800494a:	4643      	mov	r3, r8
 800494c:	463a      	mov	r2, r7
 800494e:	4628      	mov	r0, r5
 8004950:	47b0      	blx	r6
 8004952:	2800      	cmp	r0, #0
 8004954:	dc08      	bgt.n	8004968 <__sflush_r+0xfc>
 8004956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	f04f 30ff 	mov.w	r0, #4294967295
 8004964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004968:	4407      	add	r7, r0
 800496a:	eba8 0800 	sub.w	r8, r8, r0
 800496e:	e7e7      	b.n	8004940 <__sflush_r+0xd4>
 8004970:	dfbffffe 	.word	0xdfbffffe

08004974 <_fflush_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	690b      	ldr	r3, [r1, #16]
 8004978:	4605      	mov	r5, r0
 800497a:	460c      	mov	r4, r1
 800497c:	b913      	cbnz	r3, 8004984 <_fflush_r+0x10>
 800497e:	2500      	movs	r5, #0
 8004980:	4628      	mov	r0, r5
 8004982:	bd38      	pop	{r3, r4, r5, pc}
 8004984:	b118      	cbz	r0, 800498e <_fflush_r+0x1a>
 8004986:	6a03      	ldr	r3, [r0, #32]
 8004988:	b90b      	cbnz	r3, 800498e <_fflush_r+0x1a>
 800498a:	f7ff f91f 	bl	8003bcc <__sinit>
 800498e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f3      	beq.n	800497e <_fflush_r+0xa>
 8004996:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004998:	07d0      	lsls	r0, r2, #31
 800499a:	d404      	bmi.n	80049a6 <_fflush_r+0x32>
 800499c:	0599      	lsls	r1, r3, #22
 800499e:	d402      	bmi.n	80049a6 <_fflush_r+0x32>
 80049a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049a2:	f7ff fa40 	bl	8003e26 <__retarget_lock_acquire_recursive>
 80049a6:	4628      	mov	r0, r5
 80049a8:	4621      	mov	r1, r4
 80049aa:	f7ff ff5f 	bl	800486c <__sflush_r>
 80049ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049b0:	07da      	lsls	r2, r3, #31
 80049b2:	4605      	mov	r5, r0
 80049b4:	d4e4      	bmi.n	8004980 <_fflush_r+0xc>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	059b      	lsls	r3, r3, #22
 80049ba:	d4e1      	bmi.n	8004980 <_fflush_r+0xc>
 80049bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049be:	f7ff fa33 	bl	8003e28 <__retarget_lock_release_recursive>
 80049c2:	e7dd      	b.n	8004980 <_fflush_r+0xc>

080049c4 <_putc_r>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	460d      	mov	r5, r1
 80049c8:	4614      	mov	r4, r2
 80049ca:	4606      	mov	r6, r0
 80049cc:	b118      	cbz	r0, 80049d6 <_putc_r+0x12>
 80049ce:	6a03      	ldr	r3, [r0, #32]
 80049d0:	b90b      	cbnz	r3, 80049d6 <_putc_r+0x12>
 80049d2:	f7ff f8fb 	bl	8003bcc <__sinit>
 80049d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049d8:	07d8      	lsls	r0, r3, #31
 80049da:	d405      	bmi.n	80049e8 <_putc_r+0x24>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	0599      	lsls	r1, r3, #22
 80049e0:	d402      	bmi.n	80049e8 <_putc_r+0x24>
 80049e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049e4:	f7ff fa1f 	bl	8003e26 <__retarget_lock_acquire_recursive>
 80049e8:	68a3      	ldr	r3, [r4, #8]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	60a3      	str	r3, [r4, #8]
 80049f0:	da05      	bge.n	80049fe <_putc_r+0x3a>
 80049f2:	69a2      	ldr	r2, [r4, #24]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	db12      	blt.n	8004a1e <_putc_r+0x5a>
 80049f8:	b2eb      	uxtb	r3, r5
 80049fa:	2b0a      	cmp	r3, #10
 80049fc:	d00f      	beq.n	8004a1e <_putc_r+0x5a>
 80049fe:	6823      	ldr	r3, [r4, #0]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	6022      	str	r2, [r4, #0]
 8004a04:	701d      	strb	r5, [r3, #0]
 8004a06:	b2ed      	uxtb	r5, r5
 8004a08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a0a:	07da      	lsls	r2, r3, #31
 8004a0c:	d405      	bmi.n	8004a1a <_putc_r+0x56>
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	059b      	lsls	r3, r3, #22
 8004a12:	d402      	bmi.n	8004a1a <_putc_r+0x56>
 8004a14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a16:	f7ff fa07 	bl	8003e28 <__retarget_lock_release_recursive>
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4622      	mov	r2, r4
 8004a22:	4630      	mov	r0, r6
 8004a24:	f000 f802 	bl	8004a2c <__swbuf_r>
 8004a28:	4605      	mov	r5, r0
 8004a2a:	e7ed      	b.n	8004a08 <_putc_r+0x44>

08004a2c <__swbuf_r>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	460e      	mov	r6, r1
 8004a30:	4614      	mov	r4, r2
 8004a32:	4605      	mov	r5, r0
 8004a34:	b118      	cbz	r0, 8004a3e <__swbuf_r+0x12>
 8004a36:	6a03      	ldr	r3, [r0, #32]
 8004a38:	b90b      	cbnz	r3, 8004a3e <__swbuf_r+0x12>
 8004a3a:	f7ff f8c7 	bl	8003bcc <__sinit>
 8004a3e:	69a3      	ldr	r3, [r4, #24]
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	071a      	lsls	r2, r3, #28
 8004a46:	d501      	bpl.n	8004a4c <__swbuf_r+0x20>
 8004a48:	6923      	ldr	r3, [r4, #16]
 8004a4a:	b943      	cbnz	r3, 8004a5e <__swbuf_r+0x32>
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f000 f82a 	bl	8004aa8 <__swsetup_r>
 8004a54:	b118      	cbz	r0, 8004a5e <__swbuf_r+0x32>
 8004a56:	f04f 37ff 	mov.w	r7, #4294967295
 8004a5a:	4638      	mov	r0, r7
 8004a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	1a98      	subs	r0, r3, r2
 8004a64:	6963      	ldr	r3, [r4, #20]
 8004a66:	b2f6      	uxtb	r6, r6
 8004a68:	4283      	cmp	r3, r0
 8004a6a:	4637      	mov	r7, r6
 8004a6c:	dc05      	bgt.n	8004a7a <__swbuf_r+0x4e>
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f7ff ff7f 	bl	8004974 <_fflush_r>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d1ed      	bne.n	8004a56 <__swbuf_r+0x2a>
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60a3      	str	r3, [r4, #8]
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	6022      	str	r2, [r4, #0]
 8004a86:	701e      	strb	r6, [r3, #0]
 8004a88:	6962      	ldr	r2, [r4, #20]
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d004      	beq.n	8004a9a <__swbuf_r+0x6e>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	07db      	lsls	r3, r3, #31
 8004a94:	d5e1      	bpl.n	8004a5a <__swbuf_r+0x2e>
 8004a96:	2e0a      	cmp	r6, #10
 8004a98:	d1df      	bne.n	8004a5a <__swbuf_r+0x2e>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f7ff ff69 	bl	8004974 <_fflush_r>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d0d9      	beq.n	8004a5a <__swbuf_r+0x2e>
 8004aa6:	e7d6      	b.n	8004a56 <__swbuf_r+0x2a>

08004aa8 <__swsetup_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4b29      	ldr	r3, [pc, #164]	@ (8004b50 <__swsetup_r+0xa8>)
 8004aac:	4605      	mov	r5, r0
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	b118      	cbz	r0, 8004abc <__swsetup_r+0x14>
 8004ab4:	6a03      	ldr	r3, [r0, #32]
 8004ab6:	b90b      	cbnz	r3, 8004abc <__swsetup_r+0x14>
 8004ab8:	f7ff f888 	bl	8003bcc <__sinit>
 8004abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac0:	0719      	lsls	r1, r3, #28
 8004ac2:	d422      	bmi.n	8004b0a <__swsetup_r+0x62>
 8004ac4:	06da      	lsls	r2, r3, #27
 8004ac6:	d407      	bmi.n	8004ad8 <__swsetup_r+0x30>
 8004ac8:	2209      	movs	r2, #9
 8004aca:	602a      	str	r2, [r5, #0]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad6:	e033      	b.n	8004b40 <__swsetup_r+0x98>
 8004ad8:	0758      	lsls	r0, r3, #29
 8004ada:	d512      	bpl.n	8004b02 <__swsetup_r+0x5a>
 8004adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ade:	b141      	cbz	r1, 8004af2 <__swsetup_r+0x4a>
 8004ae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ae4:	4299      	cmp	r1, r3
 8004ae6:	d002      	beq.n	8004aee <__swsetup_r+0x46>
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f7ff f99f 	bl	8003e2c <_free_r>
 8004aee:	2300      	movs	r3, #0
 8004af0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	2300      	movs	r3, #0
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	6923      	ldr	r3, [r4, #16]
 8004b00:	6023      	str	r3, [r4, #0]
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	f043 0308 	orr.w	r3, r3, #8
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	b94b      	cbnz	r3, 8004b22 <__swsetup_r+0x7a>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b18:	d003      	beq.n	8004b22 <__swsetup_r+0x7a>
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f000 f8a5 	bl	8004c6c <__smakebuf_r>
 8004b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b26:	f013 0201 	ands.w	r2, r3, #1
 8004b2a:	d00a      	beq.n	8004b42 <__swsetup_r+0x9a>
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	60a2      	str	r2, [r4, #8]
 8004b30:	6962      	ldr	r2, [r4, #20]
 8004b32:	4252      	negs	r2, r2
 8004b34:	61a2      	str	r2, [r4, #24]
 8004b36:	6922      	ldr	r2, [r4, #16]
 8004b38:	b942      	cbnz	r2, 8004b4c <__swsetup_r+0xa4>
 8004b3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b3e:	d1c5      	bne.n	8004acc <__swsetup_r+0x24>
 8004b40:	bd38      	pop	{r3, r4, r5, pc}
 8004b42:	0799      	lsls	r1, r3, #30
 8004b44:	bf58      	it	pl
 8004b46:	6962      	ldrpl	r2, [r4, #20]
 8004b48:	60a2      	str	r2, [r4, #8]
 8004b4a:	e7f4      	b.n	8004b36 <__swsetup_r+0x8e>
 8004b4c:	2000      	movs	r0, #0
 8004b4e:	e7f7      	b.n	8004b40 <__swsetup_r+0x98>
 8004b50:	20000018 	.word	0x20000018

08004b54 <memmove>:
 8004b54:	4288      	cmp	r0, r1
 8004b56:	b510      	push	{r4, lr}
 8004b58:	eb01 0402 	add.w	r4, r1, r2
 8004b5c:	d902      	bls.n	8004b64 <memmove+0x10>
 8004b5e:	4284      	cmp	r4, r0
 8004b60:	4623      	mov	r3, r4
 8004b62:	d807      	bhi.n	8004b74 <memmove+0x20>
 8004b64:	1e43      	subs	r3, r0, #1
 8004b66:	42a1      	cmp	r1, r4
 8004b68:	d008      	beq.n	8004b7c <memmove+0x28>
 8004b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b72:	e7f8      	b.n	8004b66 <memmove+0x12>
 8004b74:	4402      	add	r2, r0
 8004b76:	4601      	mov	r1, r0
 8004b78:	428a      	cmp	r2, r1
 8004b7a:	d100      	bne.n	8004b7e <memmove+0x2a>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b86:	e7f7      	b.n	8004b78 <memmove+0x24>

08004b88 <_sbrk_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	4d06      	ldr	r5, [pc, #24]	@ (8004ba4 <_sbrk_r+0x1c>)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	f7fc f9a2 	bl	8000edc <_sbrk>
 8004b98:	1c43      	adds	r3, r0, #1
 8004b9a:	d102      	bne.n	8004ba2 <_sbrk_r+0x1a>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	b103      	cbz	r3, 8004ba2 <_sbrk_r+0x1a>
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	20000284 	.word	0x20000284

08004ba8 <memcpy>:
 8004ba8:	440a      	add	r2, r1
 8004baa:	4291      	cmp	r1, r2
 8004bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb0:	d100      	bne.n	8004bb4 <memcpy+0xc>
 8004bb2:	4770      	bx	lr
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bbe:	4291      	cmp	r1, r2
 8004bc0:	d1f9      	bne.n	8004bb6 <memcpy+0xe>
 8004bc2:	bd10      	pop	{r4, pc}

08004bc4 <_realloc_r>:
 8004bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc8:	4680      	mov	r8, r0
 8004bca:	4615      	mov	r5, r2
 8004bcc:	460c      	mov	r4, r1
 8004bce:	b921      	cbnz	r1, 8004bda <_realloc_r+0x16>
 8004bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	f7ff b995 	b.w	8003f04 <_malloc_r>
 8004bda:	b92a      	cbnz	r2, 8004be8 <_realloc_r+0x24>
 8004bdc:	f7ff f926 	bl	8003e2c <_free_r>
 8004be0:	2400      	movs	r4, #0
 8004be2:	4620      	mov	r0, r4
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be8:	f000 f89e 	bl	8004d28 <_malloc_usable_size_r>
 8004bec:	4285      	cmp	r5, r0
 8004bee:	4606      	mov	r6, r0
 8004bf0:	d802      	bhi.n	8004bf8 <_realloc_r+0x34>
 8004bf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004bf6:	d8f4      	bhi.n	8004be2 <_realloc_r+0x1e>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	f7ff f982 	bl	8003f04 <_malloc_r>
 8004c00:	4607      	mov	r7, r0
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0ec      	beq.n	8004be0 <_realloc_r+0x1c>
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	462a      	mov	r2, r5
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	bf28      	it	cs
 8004c0e:	4632      	movcs	r2, r6
 8004c10:	f7ff ffca 	bl	8004ba8 <memcpy>
 8004c14:	4621      	mov	r1, r4
 8004c16:	4640      	mov	r0, r8
 8004c18:	f7ff f908 	bl	8003e2c <_free_r>
 8004c1c:	463c      	mov	r4, r7
 8004c1e:	e7e0      	b.n	8004be2 <_realloc_r+0x1e>

08004c20 <__swhatbuf_r>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c28:	2900      	cmp	r1, #0
 8004c2a:	b096      	sub	sp, #88	@ 0x58
 8004c2c:	4615      	mov	r5, r2
 8004c2e:	461e      	mov	r6, r3
 8004c30:	da0d      	bge.n	8004c4e <__swhatbuf_r+0x2e>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	bf14      	ite	ne
 8004c3e:	2340      	movne	r3, #64	@ 0x40
 8004c40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c44:	2000      	movs	r0, #0
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	602b      	str	r3, [r5, #0]
 8004c4a:	b016      	add	sp, #88	@ 0x58
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
 8004c4e:	466a      	mov	r2, sp
 8004c50:	f000 f848 	bl	8004ce4 <_fstat_r>
 8004c54:	2800      	cmp	r0, #0
 8004c56:	dbec      	blt.n	8004c32 <__swhatbuf_r+0x12>
 8004c58:	9901      	ldr	r1, [sp, #4]
 8004c5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c62:	4259      	negs	r1, r3
 8004c64:	4159      	adcs	r1, r3
 8004c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c6a:	e7eb      	b.n	8004c44 <__swhatbuf_r+0x24>

08004c6c <__smakebuf_r>:
 8004c6c:	898b      	ldrh	r3, [r1, #12]
 8004c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c70:	079d      	lsls	r5, r3, #30
 8004c72:	4606      	mov	r6, r0
 8004c74:	460c      	mov	r4, r1
 8004c76:	d507      	bpl.n	8004c88 <__smakebuf_r+0x1c>
 8004c78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	2301      	movs	r3, #1
 8004c82:	6163      	str	r3, [r4, #20]
 8004c84:	b003      	add	sp, #12
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c88:	ab01      	add	r3, sp, #4
 8004c8a:	466a      	mov	r2, sp
 8004c8c:	f7ff ffc8 	bl	8004c20 <__swhatbuf_r>
 8004c90:	9f00      	ldr	r7, [sp, #0]
 8004c92:	4605      	mov	r5, r0
 8004c94:	4639      	mov	r1, r7
 8004c96:	4630      	mov	r0, r6
 8004c98:	f7ff f934 	bl	8003f04 <_malloc_r>
 8004c9c:	b948      	cbnz	r0, 8004cb2 <__smakebuf_r+0x46>
 8004c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca2:	059a      	lsls	r2, r3, #22
 8004ca4:	d4ee      	bmi.n	8004c84 <__smakebuf_r+0x18>
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	f043 0302 	orr.w	r3, r3, #2
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	e7e2      	b.n	8004c78 <__smakebuf_r+0xc>
 8004cb2:	89a3      	ldrh	r3, [r4, #12]
 8004cb4:	6020      	str	r0, [r4, #0]
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cba:	81a3      	strh	r3, [r4, #12]
 8004cbc:	9b01      	ldr	r3, [sp, #4]
 8004cbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cc2:	b15b      	cbz	r3, 8004cdc <__smakebuf_r+0x70>
 8004cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f000 f81d 	bl	8004d08 <_isatty_r>
 8004cce:	b128      	cbz	r0, 8004cdc <__smakebuf_r+0x70>
 8004cd0:	89a3      	ldrh	r3, [r4, #12]
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	431d      	orrs	r5, r3
 8004ce0:	81a5      	strh	r5, [r4, #12]
 8004ce2:	e7cf      	b.n	8004c84 <__smakebuf_r+0x18>

08004ce4 <_fstat_r>:
 8004ce4:	b538      	push	{r3, r4, r5, lr}
 8004ce6:	4d07      	ldr	r5, [pc, #28]	@ (8004d04 <_fstat_r+0x20>)
 8004ce8:	2300      	movs	r3, #0
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	f7fc f8ca 	bl	8000e8a <_fstat>
 8004cf6:	1c43      	adds	r3, r0, #1
 8004cf8:	d102      	bne.n	8004d00 <_fstat_r+0x1c>
 8004cfa:	682b      	ldr	r3, [r5, #0]
 8004cfc:	b103      	cbz	r3, 8004d00 <_fstat_r+0x1c>
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	bd38      	pop	{r3, r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	20000284 	.word	0x20000284

08004d08 <_isatty_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4d06      	ldr	r5, [pc, #24]	@ (8004d24 <_isatty_r+0x1c>)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	602b      	str	r3, [r5, #0]
 8004d14:	f7fc f8c9 	bl	8000eaa <_isatty>
 8004d18:	1c43      	adds	r3, r0, #1
 8004d1a:	d102      	bne.n	8004d22 <_isatty_r+0x1a>
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	b103      	cbz	r3, 8004d22 <_isatty_r+0x1a>
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	bd38      	pop	{r3, r4, r5, pc}
 8004d24:	20000284 	.word	0x20000284

08004d28 <_malloc_usable_size_r>:
 8004d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2c:	1f18      	subs	r0, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfbc      	itt	lt
 8004d32:	580b      	ldrlt	r3, [r1, r0]
 8004d34:	18c0      	addlt	r0, r0, r3
 8004d36:	4770      	bx	lr

08004d38 <_init>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr

08004d44 <_fini>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	bf00      	nop
 8004d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d4a:	bc08      	pop	{r3}
 8004d4c:	469e      	mov	lr, r3
 8004d4e:	4770      	bx	lr
