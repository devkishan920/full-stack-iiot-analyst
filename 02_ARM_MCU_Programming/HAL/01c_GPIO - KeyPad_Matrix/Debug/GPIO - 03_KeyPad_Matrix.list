
GPIO - 03_KeyPad_Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000458  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000458  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000460  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000464  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000464  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001382  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e1  00000000  00000000  000033b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014a  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  00003bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021b8  00000000  00000000  0002327a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3224  00000000  00000000  00025432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000594  00000000  00000000  000e869c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000e8c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000440 	.word	0x08000440

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000440 	.word	0x08000440

08000204 <main>:
#include "stm32f4xx.h"
 void delay(void);
 void keypad_init(void); char keypad_kbhit(void);
 int main(void) { keypad_init();
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
 8000208:	f000 f826 	bl	8000258 <keypad_init>
 // enable PA5 for green LED
 RCC->AHB1ENR |= 1; /* enable GPIOA clock */ GPIOA->MODER &=
 800020c:	4b10      	ldr	r3, [pc, #64]	@ (8000250 <main+0x4c>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000210:	4a0f      	ldr	r2, [pc, #60]	@ (8000250 <main+0x4c>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	@ 0x30
 8000218:	4b0e      	ldr	r3, [pc, #56]	@ (8000254 <main+0x50>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <main+0x50>)
 800021e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000222:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000226:	6013      	str	r3, [r2, #0]
 ~0xC0000C00; /* clear pin mode */ GPIOA->MODER |= 0x00000400; /* set
 8000228:	4b0a      	ldr	r3, [pc, #40]	@ (8000254 <main+0x50>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a09      	ldr	r2, [pc, #36]	@ (8000254 <main+0x50>)
 800022e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000232:	6013      	str	r3, [r2, #0]
 pin output mode */
 while(1) {
 if (keypad_kbhit() != 0) /* if a key is pressed */
 8000234:	f000 f82a 	bl	800028c <keypad_kbhit>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d003      	beq.n	8000246 <main+0x42>
 GPIOA->BSRR = 0x00000020; /* turn on green LED */ else
 800023e:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <main+0x50>)
 8000240:	2220      	movs	r2, #32
 8000242:	619a      	str	r2, [r3, #24]
 8000244:	e7f6      	b.n	8000234 <main+0x30>
 GPIOA->BSRR = 0x00200000; /* turn off green LED */ }
 8000246:	4b03      	ldr	r3, [pc, #12]	@ (8000254 <main+0x50>)
 8000248:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800024c:	619a      	str	r2, [r3, #24]
 if (keypad_kbhit() != 0) /* if a key is pressed */
 800024e:	e7f1      	b.n	8000234 <main+0x30>
 8000250:	40023800 	.word	0x40023800
 8000254:	40020000 	.word	0x40020000

08000258 <keypad_init>:
 }
 /* this function initializes PC0-3 (column) and PC4-7 (row).
 * The column pins need to have the pull-up resistors enabled.
 */
 void keypad_init(void) {
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
 RCC->AHB1ENR |= 0x14; /* enable GPIOC clock */
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <keypad_init+0x2c>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a08      	ldr	r2, [pc, #32]	@ (8000284 <keypad_init+0x2c>)
 8000262:	f043 0314 	orr.w	r3, r3, #20
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30
 GPIOC->MODER &= ~0x0000FFFF; /* clear pin mode to input */
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <keypad_init+0x30>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a06      	ldr	r2, [pc, #24]	@ (8000288 <keypad_init+0x30>)
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	041b      	lsls	r3, r3, #16
 8000272:	6013      	str	r3, [r2, #0]
 GPIOC->PUPDR = 0x00000055; /* enable pull up resistors for column
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <keypad_init+0x30>)
 8000276:	2255      	movs	r2, #85	@ 0x55
 8000278:	60da      	str	r2, [r3, #12]
 pins */
 }
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	40023800 	.word	0x40023800
 8000288:	40020800 	.word	0x40020800

0800028c <keypad_kbhit>:
 /* This is a non-blocking function.
 * If a key is pressed, it returns 1. Otherwise, it returns a 0. */
 char keypad_kbhit(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 int col;
 GPIOC->MODER = 0x00005500; /* make all row pins output */
 8000292:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <keypad_kbhit+0x44>)
 8000294:	f44f 42aa 	mov.w	r2, #21760	@ 0x5500
 8000298:	601a      	str	r2, [r3, #0]
 GPIOC->BSRR = 0x00F00000; /* drive all row pins low */
 800029a:	4b0d      	ldr	r3, [pc, #52]	@ (80002d0 <keypad_kbhit+0x44>)
 800029c:	f44f 0270 	mov.w	r2, #15728640	@ 0xf00000
 80002a0:	619a      	str	r2, [r3, #24]
 delay(); /* wait
 80002a2:	f000 f817 	bl	80002d4 <delay>
 for signals to settle */ col = GPIOC->IDR & 0x000F; /* read all
 80002a6:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <keypad_kbhit+0x44>)
 80002a8:	691b      	ldr	r3, [r3, #16]
 80002aa:	f003 030f 	and.w	r3, r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
 column pins */ GPIOC->MODER &= ~0x0000FF00; /* disable all row pins
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <keypad_kbhit+0x44>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a06      	ldr	r2, [pc, #24]	@ (80002d0 <keypad_kbhit+0x44>)
 80002b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80002ba:	6013      	str	r3, [r2, #0]
 drive */ if (col == 0x000F) /* if all columns are high */ return 0;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b0f      	cmp	r3, #15
 80002c0:	d101      	bne.n	80002c6 <keypad_kbhit+0x3a>
 80002c2:	2300      	movs	r3, #0
 80002c4:	e000      	b.n	80002c8 <keypad_kbhit+0x3c>
 /* no key pressed */
 else
 return 1; /* a key is pressed */ }
 80002c6:	2301      	movs	r3, #1
 80002c8:	4618      	mov	r0, r3
 80002ca:	3708      	adds	r7, #8
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40020800 	.word	0x40020800

080002d4 <delay>:
 /* make a small delay */ void delay(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 int i;
 for (i = 0; i < 20; i++) ; }
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	e002      	b.n	80002e6 <delay+0x12>
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	3301      	adds	r3, #1
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b13      	cmp	r3, #19
 80002ea:	ddf9      	ble.n	80002e0 <delay+0xc>
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002fe:	bf00      	nop
 8000300:	e7fd      	b.n	80002fe <NMI_Handler+0x4>

08000302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <HardFault_Handler+0x4>

0800030a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800030a:	b480      	push	{r7}
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030e:	bf00      	nop
 8000310:	e7fd      	b.n	800030e <MemManage_Handler+0x4>

08000312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000316:	bf00      	nop
 8000318:	e7fd      	b.n	8000316 <BusFault_Handler+0x4>

0800031a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031e:	bf00      	nop
 8000320:	e7fd      	b.n	800031e <UsageFault_Handler+0x4>

08000322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000350:	f000 f83e 	bl	80003d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}

08000358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <SystemInit+0x20>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000362:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <SystemInit+0x20>)
 8000364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800037c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000380:	f7ff ffea 	bl	8000358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003aa:	f000 f825 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ae:	f7ff ff29 	bl	8000204 <main>
  bx  lr    
 80003b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c0:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c8:	20000024 	.word	0x20000024

080003cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <HAL_IncTick+0x20>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <HAL_IncTick+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4413      	add	r3, r2
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_IncTick+0x24>)
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000020 	.word	0x20000020

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	@ (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	@ (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
