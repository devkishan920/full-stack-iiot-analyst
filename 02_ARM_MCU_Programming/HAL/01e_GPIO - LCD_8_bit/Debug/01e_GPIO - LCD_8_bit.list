
01e_GPIO - LCD_8_bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002110  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080022d4  080022d4  000032d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022fc  080022fc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080022fc  080022fc  000032fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002304  08002304  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002304  08002304  00003304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002308  08002308  00003308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800230c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002318  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002318  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c1f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014de  00000000  00000000  0000bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000d140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052f  00000000  00000000  0000d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201bd  00000000  00000000  0000dd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d67  00000000  00000000  0002def4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c492d  00000000  00000000  00036c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac8  00000000  00000000  000fb5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000fd094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080022bc 	.word	0x080022bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080022bc 	.word	0x080022bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <PORTS_init>:


void PORTS_init(void);

void PORTS_init(void)	//	Step 1
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // drive R/W LOW
 80004f8:	2200      	movs	r2, #0
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	4806      	ldr	r0, [pc, #24]	@ (8000518 <PORTS_init+0x24>)
 80004fe:	f000 fdeb 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // drive EN LOW
 8000502:	2200      	movs	r2, #0
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	4804      	ldr	r0, [pc, #16]	@ (8000518 <PORTS_init+0x24>)
 8000508:	f000 fde6 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800050c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000510:	f000 fb44 	bl	8000b9c <HAL_Delay>
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020400 	.word	0x40020400

0800051c <LCD_command>:


void LCD_command(unsigned char command);	//	Step 2

void LCD_command(unsigned char command)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	/* RS = 0, R/W = 0 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // drive R/W LOW
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	@ 0x40
 800052a:	4819      	ldr	r0, [pc, #100]	@ (8000590 <LCD_command+0x74>)
 800052c:	f000 fdd4 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // drive RS LOW
 8000530:	2200      	movs	r2, #0
 8000532:	2120      	movs	r1, #32
 8000534:	4816      	ldr	r0, [pc, #88]	@ (8000590 <LCD_command+0x74>)
 8000536:	f000 fdcf 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800053a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800053e:	f000 fb2d 	bl	8000b9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, 0xFF, GPIO_PIN_RESET); // Clear previous data
 8000542:	2200      	movs	r2, #0
 8000544:	21ff      	movs	r1, #255	@ 0xff
 8000546:	4813      	ldr	r0, [pc, #76]	@ (8000594 <LCD_command+0x78>)
 8000548:	f000 fdc6 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, command, GPIO_PIN_SET); // Put command on data bus
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	b29b      	uxth	r3, r3
 8000550:	2201      	movs	r2, #1
 8000552:	4619      	mov	r1, r3
 8000554:	480f      	ldr	r0, [pc, #60]	@ (8000594 <LCD_command+0x78>)
 8000556:	f000 fdbf 	bl	80010d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	/* pulse E high */
 800055a:	2201      	movs	r2, #1
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	480c      	ldr	r0, [pc, #48]	@ (8000590 <LCD_command+0x74>)
 8000560:	f000 fdba 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_Delay(0);
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fb19 	bl	8000b9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);/* clear E */
 800056a:	2200      	movs	r2, #0
 800056c:	2180      	movs	r1, #128	@ 0x80
 800056e:	4808      	ldr	r0, [pc, #32]	@ (8000590 <LCD_command+0x74>)
 8000570:	f000 fdb2 	bl	80010d8 <HAL_GPIO_WritePin>

	if (command < 4)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	2b03      	cmp	r3, #3
 8000578:	d803      	bhi.n	8000582 <LCD_command+0x66>
		HAL_Delay(2); 				/* command 1 and 2 needs up to 1.64ms */
 800057a:	2002      	movs	r0, #2
 800057c:	f000 fb0e 	bl	8000b9c <HAL_Delay>
	else
		HAL_Delay(1);
}
 8000580:	e002      	b.n	8000588 <LCD_command+0x6c>
		HAL_Delay(1);
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fb0a 	bl	8000b9c <HAL_Delay>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020400 	.word	0x40020400
 8000594:	40020800 	.word	0x40020800

08000598 <LCD_data>:

void LCD_data(char data);	// Step 3

void LCD_data(char data)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // drive R/W LOW
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	@ 0x40
 80005a6:	4814      	ldr	r0, [pc, #80]	@ (80005f8 <LCD_data+0x60>)
 80005a8:	f000 fd96 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // drive RS HIGH
 80005ac:	2201      	movs	r2, #1
 80005ae:	2120      	movs	r1, #32
 80005b0:	4811      	ldr	r0, [pc, #68]	@ (80005f8 <LCD_data+0x60>)
 80005b2:	f000 fd91 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 faf0 	bl	8000b9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, 0xFF, GPIO_PIN_RESET); // Clear previous data
 80005bc:	2200      	movs	r2, #0
 80005be:	21ff      	movs	r1, #255	@ 0xff
 80005c0:	480e      	ldr	r0, [pc, #56]	@ (80005fc <LCD_data+0x64>)
 80005c2:	f000 fd89 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, data, GPIO_PIN_SET); // Put command on data bus
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	2201      	movs	r2, #1
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	@ (80005fc <LCD_data+0x64>)
 80005d0:	f000 fd82 	bl	80010d8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	/* pulse E high */
 80005d4:	2201      	movs	r2, #1
 80005d6:	2180      	movs	r1, #128	@ 0x80
 80005d8:	4807      	ldr	r0, [pc, #28]	@ (80005f8 <LCD_data+0x60>)
 80005da:	f000 fd7d 	bl	80010d8 <HAL_GPIO_WritePin>
	HAL_Delay(0);
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 fadc 	bl	8000b9c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);/* clear E */
 80005e4:	2200      	movs	r2, #0
 80005e6:	2180      	movs	r1, #128	@ 0x80
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <LCD_data+0x60>)
 80005ea:	f000 fd75 	bl	80010d8 <HAL_GPIO_WritePin>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40020400 	.word	0x40020400
 80005fc:	40020800 	.word	0x40020800

08000600 <LCD_init>:

void LCD_init(void);	// Step 4

void LCD_init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
		LCD_command(0x30);
 8000604:	2030      	movs	r0, #48	@ 0x30
 8000606:	f7ff ff89 	bl	800051c <LCD_command>
		HAL_Delay(100);
 800060a:	2064      	movs	r0, #100	@ 0x64
 800060c:	f000 fac6 	bl	8000b9c <HAL_Delay>
		LCD_command(0x38);		/*set 8-bit data, 2-line, 5x7 font */
 8000610:	2038      	movs	r0, #56	@ 0x38
 8000612:	f7ff ff83 	bl	800051c <LCD_command>
		LCD_command(0x06);		/*move cursor right after each char */
 8000616:	2006      	movs	r0, #6
 8000618:	f7ff ff80 	bl	800051c <LCD_command>
		LCD_command(0x01);		/*clear screen, move cursor to home */
 800061c:	2001      	movs	r0, #1
 800061e:	f7ff ff7d 	bl	800051c <LCD_command>
		LCD_command(0x0F);		/*turn on display, cursor blinking */
 8000622:	200f      	movs	r0, #15
 8000624:	f7ff ff7a 	bl	800051c <LCD_command>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <LCD_string>:

void LCD_string(char []);

void LCD_string(char str[])
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	e009      	b.n	800064e <LCD_string+0x22>
	{
	    LCD_data(str[i]);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffa8 	bl	8000598 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	3301      	adds	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1ef      	bne.n	800063a <LCD_string+0xe>
	}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <main>:

int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  HAL_Init();
 8000668:	f000 fa26 	bl	8000ab8 <HAL_Init>
  SystemClock_Config();
 800066c:	f000 f814 	bl	8000698 <SystemClock_Config>
  MX_GPIO_Init();
 8000670:	f000 f8aa 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f87e 	bl	8000774 <MX_USART2_UART_Init>

  PORTS_init();
 8000678:	f7ff ff3c 	bl	80004f4 <PORTS_init>
  LCD_init();
 800067c:	f7ff ffc0 	bl	8000600 <LCD_init>

  while (1)
  {
	  LCD_string("Hello World\0");
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <main+0x30>)
 8000682:	f7ff ffd3 	bl	800062c <LCD_string>
	  HAL_Delay(500);
 8000686:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068a:	f000 fa87 	bl	8000b9c <HAL_Delay>
	  LCD_string("Hello World\0");
 800068e:	bf00      	nop
 8000690:	e7f6      	b.n	8000680 <main+0x1c>
 8000692:	bf00      	nop
 8000694:	080022d4 	.word	0x080022d4

08000698 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	@ 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fddc 	bl	8002264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a29      	ldr	r2, [pc, #164]	@ (800076c <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	@ (8000770 <SystemClock_Config+0xd8>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	@ (8000770 <SystemClock_Config+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000714:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f83a 	bl	80017a0 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 f8df 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fcda 	bl	800110c <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 f8c9 	bl	80008f4 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 fa96 	bl	8001cdc <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f89d 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000028 	.word	0x20000028
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b40      	ldr	r3, [pc, #256]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a3f      	ldr	r2, [pc, #252]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b3d      	ldr	r3, [pc, #244]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b39      	ldr	r3, [pc, #228]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a38      	ldr	r2, [pc, #224]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b36      	ldr	r3, [pc, #216]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b32      	ldr	r3, [pc, #200]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a31      	ldr	r2, [pc, #196]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2a      	ldr	r2, [pc, #168]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800084e:	2200      	movs	r2, #0
 8000850:	21ff      	movs	r1, #255	@ 0xff
 8000852:	4825      	ldr	r0, [pc, #148]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000854:	f000 fc40 	bl	80010d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2120      	movs	r1, #32
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <MX_GPIO_Init+0x124>)
 800085e:	f000 fc3b 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	21e0      	movs	r1, #224	@ 0xe0
 8000866:	4822      	ldr	r0, [pc, #136]	@ (80008f0 <MX_GPIO_Init+0x128>)
 8000868:	f000 fc36 	bl	80010d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000872:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4819      	ldr	r0, [pc, #100]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000884:	f000 fa94 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000888:	23ff      	movs	r3, #255	@ 0xff
 800088a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80008a0:	f000 fa86 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	480c      	ldr	r0, [pc, #48]	@ (80008ec <MX_GPIO_Init+0x124>)
 80008bc:	f000 fa78 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008c0:	23e0      	movs	r3, #224	@ 0xe0
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	@ (80008f0 <MX_GPIO_Init+0x128>)
 80008d8:	f000 fa6a 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	@ 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	@ (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	@ (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fa02 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	@ (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000980:	6413      	str	r3, [r2, #64]	@ 0x40
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_UART_MspInit+0x8c>)
 80009c6:	f000 f9f3 	bl	8000db0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	@ 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f891 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fbef 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fde5 	bl	8000664 <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa8:	0800230c 	.word	0x0800230c
  ldr r2, =_sbss
 8000aac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ab0:	20000074 	.word	0x20000074

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <HAL_Init+0x40>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_Init+0x40>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	@ (8000af8 <HAL_Init+0x40>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f931 	bl	8000d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff ff08 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f93b 	bl	8000d96 <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f911 	bl	8000d5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	@ (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	@ (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000070 	.word	0x20000070

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000070 	.word	0x20000070

08000b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba4:	f7ff ffee 	bl	8000b84 <HAL_GetTick>
 8000ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb4:	d005      	beq.n	8000bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_Delay+0x44>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc2:	bf00      	nop
 8000bc4:	f7ff ffde 	bl	8000b84 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d8f7      	bhi.n	8000bc4 <HAL_Delay+0x28>
  {
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008

08000be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c00:	4013      	ands	r3, r2
 8000c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c16:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <__NVIC_SetPriorityGrouping+0x44>)
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	60d3      	str	r3, [r2, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <__NVIC_GetPriorityGrouping+0x18>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	f003 0307 	and.w	r3, r3, #7
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d14:	d301      	bcc.n	8000d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00f      	b.n	8000d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <SysTick_Config+0x40>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d22:	210f      	movs	r1, #15
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f7ff ff8e 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	@ (8000d44 <SysTick_Config+0x40>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <SysTick_Config+0x40>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff47 	bl	8000be4 <__NVIC_SetPriorityGrouping>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
 8000d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d70:	f7ff ff5c 	bl	8000c2c <__NVIC_GetPriorityGrouping>
 8000d74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	6978      	ldr	r0, [r7, #20]
 8000d7c:	f7ff ff8e 	bl	8000c9c <NVIC_EncodePriority>
 8000d80:	4602      	mov	r2, r0
 8000d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d86:	4611      	mov	r1, r2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff5d 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffb0 	bl	8000d04 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e165      	b.n	8001098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8154 	bne.w	8001092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80ae 	beq.w	8001092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80010b0 <HAL_GPIO_Init+0x300>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	@ (80010b0 <HAL_GPIO_Init+0x300>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b5a      	ldr	r3, [pc, #360]	@ (80010b0 <HAL_GPIO_Init+0x300>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a58      	ldr	r2, [pc, #352]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4f      	ldr	r2, [pc, #316]	@ (80010b8 <HAL_GPIO_Init+0x308>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d025      	beq.n	8000fca <HAL_GPIO_Init+0x21a>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4e      	ldr	r2, [pc, #312]	@ (80010bc <HAL_GPIO_Init+0x30c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01f      	beq.n	8000fc6 <HAL_GPIO_Init+0x216>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4d      	ldr	r2, [pc, #308]	@ (80010c0 <HAL_GPIO_Init+0x310>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d019      	beq.n	8000fc2 <HAL_GPIO_Init+0x212>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4c      	ldr	r2, [pc, #304]	@ (80010c4 <HAL_GPIO_Init+0x314>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d013      	beq.n	8000fbe <HAL_GPIO_Init+0x20e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4b      	ldr	r2, [pc, #300]	@ (80010c8 <HAL_GPIO_Init+0x318>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d00d      	beq.n	8000fba <HAL_GPIO_Init+0x20a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80010cc <HAL_GPIO_Init+0x31c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d007      	beq.n	8000fb6 <HAL_GPIO_Init+0x206>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a49      	ldr	r2, [pc, #292]	@ (80010d0 <HAL_GPIO_Init+0x320>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_GPIO_Init+0x202>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e00c      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e00a      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fba:	2304      	movs	r3, #4
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x21c>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4935      	ldr	r1, [pc, #212]	@ (80010b4 <HAL_GPIO_Init+0x304>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b3a      	ldr	r3, [pc, #232]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100e:	4a31      	ldr	r2, [pc, #196]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001014:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001038:	4a26      	ldr	r2, [pc, #152]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103e:	4b25      	ldr	r3, [pc, #148]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001062:	4a1c      	ldr	r2, [pc, #112]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108c:	4a11      	ldr	r2, [pc, #68]	@ (80010d4 <HAL_GPIO_Init+0x324>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	f67f ae96 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	@ 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40021400 	.word	0x40021400
 80010d0:	40021800 	.word	0x40021800
 80010d4:	40013c00 	.word	0x40013c00

080010d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
 80010e4:	4613      	mov	r3, r2
 80010e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f4:	e003      	b.n	80010fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	041a      	lsls	r2, r3, #16
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	619a      	str	r2, [r3, #24]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0cc      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4b68      	ldr	r3, [pc, #416]	@ (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d90c      	bls.n	8001148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b65      	ldr	r3, [pc, #404]	@ (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001136:	4b63      	ldr	r3, [pc, #396]	@ (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d001      	beq.n	8001148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0b8      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d020      	beq.n	8001196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001160:	4b59      	ldr	r3, [pc, #356]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800116a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001178:	4b53      	ldr	r3, [pc, #332]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	4a52      	ldr	r2, [pc, #328]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001184:	4b50      	ldr	r3, [pc, #320]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	494d      	ldr	r1, [pc, #308]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d044      	beq.n	800122c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d107      	bne.n	80011ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	4b47      	ldr	r3, [pc, #284]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d119      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e07f      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d003      	beq.n	80011ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d107      	bne.n	80011da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ca:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e06f      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011da:	4b3b      	ldr	r3, [pc, #236]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e067      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ea:	4b37      	ldr	r3, [pc, #220]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f023 0203 	bic.w	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4934      	ldr	r1, [pc, #208]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fcc2 	bl	8000b84 <HAL_GetTick>
 8001200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	e00a      	b.n	800121a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f7ff fcbe 	bl	8000b84 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001212:	4293      	cmp	r3, r2
 8001214:	d901      	bls.n	800121a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e04f      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121a:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 020c 	and.w	r2, r3, #12
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	429a      	cmp	r2, r3
 800122a:	d1eb      	bne.n	8001204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800122c:	4b25      	ldr	r3, [pc, #148]	@ (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d20c      	bcs.n	8001254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d001      	beq.n	8001254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e032      	b.n	80012ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d008      	beq.n	8001272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001260:	4b19      	ldr	r3, [pc, #100]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4916      	ldr	r1, [pc, #88]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	4313      	orrs	r3, r2
 8001270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800127e:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	490e      	ldr	r1, [pc, #56]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001292:	f000 f855 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 8001296:	4602      	mov	r2, r0
 8001298:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	490a      	ldr	r1, [pc, #40]	@ (80012cc <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	5ccb      	ldrb	r3, [r1, r3]
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	4a09      	ldr	r2, [pc, #36]	@ (80012d0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_RCC_ClockConfig+0x1c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fc22 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00
 80012c8:	40023800 	.word	0x40023800
 80012cc:	080022e4 	.word	0x080022e4
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_RCC_GetHCLKFreq+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000000 	.word	0x20000000

080012f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012f4:	f7ff fff0 	bl	80012d8 <HAL_RCC_GetHCLKFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0a9b      	lsrs	r3, r3, #10
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	4903      	ldr	r1, [pc, #12]	@ (8001314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	080022f4 	.word	0x080022f4

08001318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800131c:	f7ff ffdc 	bl	80012d8 <HAL_RCC_GetHCLKFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0b5b      	lsrs	r3, r3, #13
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4903      	ldr	r1, [pc, #12]	@ (800133c <HAL_RCC_GetPCLK2Freq+0x24>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	080022f4 	.word	0x080022f4

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b0ae      	sub	sp, #184	@ 0xb8
 8001346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001366:	4bcb      	ldr	r3, [pc, #812]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b0c      	cmp	r3, #12
 8001370:	f200 8206 	bhi.w	8001780 <HAL_RCC_GetSysClockFreq+0x440>
 8001374:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	080013b1 	.word	0x080013b1
 8001380:	08001781 	.word	0x08001781
 8001384:	08001781 	.word	0x08001781
 8001388:	08001781 	.word	0x08001781
 800138c:	080013b9 	.word	0x080013b9
 8001390:	08001781 	.word	0x08001781
 8001394:	08001781 	.word	0x08001781
 8001398:	08001781 	.word	0x08001781
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	08001781 	.word	0x08001781
 80013a4:	08001781 	.word	0x08001781
 80013a8:	08001781 	.word	0x08001781
 80013ac:	080015b1 	.word	0x080015b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x358>)
 80013b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013b6:	e1e7      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b8:	4bb8      	ldr	r3, [pc, #736]	@ (800169c <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013be:	e1e3      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c0:	4bb4      	ldr	r3, [pc, #720]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d071      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d8:	4bae      	ldr	r3, [pc, #696]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013fe:	4622      	mov	r2, r4
 8001400:	462b      	mov	r3, r5
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	0159      	lsls	r1, r3, #5
 800140c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001410:	0150      	lsls	r0, r2, #5
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4621      	mov	r1, r4
 8001418:	1a51      	subs	r1, r2, r1
 800141a:	6439      	str	r1, [r7, #64]	@ 0x40
 800141c:	4629      	mov	r1, r5
 800141e:	eb63 0301 	sbc.w	r3, r3, r1
 8001422:	647b      	str	r3, [r7, #68]	@ 0x44
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001430:	4649      	mov	r1, r9
 8001432:	018b      	lsls	r3, r1, #6
 8001434:	4641      	mov	r1, r8
 8001436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800143a:	4641      	mov	r1, r8
 800143c:	018a      	lsls	r2, r1, #6
 800143e:	4641      	mov	r1, r8
 8001440:	1a51      	subs	r1, r2, r1
 8001442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001444:	4649      	mov	r1, r9
 8001446:	eb63 0301 	sbc.w	r3, r3, r1
 800144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001458:	4649      	mov	r1, r9
 800145a:	00cb      	lsls	r3, r1, #3
 800145c:	4641      	mov	r1, r8
 800145e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001462:	4641      	mov	r1, r8
 8001464:	00ca      	lsls	r2, r1, #3
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	4603      	mov	r3, r0
 800146c:	4622      	mov	r2, r4
 800146e:	189b      	adds	r3, r3, r2
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
 8001472:	462b      	mov	r3, r5
 8001474:	460a      	mov	r2, r1
 8001476:	eb42 0303 	adc.w	r3, r2, r3
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001488:	4629      	mov	r1, r5
 800148a:	024b      	lsls	r3, r1, #9
 800148c:	4621      	mov	r1, r4
 800148e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001492:	4621      	mov	r1, r4
 8001494:	024a      	lsls	r2, r1, #9
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014ac:	f7fe feaa 	bl	8000204 <__aeabi_uldivmod>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4613      	mov	r3, r2
 80014b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014ba:	e067      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b75      	ldr	r3, [pc, #468]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014d6:	2300      	movs	r3, #0
 80014d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001510:	4649      	mov	r1, r9
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4641      	mov	r1, r8
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4641      	mov	r1, r8
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4641      	mov	r1, r8
 8001520:	ebb2 0a01 	subs.w	sl, r2, r1
 8001524:	4649      	mov	r1, r9
 8001526:	eb63 0b01 	sbc.w	fp, r3, r1
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800153a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800153e:	4692      	mov	sl, r2
 8001540:	469b      	mov	fp, r3
 8001542:	4623      	mov	r3, r4
 8001544:	eb1a 0303 	adds.w	r3, sl, r3
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	462b      	mov	r3, r5
 800154c:	eb4b 0303 	adc.w	r3, fp, r3
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800155e:	4629      	mov	r1, r5
 8001560:	028b      	lsls	r3, r1, #10
 8001562:	4621      	mov	r1, r4
 8001564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001568:	4621      	mov	r1, r4
 800156a:	028a      	lsls	r2, r1, #10
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001574:	2200      	movs	r2, #0
 8001576:	673b      	str	r3, [r7, #112]	@ 0x70
 8001578:	677a      	str	r2, [r7, #116]	@ 0x74
 800157a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800157e:	f7fe fe41 	bl	8000204 <__aeabi_uldivmod>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4613      	mov	r3, r2
 8001588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800159e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ae:	e0eb      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d06b      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	2200      	movs	r2, #0
 80015d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015da:	663b      	str	r3, [r7, #96]	@ 0x60
 80015dc:	2300      	movs	r3, #0
 80015de:	667b      	str	r3, [r7, #100]	@ 0x64
 80015e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015e4:	4622      	mov	r2, r4
 80015e6:	462b      	mov	r3, r5
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	0159      	lsls	r1, r3, #5
 80015f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f6:	0150      	lsls	r0, r2, #5
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4621      	mov	r1, r4
 80015fe:	1a51      	subs	r1, r2, r1
 8001600:	61b9      	str	r1, [r7, #24]
 8001602:	4629      	mov	r1, r5
 8001604:	eb63 0301 	sbc.w	r3, r3, r1
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001616:	4659      	mov	r1, fp
 8001618:	018b      	lsls	r3, r1, #6
 800161a:	4651      	mov	r1, sl
 800161c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001620:	4651      	mov	r1, sl
 8001622:	018a      	lsls	r2, r1, #6
 8001624:	4651      	mov	r1, sl
 8001626:	ebb2 0801 	subs.w	r8, r2, r1
 800162a:	4659      	mov	r1, fp
 800162c:	eb63 0901 	sbc.w	r9, r3, r1
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001644:	4690      	mov	r8, r2
 8001646:	4699      	mov	r9, r3
 8001648:	4623      	mov	r3, r4
 800164a:	eb18 0303 	adds.w	r3, r8, r3
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	462b      	mov	r3, r5
 8001652:	eb49 0303 	adc.w	r3, r9, r3
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001664:	4629      	mov	r1, r5
 8001666:	024b      	lsls	r3, r1, #9
 8001668:	4621      	mov	r1, r4
 800166a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800166e:	4621      	mov	r1, r4
 8001670:	024a      	lsls	r2, r1, #9
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800167a:	2200      	movs	r2, #0
 800167c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800167e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001684:	f7fe fdbe 	bl	8000204 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001692:	e065      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x420>
 8001694:	40023800 	.word	0x40023800
 8001698:	00f42400 	.word	0x00f42400
 800169c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x458>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	4611      	mov	r1, r2
 80016ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016b2:	2300      	movs	r3, #0
 80016b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80016b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016ba:	4642      	mov	r2, r8
 80016bc:	464b      	mov	r3, r9
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4641      	mov	r1, r8
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0301 	sbc.w	r3, r3, r1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016ec:	4659      	mov	r1, fp
 80016ee:	018b      	lsls	r3, r1, #6
 80016f0:	4651      	mov	r1, sl
 80016f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f6:	4651      	mov	r1, sl
 80016f8:	018a      	lsls	r2, r1, #6
 80016fa:	4651      	mov	r1, sl
 80016fc:	1a54      	subs	r4, r2, r1
 80016fe:	4659      	mov	r1, fp
 8001700:	eb63 0501 	sbc.w	r5, r3, r1
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	00eb      	lsls	r3, r5, #3
 800170e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001712:	00e2      	lsls	r2, r4, #3
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	4643      	mov	r3, r8
 800171a:	18e3      	adds	r3, r4, r3
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	464b      	mov	r3, r9
 8001720:	eb45 0303 	adc.w	r3, r5, r3
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001732:	4629      	mov	r1, r5
 8001734:	028b      	lsls	r3, r1, #10
 8001736:	4621      	mov	r1, r4
 8001738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800173c:	4621      	mov	r1, r4
 800173e:	028a      	lsls	r2, r1, #10
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001748:	2200      	movs	r2, #0
 800174a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800174c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800174e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001752:	f7fe fd57 	bl	8000204 <__aeabi_uldivmod>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4613      	mov	r3, r2
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x458>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0f1b      	lsrs	r3, r3, #28
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800176e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800177e:	e003      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800178c:	4618      	mov	r0, r3
 800178e:	37b8      	adds	r7, #184	@ 0xb8
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400

080017a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e28d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8083 	beq.w	80018c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017c0:	4b94      	ldr	r3, [pc, #592]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d019      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017cc:	4b91      	ldr	r3, [pc, #580]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
        || \
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e4:	d00c      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b88      	ldr	r3, [pc, #544]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017fe:	d10b      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4b84      	ldr	r3, [pc, #528]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d05b      	beq.n	80018c4 <HAL_RCC_OscConfig+0x124>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d157      	bne.n	80018c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e25a      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x90>
 8001822:	4b7c      	ldr	r3, [pc, #496]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7b      	ldr	r2, [pc, #492]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xb4>
 800183a:	4b76      	ldr	r3, [pc, #472]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a72      	ldr	r2, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001854:	4b6f      	ldr	r3, [pc, #444]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6e      	ldr	r2, [pc, #440]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6c      	ldr	r3, [pc, #432]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6b      	ldr	r2, [pc, #428]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f986 	bl	8000b84 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f982 	bl	8000b84 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e21f      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b61      	ldr	r3, [pc, #388]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xdc>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f972 	bl	8000b84 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f96e 	bl	8000b84 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	@ 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e20b      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x104>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06f      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018d2:	4b50      	ldr	r3, [pc, #320]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018de:	4b4d      	ldr	r3, [pc, #308]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b47      	ldr	r3, [pc, #284]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1d3      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4937      	ldr	r1, [pc, #220]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f91b 	bl	8000b84 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff f917 	bl	8000b84 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1b4      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4925      	ldr	r1, [pc, #148]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f8fa 	bl	8000b84 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff f8f6 	bl	8000b84 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e193      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f8da 	bl	8000b84 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f8d6 	bl	8000b84 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e173      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x234>
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f8c3 	bl	8000b84 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	e00e      	b.n	8001a20 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f8bf 	bl	8000b84 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d907      	bls.n	8001a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e15c      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470000 	.word	0x42470000
 8001a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b8a      	ldr	r3, [pc, #552]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ea      	bne.n	8001a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8097 	beq.w	8001b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b83      	ldr	r3, [pc, #524]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	4a7e      	ldr	r2, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4b79      	ldr	r3, [pc, #484]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a76:	4b76      	ldr	r3, [pc, #472]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f87f 	bl	8000b84 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f87b 	bl	8000b84 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e118      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x31e>
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x340>
 8001ac6:	4b61      	ldr	r3, [pc, #388]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae4:	4a59      	ldr	r2, [pc, #356]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aec:	4b57      	ldr	r3, [pc, #348]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f840 	bl	8000b84 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f83c 	bl	8000b84 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0d7      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCC_OscConfig+0x368>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f82a 	bl	8000b84 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f826 	bl	8000b84 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0c1      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	4a3a      	ldr	r2, [pc, #232]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ad 	beq.w	8001ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d060      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d145      	bne.n	8001c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7fe fffa 	bl	8000b84 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b94:	f7fe fff6 	bl	8000b84 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e093      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	071b      	lsls	r3, r3, #28
 8001bde:	491b      	ldr	r1, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7fe ffcb 	bl	8000b84 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe ffc7 	bl	8000b84 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e064      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x452>
 8001c10:	e05c      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ffb4 	bl	8000b84 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ffb0 	bl	8000b84 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e04d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x480>
 8001c3e:	e045      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e040      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <HAL_RCC_OscConfig+0x538>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d129      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d122      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d119      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e042      	b.n	8001d74 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe fe24 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	@ 0x24
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f82b 	bl	8001d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d80:	b0c0      	sub	sp, #256	@ 0x100
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	68d9      	ldr	r1, [r3, #12]
 8001d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	ea40 0301 	orr.w	r3, r0, r1
 8001da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001dd4:	f021 010c 	bic.w	r1, r1, #12
 8001dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001de2:	430b      	orrs	r3, r1
 8001de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df6:	6999      	ldr	r1, [r3, #24]
 8001df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	ea40 0301 	orr.w	r3, r0, r1
 8001e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8002048 <UART_SetConfig+0x2cc>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d005      	beq.n	8001e1c <UART_SetConfig+0xa0>
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b8d      	ldr	r3, [pc, #564]	@ (800204c <UART_SetConfig+0x2d0>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d104      	bne.n	8001e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e1c:	f7ff fa7c 	bl	8001318 <HAL_RCC_GetPCLK2Freq>
 8001e20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001e24:	e003      	b.n	8001e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e26:	f7ff fa63 	bl	80012f0 <HAL_RCC_GetPCLK1Freq>
 8001e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e38:	f040 810c 	bne.w	8002054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e40:	2200      	movs	r2, #0
 8001e42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	1891      	adds	r1, r2, r2
 8001e54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e56:	415b      	adcs	r3, r3
 8001e58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e5e:	4621      	mov	r1, r4
 8001e60:	eb12 0801 	adds.w	r8, r2, r1
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb43 0901 	adc.w	r9, r3, r1
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e7e:	4690      	mov	r8, r2
 8001e80:	4699      	mov	r9, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	eb18 0303 	adds.w	r3, r8, r3
 8001e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	eb49 0303 	adc.w	r3, r9, r3
 8001e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001eaa:	460b      	mov	r3, r1
 8001eac:	18db      	adds	r3, r3, r3
 8001eae:	653b      	str	r3, [r7, #80]	@ 0x50
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	eb42 0303 	adc.w	r3, r2, r3
 8001eb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ec0:	f7fe f9a0 	bl	8000204 <__aeabi_uldivmod>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4b61      	ldr	r3, [pc, #388]	@ (8002050 <UART_SetConfig+0x2d4>)
 8001eca:	fba3 2302 	umull	r2, r3, r3, r2
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	011c      	lsls	r4, r3, #4
 8001ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001edc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ee4:	4642      	mov	r2, r8
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	1891      	adds	r1, r2, r2
 8001eea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001eec:	415b      	adcs	r3, r3
 8001eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	eb43 0b01 	adc.w	fp, r3, r1
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f14:	4692      	mov	sl, r2
 8001f16:	469b      	mov	fp, r3
 8001f18:	4643      	mov	r3, r8
 8001f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8001f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f22:	464b      	mov	r3, r9
 8001f24:	eb4b 0303 	adc.w	r3, fp, r3
 8001f28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f40:	460b      	mov	r3, r1
 8001f42:	18db      	adds	r3, r3, r3
 8001f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f46:	4613      	mov	r3, r2
 8001f48:	eb42 0303 	adc.w	r3, r2, r3
 8001f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f56:	f7fe f955 	bl	8000204 <__aeabi_uldivmod>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <UART_SetConfig+0x2d4>)
 8001f62:	fba3 2301 	umull	r2, r3, r3, r1
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2264      	movs	r2, #100	@ 0x64
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	1acb      	subs	r3, r1, r3
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f76:	4b36      	ldr	r3, [pc, #216]	@ (8002050 <UART_SetConfig+0x2d4>)
 8001f78:	fba3 2302 	umull	r2, r3, r3, r2
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f84:	441c      	add	r4, r3
 8001f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f98:	4642      	mov	r2, r8
 8001f9a:	464b      	mov	r3, r9
 8001f9c:	1891      	adds	r1, r2, r2
 8001f9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fa0:	415b      	adcs	r3, r3
 8001fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001fa8:	4641      	mov	r1, r8
 8001faa:	1851      	adds	r1, r2, r1
 8001fac:	6339      	str	r1, [r7, #48]	@ 0x30
 8001fae:	4649      	mov	r1, r9
 8001fb0:	414b      	adcs	r3, r1
 8001fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001fc0:	4659      	mov	r1, fp
 8001fc2:	00cb      	lsls	r3, r1, #3
 8001fc4:	4651      	mov	r1, sl
 8001fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fca:	4651      	mov	r1, sl
 8001fcc:	00ca      	lsls	r2, r1, #3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	189b      	adds	r3, r3, r2
 8001fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fdc:	464b      	mov	r3, r9
 8001fde:	460a      	mov	r2, r1
 8001fe0:	eb42 0303 	adc.w	r3, r2, r3
 8001fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	18db      	adds	r3, r3, r3
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002002:	4613      	mov	r3, r2
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800200a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800200e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002012:	f7fe f8f7 	bl	8000204 <__aeabi_uldivmod>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <UART_SetConfig+0x2d4>)
 800201c:	fba3 1302 	umull	r1, r3, r3, r2
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	2164      	movs	r1, #100	@ 0x64
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	3332      	adds	r3, #50	@ 0x32
 800202e:	4a08      	ldr	r2, [pc, #32]	@ (8002050 <UART_SetConfig+0x2d4>)
 8002030:	fba2 2303 	umull	r2, r3, r2, r3
 8002034:	095b      	lsrs	r3, r3, #5
 8002036:	f003 0207 	and.w	r2, r3, #7
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4422      	add	r2, r4
 8002042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002044:	e106      	b.n	8002254 <UART_SetConfig+0x4d8>
 8002046:	bf00      	nop
 8002048:	40011000 	.word	0x40011000
 800204c:	40011400 	.word	0x40011400
 8002050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002058:	2200      	movs	r2, #0
 800205a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800205e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002066:	4642      	mov	r2, r8
 8002068:	464b      	mov	r3, r9
 800206a:	1891      	adds	r1, r2, r2
 800206c:	6239      	str	r1, [r7, #32]
 800206e:	415b      	adcs	r3, r3
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
 8002072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002076:	4641      	mov	r1, r8
 8002078:	1854      	adds	r4, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb43 0501 	adc.w	r5, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	00eb      	lsls	r3, r5, #3
 800208a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800208e:	00e2      	lsls	r2, r4, #3
 8002090:	4614      	mov	r4, r2
 8002092:	461d      	mov	r5, r3
 8002094:	4643      	mov	r3, r8
 8002096:	18e3      	adds	r3, r4, r3
 8002098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800209c:	464b      	mov	r3, r9
 800209e:	eb45 0303 	adc.w	r3, r5, r3
 80020a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80020c2:	4629      	mov	r1, r5
 80020c4:	008b      	lsls	r3, r1, #2
 80020c6:	4621      	mov	r1, r4
 80020c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020cc:	4621      	mov	r1, r4
 80020ce:	008a      	lsls	r2, r1, #2
 80020d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020d4:	f7fe f896 	bl	8000204 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4b60      	ldr	r3, [pc, #384]	@ (8002260 <UART_SetConfig+0x4e4>)
 80020de:	fba3 2302 	umull	r2, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	011c      	lsls	r4, r3, #4
 80020e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	61b9      	str	r1, [r7, #24]
 8002100:	415b      	adcs	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002108:	4641      	mov	r1, r8
 800210a:	1851      	adds	r1, r2, r1
 800210c:	6139      	str	r1, [r7, #16]
 800210e:	4649      	mov	r1, r9
 8002110:	414b      	adcs	r3, r1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002120:	4659      	mov	r1, fp
 8002122:	00cb      	lsls	r3, r1, #3
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800212a:	4651      	mov	r1, sl
 800212c:	00ca      	lsls	r2, r1, #3
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	4603      	mov	r3, r0
 8002134:	4642      	mov	r2, r8
 8002136:	189b      	adds	r3, r3, r2
 8002138:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800213c:	464b      	mov	r3, r9
 800213e:	460a      	mov	r2, r1
 8002140:	eb42 0303 	adc.w	r3, r2, r3
 8002144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002152:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002160:	4649      	mov	r1, r9
 8002162:	008b      	lsls	r3, r1, #2
 8002164:	4641      	mov	r1, r8
 8002166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800216a:	4641      	mov	r1, r8
 800216c:	008a      	lsls	r2, r1, #2
 800216e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002172:	f7fe f847 	bl	8000204 <__aeabi_uldivmod>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4611      	mov	r1, r2
 800217c:	4b38      	ldr	r3, [pc, #224]	@ (8002260 <UART_SetConfig+0x4e4>)
 800217e:	fba3 2301 	umull	r2, r3, r3, r1
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2264      	movs	r2, #100	@ 0x64
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	1acb      	subs	r3, r1, r3
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	3332      	adds	r3, #50	@ 0x32
 8002190:	4a33      	ldr	r2, [pc, #204]	@ (8002260 <UART_SetConfig+0x4e4>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219c:	441c      	add	r4, r3
 800219e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021a2:	2200      	movs	r2, #0
 80021a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80021a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80021a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80021ac:	4642      	mov	r2, r8
 80021ae:	464b      	mov	r3, r9
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	415b      	adcs	r3, r3
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021bc:	4641      	mov	r1, r8
 80021be:	1851      	adds	r1, r2, r1
 80021c0:	6039      	str	r1, [r7, #0]
 80021c2:	4649      	mov	r1, r9
 80021c4:	414b      	adcs	r3, r1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021d4:	4659      	mov	r1, fp
 80021d6:	00cb      	lsls	r3, r1, #3
 80021d8:	4651      	mov	r1, sl
 80021da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021de:	4651      	mov	r1, sl
 80021e0:	00ca      	lsls	r2, r1, #3
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	4642      	mov	r2, r8
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ee:	464b      	mov	r3, r9
 80021f0:	460a      	mov	r2, r1
 80021f2:	eb42 0303 	adc.w	r3, r2, r3
 80021f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	663b      	str	r3, [r7, #96]	@ 0x60
 8002202:	667a      	str	r2, [r7, #100]	@ 0x64
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002210:	4649      	mov	r1, r9
 8002212:	008b      	lsls	r3, r1, #2
 8002214:	4641      	mov	r1, r8
 8002216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800221a:	4641      	mov	r1, r8
 800221c:	008a      	lsls	r2, r1, #2
 800221e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002222:	f7fd ffef 	bl	8000204 <__aeabi_uldivmod>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <UART_SetConfig+0x4e4>)
 800222c:	fba3 1302 	umull	r1, r3, r3, r2
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	2164      	movs	r1, #100	@ 0x64
 8002234:	fb01 f303 	mul.w	r3, r1, r3
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	3332      	adds	r3, #50	@ 0x32
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <UART_SetConfig+0x4e4>)
 8002240:	fba2 2303 	umull	r2, r3, r2, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4422      	add	r2, r4
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800225a:	46bd      	mov	sp, r7
 800225c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002260:	51eb851f 	.word	0x51eb851f

08002264 <memset>:
 8002264:	4402      	add	r2, r0
 8002266:	4603      	mov	r3, r0
 8002268:	4293      	cmp	r3, r2
 800226a:	d100      	bne.n	800226e <memset+0xa>
 800226c:	4770      	bx	lr
 800226e:	f803 1b01 	strb.w	r1, [r3], #1
 8002272:	e7f9      	b.n	8002268 <memset+0x4>

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	4d0d      	ldr	r5, [pc, #52]	@ (80022ac <__libc_init_array+0x38>)
 8002278:	4c0d      	ldr	r4, [pc, #52]	@ (80022b0 <__libc_init_array+0x3c>)
 800227a:	1b64      	subs	r4, r4, r5
 800227c:	10a4      	asrs	r4, r4, #2
 800227e:	2600      	movs	r6, #0
 8002280:	42a6      	cmp	r6, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	4d0b      	ldr	r5, [pc, #44]	@ (80022b4 <__libc_init_array+0x40>)
 8002286:	4c0c      	ldr	r4, [pc, #48]	@ (80022b8 <__libc_init_array+0x44>)
 8002288:	f000 f818 	bl	80022bc <_init>
 800228c:	1b64      	subs	r4, r4, r5
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	2600      	movs	r6, #0
 8002292:	42a6      	cmp	r6, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f855 3b04 	ldr.w	r3, [r5], #4
 800229c:	4798      	blx	r3
 800229e:	3601      	adds	r6, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a6:	4798      	blx	r3
 80022a8:	3601      	adds	r6, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002304 	.word	0x08002304
 80022b0:	08002304 	.word	0x08002304
 80022b4:	08002304 	.word	0x08002304
 80022b8:	08002308 	.word	0x08002308

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
