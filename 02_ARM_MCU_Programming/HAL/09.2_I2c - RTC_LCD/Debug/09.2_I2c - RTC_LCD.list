
09.2_I2c - RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004968  08004968  00005968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d4  080049d4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049dc  080049dc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049dc  080049dc  000059dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049e0  080049e0  000059e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080049e4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08004a40  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08004a40  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d589  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de4  00000000  00000000  00013615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00015400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000969  00000000  00000000  00016008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002221a  00000000  00000000  00016971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc64  00000000  00000000  00038b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1151  00000000  00000000  000487ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003794  00000000  00000000  00119984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004950 	.word	0x08004950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004950 	.word	0x08004950

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <lcd_send_cmd>:
static void MX_RTC_Init(void);

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f023 030f 	bic.w	r3, r3, #15
 80005b0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	f043 030c 	orr.w	r3, r3, #12
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	f043 030c 	orr.w	r3, r3, #12
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005e0:	f107 0208 	add.w	r2, r7, #8
 80005e4:	2364      	movs	r3, #100	@ 0x64
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2304      	movs	r3, #4
 80005ea:	214e      	movs	r1, #78	@ 0x4e
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <lcd_send_cmd+0x5c>)
 80005ee:	f001 f925 	bl	800183c <HAL_I2C_Master_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000078 	.word	0x20000078

08000600 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 030d 	orr.w	r3, r3, #13
 800061e:	b2db      	uxtb	r3, r3
 8000620:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	f043 0309 	orr.w	r3, r3, #9
 8000628:	b2db      	uxtb	r3, r3
 800062a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	f043 030d 	orr.w	r3, r3, #13
 8000632:	b2db      	uxtb	r3, r3
 8000634:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	f043 0309 	orr.w	r3, r3, #9
 800063c:	b2db      	uxtb	r3, r3
 800063e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	2364      	movs	r3, #100	@ 0x64
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2304      	movs	r3, #4
 800064a:	214e      	movs	r1, #78	@ 0x4e
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <lcd_send_data+0x5c>)
 800064e:	f001 f8f5 	bl	800183c <HAL_I2C_Master_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000078 	.word	0x20000078

08000660 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
    switch (row)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <lcd_put_cur+0x18>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d005      	beq.n	8000682 <lcd_put_cur+0x22>
 8000676:	e009      	b.n	800068c <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800067e:	603b      	str	r3, [r7, #0]
            break;
 8000680:	e004      	b.n	800068c <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000688:	603b      	str	r3, [r7, #0]
            break;
 800068a:	bf00      	nop
    }

    lcd_send_cmd (col);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff85 	bl	80005a0 <lcd_send_cmd>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <lcd_init>:


void lcd_init (void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006a2:	2032      	movs	r0, #50	@ 0x32
 80006a4:	f000 fca2 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x30);
 80006a8:	2030      	movs	r0, #48	@ 0x30
 80006aa:	f7ff ff79 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 fc9c 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x30);
 80006b4:	2030      	movs	r0, #48	@ 0x30
 80006b6:	f7ff ff73 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 fc96 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x30);
 80006c0:	2030      	movs	r0, #48	@ 0x30
 80006c2:	f7ff ff6d 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fc90 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006cc:	2020      	movs	r0, #32
 80006ce:	f7ff ff67 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(10);
 80006d2:	200a      	movs	r0, #10
 80006d4:	f000 fc8a 	bl	8000fec <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006d8:	2028      	movs	r0, #40	@ 0x28
 80006da:	f7ff ff61 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 fc84 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006e4:	2008      	movs	r0, #8
 80006e6:	f7ff ff5b 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(1);
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fc7e 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006f0:	2001      	movs	r0, #1
 80006f2:	f7ff ff55 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fc78 	bl	8000fec <HAL_Delay>
	HAL_Delay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 fc75 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000702:	2006      	movs	r0, #6
 8000704:	f7ff ff4c 	bl	80005a0 <lcd_send_cmd>
	HAL_Delay(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f000 fc6f 	bl	8000fec <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800070e:	200c      	movs	r0, #12
 8000710:	f7ff ff46 	bl	80005a0 <lcd_send_cmd>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000720:	e006      	b.n	8000730 <lcd_send_string+0x18>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff68 	bl	8000600 <lcd_send_data>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d1f4      	bne.n	8000722 <lcd_send_string+0xa>
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <set_date_time>:

int row=0;
int col=0;

void set_date_time()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]

	  sTime.Hours = 0x14;
 800075c:	2314      	movs	r3, #20
 800075e:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x57;
 8000760:	2357      	movs	r3, #87	@ 0x57
 8000762:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x0;
 8000764:	2300      	movs	r3, #0
 8000766:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <set_date_time+0x7c>)
 8000778:	f002 fd4f 	bl	800321a <HAL_RTC_SetTime>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <set_date_time+0x42>
	  {
	    Error_Handler();
 8000782:	f000 fa25 	bl	8000bd0 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000786:	2302      	movs	r3, #2
 8000788:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_FEBRUARY;
 800078a:	2302      	movs	r3, #2
 800078c:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x4;
 800078e:	2304      	movs	r3, #4
 8000790:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x25;
 8000792:	2325      	movs	r3, #37	@ 0x25
 8000794:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2201      	movs	r2, #1
 800079a:	4619      	mov	r1, r3
 800079c:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <set_date_time+0x7c>)
 800079e:	f002 fe34 	bl	800340a <HAL_RTC_SetDate>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <set_date_time+0x68>
	  {
	    Error_Handler();
 80007a8:	f000 fa12 	bl	8000bd0 <Error_Handler>
	  }

	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32f2);
 80007ac:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 80007b0:	2101      	movs	r1, #1
 80007b2:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <set_date_time+0x7c>)
 80007b4:	f003 f944 	bl	8003a40 <HAL_RTCEx_BKUPWrite>
}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000cc 	.word	0x200000cc

080007c4 <set_alarm>:

void set_alarm()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2228      	movs	r2, #40	@ 0x28
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fc3d 	bl	8004050 <memset>
	  sAlarm.AlarmTime.Hours = 0x15;
 80007d6:	2315      	movs	r3, #21
 80007d8:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = 0x2;
 80007da:	2302      	movs	r3, #2
 80007dc:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = 0x0;
 80007de:	2300      	movs	r3, #0
 80007e0:	70bb      	strb	r3, [r7, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f887 3020 	strb.w	r3, [r7, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8000800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	2201      	movs	r2, #1
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	@ (8000824 <set_alarm+0x60>)
 800080e:	f002 fecf 	bl	80035b0 <HAL_RTC_SetAlarm_IT>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <set_alarm+0x58>
	  {
	    Error_Handler();
 8000818:	f000 f9da 	bl	8000bd0 <Error_Handler>
	  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000cc 	.word	0x200000cc

08000828 <get_date_time>:

char time[10];
char date[10];

void get_date_time(char *time, char *date)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	4813      	ldr	r0, [pc, #76]	@ (8000888 <get_date_time+0x60>)
 800083c:	f002 fd87 	bl	800334e <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	480f      	ldr	r0, [pc, #60]	@ (8000888 <get_date_time+0x60>)
 800084a:	f002 fe62 	bl	8003512 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 800084e:	7a3b      	ldrb	r3, [r7, #8]
 8000850:	461a      	mov	r2, r3
 8000852:	7a7b      	ldrb	r3, [r7, #9]
 8000854:	4619      	mov	r1, r3
 8000856:	7abb      	ldrb	r3, [r7, #10]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	460b      	mov	r3, r1
 800085c:	490b      	ldr	r1, [pc, #44]	@ (800088c <get_date_time+0x64>)
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f003 fbd6 	bl	8004010 <siprintf>

  /* Display date Format: dd-mm-yyyy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000864:	7fbb      	ldrb	r3, [r7, #30]
 8000866:	461a      	mov	r2, r3
 8000868:	7f7b      	ldrb	r3, [r7, #29]
 800086a:	4619      	mov	r1, r3
 800086c:	7ffb      	ldrb	r3, [r7, #31]
 800086e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	460b      	mov	r3, r1
 8000876:	4906      	ldr	r1, [pc, #24]	@ (8000890 <get_date_time+0x68>)
 8000878:	6838      	ldr	r0, [r7, #0]
 800087a:	f003 fbc9 	bl	8004010 <siprintf>
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000cc 	.word	0x200000cc
 800088c:	08004968 	.word	0x08004968
 8000890:	08004978 	.word	0x08004978

08000894 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);  // turn the LED ON
 800089c:	2201      	movs	r2, #1
 800089e:	2120      	movs	r1, #32
 80008a0:	4803      	ldr	r0, [pc, #12]	@ (80008b0 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80008a2:	f000 fe6d 	bl	8001580 <HAL_GPIO_WritePin>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40020000 	.word	0x40020000

080008b4 <main>:

char timeData[15];
char dateData[15];

int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  HAL_Init();
 80008b8:	f000 fb26 	bl	8000f08 <HAL_Init>

  SystemClock_Config();
 80008bc:	f000 f82a 	bl	8000914 <SystemClock_Config>

  MX_GPIO_Init();
 80008c0:	f000 f918 	bl	8000af4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008c4:	f000 f8ec 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008c8:	f000 f896 	bl	80009f8 <MX_I2C1_Init>
  MX_RTC_Init();
 80008cc:	f000 f8c2 	bl	8000a54 <MX_RTC_Init>

  lcd_init ();
 80008d0:	f7ff fee5 	bl	800069e <lcd_init>
  set_date_time();
 80008d4:	f7ff ff36 	bl	8000744 <set_date_time>
  set_alarm();
 80008d8:	f7ff ff74 	bl	80007c4 <set_alarm>
//    lcd_put_cur(1, 0);
//    lcd_send_string("I2C");

  while (1)
  {
	  get_date_time(timeData, dateData);
 80008dc:	490b      	ldr	r1, [pc, #44]	@ (800090c <main+0x58>)
 80008de:	480c      	ldr	r0, [pc, #48]	@ (8000910 <main+0x5c>)
 80008e0:	f7ff ffa2 	bl	8000828 <get_date_time>
	  lcd_put_cur(0,0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff feba 	bl	8000660 <lcd_put_cur>
	  lcd_send_string(timeData);
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <main+0x5c>)
 80008ee:	f7ff ff13 	bl	8000718 <lcd_send_string>
	  lcd_put_cur(1,0);
 80008f2:	2100      	movs	r1, #0
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff feb3 	bl	8000660 <lcd_put_cur>
	  lcd_send_string(dateData);
 80008fa:	4804      	ldr	r0, [pc, #16]	@ (800090c <main+0x58>)
 80008fc:	f7ff ff0c 	bl	8000718 <lcd_send_string>
	  HAL_Delay(500);
 8000900:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000904:	f000 fb72 	bl	8000fec <HAL_Delay>
	  get_date_time(timeData, dateData);
 8000908:	bf00      	nop
 800090a:	e7e7      	b.n	80008dc <main+0x28>
 800090c:	20000144 	.word	0x20000144
 8000910:	20000134 	.word	0x20000134

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b094      	sub	sp, #80	@ 0x50
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2234      	movs	r2, #52	@ 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f003 fb94 	bl	8004050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <SystemClock_Config+0xdc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	4a2b      	ldr	r2, [pc, #172]	@ (80009f0 <SystemClock_Config+0xdc>)
 8000942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000946:	6413      	str	r3, [r2, #64]	@ 0x40
 8000948:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <SystemClock_Config+0xdc>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <SystemClock_Config+0xe0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000960:	4a24      	ldr	r2, [pc, #144]	@ (80009f4 <SystemClock_Config+0xe0>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b22      	ldr	r3, [pc, #136]	@ (80009f4 <SystemClock_Config+0xe0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000974:	230a      	movs	r3, #10
 8000976:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000984:	2301      	movs	r3, #1
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000990:	2310      	movs	r3, #16
 8000992:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000994:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000998:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800099a:	2304      	movs	r3, #4
 800099c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 f914 	bl	8002bd8 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009b6:	f000 f90b 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	230f      	movs	r3, #15
 80009bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2302      	movs	r3, #2
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2102      	movs	r1, #2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fa8a 	bl	8001ef0 <HAL_RCC_ClockConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009e2:	f000 f8f5 	bl	8000bd0 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	@ 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40007000 	.word	0x40007000

080009f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_I2C1_Init+0x50>)
 80009fe:	4a13      	ldr	r2, [pc, #76]	@ (8000a4c <MX_I2C1_Init+0x54>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a04:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x58>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_I2C1_Init+0x50>)
 8000a36:	f000 fdbd 	bl	80015b4 <HAL_I2C_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a40:	f000 f8c6 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000078 	.word	0x20000078
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <MX_RTC_Init+0x48>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a66:	227f      	movs	r2, #127	@ 0x7f
 8000a68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a6c:	22ff      	movs	r2, #255	@ 0xff
 8000a6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a76:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_RTC_Init+0x44>)
 8000a84:	f002 fb46 	bl	8003114 <HAL_RTC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a8e:	f000 f89f 	bl	8000bd0 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200000cc 	.word	0x200000cc
 8000a9c:	40002800 	.word	0x40002800

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	@ (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	@ (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f002 ffd6 	bl	8003a88 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f875 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000ec 	.word	0x200000ec
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a25      	ldr	r2, [pc, #148]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b18      	ldr	r3, [pc, #96]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <MX_GPIO_Init+0xd0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <MX_GPIO_Init+0xd4>)
 8000b80:	f000 fcfe 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <MX_GPIO_Init+0xd8>)
 8000b9a:	f000 fb5d 	bl	8001258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9e:	2320      	movs	r3, #32
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <MX_GPIO_Init+0xd4>)
 8000bb6:	f000 fb4f 	bl	8001258 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bea:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x4c>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c1a:	2007      	movs	r0, #7
 8000c1c:	f000 fada 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	@ 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	@ (8000cb0 <HAL_I2C_MspInit+0x84>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d12b      	bne.n	8000ca6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c6a:	23c0      	movs	r3, #192	@ 0xc0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	2312      	movs	r3, #18
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <HAL_I2C_MspInit+0x8c>)
 8000c86:	f000 fae7 	bl	8001258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_I2C_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	@ 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020400 	.word	0x40020400

08000cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09a      	sub	sp, #104	@ 0x68
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	225c      	movs	r2, #92	@ 0x5c
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 f9bf 	bl	8004050 <memset>
  if(hrtc->Instance==RTC)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a10      	ldr	r2, [pc, #64]	@ (8000d18 <HAL_RTC_MspInit+0x5c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d119      	bne.n	8000d10 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fa1a 	bl	8002124 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000cf6:	f7ff ff6b 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_RTC_MspInit+0x60>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	2029      	movs	r0, #41	@ 0x29
 8000d06:	f000 fa70 	bl	80011ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d0a:	2029      	movs	r0, #41	@ 0x29
 8000d0c:	f000 fa89 	bl	8001222 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d10:	bf00      	nop
 8000d12:	3768      	adds	r7, #104	@ 0x68
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40002800 	.word	0x40002800
 8000d1c:	42470e3c 	.word	0x42470e3c

08000d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <HAL_UART_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a17      	ldr	r2, [pc, #92]	@ (8000da8 <HAL_UART_MspInit+0x88>)
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <HAL_UART_MspInit+0x88>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	@ (8000da8 <HAL_UART_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_UART_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <HAL_UART_MspInit+0x8c>)
 8000d96:	f000 fa5f 	bl	8001258 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	@ 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <NMI_Handler+0x4>

08000db8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <HardFault_Handler+0x4>

08000dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <MemManage_Handler+0x4>

08000dc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e06:	f000 f8d1 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <RTC_Alarm_IRQHandler+0x10>)
 8000e16:	f002 fd0f 	bl	8003838 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000cc 	.word	0x200000cc

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f003 f904 	bl	8004060 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20020000 	.word	0x20020000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000154 	.word	0x20000154
 8000e8c:	200002a8 	.word	0x200002a8

08000e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f003 f8c3 	bl	800406c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fce5 	bl	80008b4 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ef8:	080049e4 	.word	0x080049e4
  ldr r2, =_sbss
 8000efc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f00:	200002a4 	.word	0x200002a4

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>
	...

08000f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <HAL_Init+0x40>)
 8000f12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <HAL_Init+0x40>)
 8000f1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_Init+0x40>)
 8000f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f000 f94f 	bl	80011d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f808 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3c:	f7ff fe4e 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023c00 	.word	0x40023c00

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f967 	bl	800123e <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f92f 	bl	80011ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000158 	.word	0x20000158

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000158 	.word	0x20000158

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	4907      	ldr	r1, [pc, #28]	@ (80010d0 <__NVIC_EnableIRQ+0x38>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a0:	d301      	bcc.n	80011a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a2:	2301      	movs	r3, #1
 80011a4:	e00f      	b.n	80011c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a6:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <SysTick_Config+0x40>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ae:	210f      	movs	r1, #15
 80011b0:	f04f 30ff 	mov.w	r0, #4294967295
 80011b4:	f7ff ff8e 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <SysTick_Config+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011be:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <SysTick_Config+0x40>)
 80011c0:	2207      	movs	r2, #7
 80011c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff29 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fc:	f7ff ff3e 	bl	800107c <__NVIC_GetPriorityGrouping>
 8001200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	68b9      	ldr	r1, [r7, #8]
 8001206:	6978      	ldr	r0, [r7, #20]
 8001208:	f7ff ff8e 	bl	8001128 <NVIC_EncodePriority>
 800120c:	4602      	mov	r2, r0
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5d 	bl	80010d4 <__NVIC_SetPriority>
}
 800121a:	bf00      	nop
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff31 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ffa2 	bl	8001190 <SysTick_Config>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001258:	b480      	push	{r7}
 800125a:	b089      	sub	sp, #36	@ 0x24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
 8001272:	e165      	b.n	8001540 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	429a      	cmp	r2, r3
 800128e:	f040 8154 	bne.w	800153a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d005      	beq.n	80012aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d130      	bne.n	800130c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	091b      	lsrs	r3, r3, #4
 80012f6:	f003 0201 	and.w	r2, r3, #1
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b03      	cmp	r3, #3
 8001316:	d017      	beq.n	8001348 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	2203      	movs	r2, #3
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d123      	bne.n	800139c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3208      	adds	r2, #8
 800135c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f000 80ae 	beq.w	800153a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001558 <HAL_GPIO_Init+0x300>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a58      	ldr	r2, [pc, #352]	@ (800155c <HAL_GPIO_Init+0x304>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4f      	ldr	r2, [pc, #316]	@ (8001560 <HAL_GPIO_Init+0x308>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d025      	beq.n	8001472 <HAL_GPIO_Init+0x21a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4e      	ldr	r2, [pc, #312]	@ (8001564 <HAL_GPIO_Init+0x30c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01f      	beq.n	800146e <HAL_GPIO_Init+0x216>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4d      	ldr	r2, [pc, #308]	@ (8001568 <HAL_GPIO_Init+0x310>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0x212>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4c      	ldr	r2, [pc, #304]	@ (800156c <HAL_GPIO_Init+0x314>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0x20e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4b      	ldr	r2, [pc, #300]	@ (8001570 <HAL_GPIO_Init+0x318>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d00d      	beq.n	8001462 <HAL_GPIO_Init+0x20a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4a      	ldr	r2, [pc, #296]	@ (8001574 <HAL_GPIO_Init+0x31c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d007      	beq.n	800145e <HAL_GPIO_Init+0x206>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a49      	ldr	r2, [pc, #292]	@ (8001578 <HAL_GPIO_Init+0x320>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d101      	bne.n	800145a <HAL_GPIO_Init+0x202>
 8001456:	2306      	movs	r3, #6
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800145a:	2307      	movs	r3, #7
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x21c>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001484:	4935      	ldr	r1, [pc, #212]	@ (800155c <HAL_GPIO_Init+0x304>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001492:	4b3a      	ldr	r3, [pc, #232]	@ (800157c <HAL_GPIO_Init+0x324>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b6:	4a31      	ldr	r2, [pc, #196]	@ (800157c <HAL_GPIO_Init+0x324>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <HAL_GPIO_Init+0x324>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e0:	4a26      	ldr	r2, [pc, #152]	@ (800157c <HAL_GPIO_Init+0x324>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e6:	4b25      	ldr	r3, [pc, #148]	@ (800157c <HAL_GPIO_Init+0x324>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800150a:	4a1c      	ldr	r2, [pc, #112]	@ (800157c <HAL_GPIO_Init+0x324>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <HAL_GPIO_Init+0x324>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001534:	4a11      	ldr	r2, [pc, #68]	@ (800157c <HAL_GPIO_Init+0x324>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae96 	bls.w	8001274 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400
 8001568:	40020800 	.word	0x40020800
 800156c:	40020c00 	.word	0x40020c00
 8001570:	40021000 	.word	0x40021000
 8001574:	40021400 	.word	0x40021400
 8001578:	40021800 	.word	0x40021800
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e12b      	b.n	800181e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fb26 	bl	8000c2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	@ 0x24
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001618:	f000 fd5c 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a81      	ldr	r2, [pc, #516]	@ (8001828 <HAL_I2C_Init+0x274>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d807      	bhi.n	8001638 <HAL_I2C_Init+0x84>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a80      	ldr	r2, [pc, #512]	@ (800182c <HAL_I2C_Init+0x278>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e006      	b.n	8001646 <HAL_I2C_Init+0x92>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a7d      	ldr	r2, [pc, #500]	@ (8001830 <HAL_I2C_Init+0x27c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0e7      	b.n	800181e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a78      	ldr	r2, [pc, #480]	@ (8001834 <HAL_I2C_Init+0x280>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a6a      	ldr	r2, [pc, #424]	@ (8001828 <HAL_I2C_Init+0x274>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d802      	bhi.n	8001688 <HAL_I2C_Init+0xd4>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	e009      	b.n	800169c <HAL_I2C_Init+0xe8>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a69      	ldr	r2, [pc, #420]	@ (8001838 <HAL_I2C_Init+0x284>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	3301      	adds	r3, #1
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	495c      	ldr	r1, [pc, #368]	@ (8001828 <HAL_I2C_Init+0x274>)
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d819      	bhi.n	80016f0 <HAL_I2C_Init+0x13c>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e59      	subs	r1, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ca:	1c59      	adds	r1, r3, #1
 80016cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016d0:	400b      	ands	r3, r1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00a      	beq.n	80016ec <HAL_I2C_Init+0x138>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	1e59      	subs	r1, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ea:	e051      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 80016ec:	2304      	movs	r3, #4
 80016ee:	e04f      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d111      	bne.n	800171c <HAL_I2C_Init+0x168>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1e58      	subs	r0, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	440b      	add	r3, r1
 8001706:	fbb0 f3f3 	udiv	r3, r0, r3
 800170a:	3301      	adds	r3, #1
 800170c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	e012      	b.n	8001742 <HAL_I2C_Init+0x18e>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf0c      	ite	eq
 800173c:	2301      	moveq	r3, #1
 800173e:	2300      	movne	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Init+0x196>
 8001746:	2301      	movs	r3, #1
 8001748:	e022      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10e      	bne.n	8001770 <HAL_I2C_Init+0x1bc>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1e58      	subs	r0, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	fbb0 f3f3 	udiv	r3, r0, r3
 8001764:	3301      	adds	r3, #1
 8001766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800176e:	e00f      	b.n	8001790 <HAL_I2C_Init+0x1dc>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e58      	subs	r0, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6859      	ldr	r1, [r3, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	0099      	lsls	r1, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	fbb0 f3f3 	udiv	r3, r0, r3
 8001786:	3301      	adds	r3, #1
 8001788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	6809      	ldr	r1, [r1, #0]
 8001794:	4313      	orrs	r3, r2
 8001796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6911      	ldr	r1, [r2, #16]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68d2      	ldr	r2, [r2, #12]
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	000186a0 	.word	0x000186a0
 800182c:	001e847f 	.word	0x001e847f
 8001830:	003d08ff 	.word	0x003d08ff
 8001834:	431bde83 	.word	0x431bde83
 8001838:	10624dd3 	.word	0x10624dd3

0800183c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b088      	sub	sp, #32
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	607a      	str	r2, [r7, #4]
 8001846:	461a      	mov	r2, r3
 8001848:	460b      	mov	r3, r1
 800184a:	817b      	strh	r3, [r7, #10]
 800184c:	4613      	mov	r3, r2
 800184e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fbc0 	bl	8000fd4 <HAL_GetTick>
 8001854:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b20      	cmp	r3, #32
 8001860:	f040 80e0 	bne.w	8001a24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2319      	movs	r3, #25
 800186a:	2201      	movs	r2, #1
 800186c:	4970      	ldr	r1, [pc, #448]	@ (8001a30 <HAL_I2C_Master_Transmit+0x1f4>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f964 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	e0d3      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_I2C_Master_Transmit+0x50>
 8001888:	2302      	movs	r3, #2
 800188a:	e0cc      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x1ea>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d007      	beq.n	80018b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0201 	orr.w	r2, r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2221      	movs	r2, #33	@ 0x21
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2210      	movs	r2, #16
 80018ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	893a      	ldrh	r2, [r7, #8]
 80018e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4a50      	ldr	r2, [pc, #320]	@ (8001a34 <HAL_I2C_Master_Transmit+0x1f8>)
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018f4:	8979      	ldrh	r1, [r7, #10]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	6a3a      	ldr	r2, [r7, #32]
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f89c 	bl	8001a38 <I2C_MasterRequestWrite>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e08d      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001920:	e066      	b.n	80019f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 fa22 	bl	8001d70 <I2C_WaitOnTXEFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00d      	beq.n	800194e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001936:	2b04      	cmp	r3, #4
 8001938:	d107      	bne.n	800194a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001948:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e06b      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b04      	cmp	r3, #4
 800198a:	d11b      	bne.n	80019c4 <HAL_I2C_Master_Transmit+0x188>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	d017      	beq.n	80019c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001998:	781a      	ldrb	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	6a39      	ldr	r1, [r7, #32]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fa19 	bl	8001e00 <I2C_WaitOnBTFFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00d      	beq.n	80019f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d107      	bne.n	80019ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e01a      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d194      	bne.n	8001922 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	00100002 	.word	0x00100002
 8001a34:	ffff0000 	.word	0xffff0000

08001a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	460b      	mov	r3, r1
 8001a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d006      	beq.n	8001a62 <I2C_MasterRequestWrite+0x2a>
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d003      	beq.n	8001a62 <I2C_MasterRequestWrite+0x2a>
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a60:	d108      	bne.n	8001a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e00b      	b.n	8001a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	2b12      	cmp	r3, #18
 8001a7a:	d107      	bne.n	8001a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f84f 	bl	8001b3c <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00d      	beq.n	8001ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ab2:	d103      	bne.n	8001abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e035      	b.n	8001b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ac8:	d108      	bne.n	8001adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ad8:	611a      	str	r2, [r3, #16]
 8001ada:	e01b      	b.n	8001b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001adc:	897b      	ldrh	r3, [r7, #10]
 8001ade:	11db      	asrs	r3, r3, #7
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 0306 	and.w	r3, r3, #6
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f063 030f 	orn	r3, r3, #15
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	490e      	ldr	r1, [pc, #56]	@ (8001b34 <I2C_MasterRequestWrite+0xfc>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f898 	bl	8001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e010      	b.n	8001b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4907      	ldr	r1, [pc, #28]	@ (8001b38 <I2C_MasterRequestWrite+0x100>)
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f888 	bl	8001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	00010008 	.word	0x00010008
 8001b38:	00010002 	.word	0x00010002

08001b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b4c:	e048      	b.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d044      	beq.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7ff fa3d 	bl	8000fd4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d302      	bcc.n	8001b6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d139      	bne.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d10d      	bne.n	8001b92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	4013      	ands	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	e00c      	b.n	8001bac <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d116      	bne.n	8001be0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e023      	b.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	e00c      	b.n	8001c20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	43da      	mvns	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4013      	ands	r3, r2
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d093      	beq.n	8001b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c3e:	e071      	b.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4e:	d123      	bne.n	8001c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e067      	b.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9e:	d041      	beq.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca0:	f7ff f998 	bl	8000fd4 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d302      	bcc.n	8001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d136      	bne.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d10c      	bne.n	8001cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	bf14      	ite	ne
 8001cd2:	2301      	movne	r3, #1
 8001cd4:	2300      	moveq	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	e00b      	b.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d016      	beq.n	8001d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f043 0220 	orr.w	r2, r3, #32
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e021      	b.n	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d10c      	bne.n	8001d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	43da      	mvns	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf14      	ite	ne
 8001d40:	2301      	movne	r3, #1
 8001d42:	2300      	moveq	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e00b      	b.n	8001d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4013      	ands	r3, r2
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	bf14      	ite	ne
 8001d5a:	2301      	movne	r3, #1
 8001d5c:	2300      	moveq	r3, #0
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f af6d 	bne.w	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d7c:	e034      	b.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f886 	bl	8001e90 <I2C_IsAcknowledgeFailed>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e034      	b.n	8001df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d028      	beq.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff f91d 	bl	8000fd4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d11d      	bne.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db6:	2b80      	cmp	r3, #128	@ 0x80
 8001db8:	d016      	beq.n	8001de8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e007      	b.n	8001df8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df2:	2b80      	cmp	r3, #128	@ 0x80
 8001df4:	d1c3      	bne.n	8001d7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e0c:	e034      	b.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f83e 	bl	8001e90 <I2C_IsAcknowledgeFailed>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e034      	b.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d028      	beq.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e26:	f7ff f8d5 	bl	8000fd4 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d302      	bcc.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d11d      	bne.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d016      	beq.n	8001e78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	f043 0220 	orr.w	r2, r3, #32
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e007      	b.n	8001e88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d1c3      	bne.n	8001e0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea6:	d11b      	bne.n	8001ee0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001eb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f043 0204 	orr.w	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0cc      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d90c      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b65      	ldr	r3, [pc, #404]	@ (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b63      	ldr	r3, [pc, #396]	@ (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b8      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b59      	ldr	r3, [pc, #356]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a58      	ldr	r2, [pc, #352]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f5c:	4b53      	ldr	r3, [pc, #332]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a52      	ldr	r2, [pc, #328]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b50      	ldr	r3, [pc, #320]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	494d      	ldr	r1, [pc, #308]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d044      	beq.n	8002010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b47      	ldr	r3, [pc, #284]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d119      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07f      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b3f      	ldr	r3, [pc, #252]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06f      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e067      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fce:	4b37      	ldr	r3, [pc, #220]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 0203 	bic.w	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4934      	ldr	r1, [pc, #208]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fff8 	bl	8000fd4 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f7fe fff4 	bl	8000fd4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e04f      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1eb      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d20c      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e032      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002044:	4b19      	ldr	r3, [pc, #100]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4916      	ldr	r1, [pc, #88]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002062:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	490e      	ldr	r1, [pc, #56]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002076:	f000 fb7f 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 800207a:	4602      	mov	r2, r0
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	490a      	ldr	r1, [pc, #40]	@ (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	4a09      	ldr	r2, [pc, #36]	@ (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe ff58 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00
 80020ac:	40023800 	.word	0x40023800
 80020b0:	08004988 	.word	0x08004988
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000000 	.word	0x20000000

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d8:	f7ff fff0 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	0a9b      	lsrs	r3, r3, #10
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4903      	ldr	r1, [pc, #12]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40023800 	.word	0x40023800
 80020f8:	08004998 	.word	0x08004998

080020fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002100:	f7ff ffdc 	bl	80020bc <HAL_RCC_GetHCLKFreq>
 8002104:	4602      	mov	r2, r0
 8002106:	4b05      	ldr	r3, [pc, #20]	@ (800211c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0b5b      	lsrs	r3, r3, #13
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	4903      	ldr	r1, [pc, #12]	@ (8002120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002112:	5ccb      	ldrb	r3, [r1, r3]
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	08004998 	.word	0x08004998

08002124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	@ 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800215c:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800215e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002162:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216a:	496c      	ldr	r1, [pc, #432]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800217a:	2301      	movs	r3, #1
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800218a:	4b64      	ldr	r3, [pc, #400]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800218c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002190:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002198:	4960      	ldr	r1, [pc, #384]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d017      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b8:	4b58      	ldr	r3, [pc, #352]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	4955      	ldr	r1, [pc, #340]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021d6:	d101      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80021e4:	2301      	movs	r3, #1
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d017      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021f4:	4b49      	ldr	r3, [pc, #292]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002202:	4946      	ldr	r1, [pc, #280]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800220e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002212:	d101      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002214:	2301      	movs	r3, #1
 8002216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 808a 	beq.w	8002346 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b39      	ldr	r3, [pc, #228]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a38      	ldr	r2, [pc, #224]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b36      	ldr	r3, [pc, #216]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800224e:	4b34      	ldr	r3, [pc, #208]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a33      	ldr	r2, [pc, #204]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800225a:	f7fe febb 	bl	8000fd4 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002262:	f7fe feb7 	bl	8000fd4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e278      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002274:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002280:	4b26      	ldr	r3, [pc, #152]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002288:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02f      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002298:	6a3a      	ldr	r2, [r7, #32]
 800229a:	429a      	cmp	r2, r3
 800229c:	d028      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80022b4:	4a19      	ldr	r2, [pc, #100]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d114      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fe85 	bl	8000fd4 <HAL_GetTick>
 80022ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fe81 	bl	8000fd4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e240      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80022fc:	d114      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800230e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002312:	4902      	ldr	r1, [pc, #8]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
 8002318:	e00c      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800
 8002320:	40007000 	.word	0x40007000
 8002324:	42470e40 	.word	0x42470e40
 8002328:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	4a49      	ldr	r2, [pc, #292]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002336:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002340:	4944      	ldr	r1, [pc, #272]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002342:	4313      	orrs	r3, r2
 8002344:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d004      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002358:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800235a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002368:	4b3a      	ldr	r3, [pc, #232]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	4937      	ldr	r1, [pc, #220]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800238a:	4b32      	ldr	r3, [pc, #200]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002390:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	492e      	ldr	r1, [pc, #184]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d011      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023ac:	4b29      	ldr	r3, [pc, #164]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ba:	4926      	ldr	r1, [pc, #152]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ca:	d101      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80023cc:	2301      	movs	r3, #1
 80023ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	491a      	ldr	r1, [pc, #104]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d011      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002404:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800240c:	4911      	ldr	r1, [pc, #68]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800241c:	d101      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800241e:	2301      	movs	r3, #1
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d005      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002430:	f040 80ff 	bne.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800243a:	f7fe fdcb 	bl	8000fd4 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002440:	e00e      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002442:	f7fe fdc7 	bl	8000fd4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d907      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e188      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002454:	40023800 	.word	0x40023800
 8002458:	424711e0 	.word	0x424711e0
 800245c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002460:	4b7e      	ldr	r3, [pc, #504]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ea      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002488:	2b00      	cmp	r3, #0
 800248a:	d028      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	2b00      	cmp	r3, #0
 8002492:	d124      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002494:	4b71      	ldr	r3, [pc, #452]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	3301      	adds	r3, #1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024a6:	4b6d      	ldr	r3, [pc, #436]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ac:	0e1b      	lsrs	r3, r3, #24
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	431a      	orrs	r2, r3
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	071b      	lsls	r3, r3, #28
 80024d6:	4961      	ldr	r1, [pc, #388]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d035      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002508:	d130      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800250a:	4b54      	ldr	r3, [pc, #336]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800250c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800251c:	4b4f      	ldr	r3, [pc, #316]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800251e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002522:	0f1b      	lsrs	r3, r3, #28
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	019b      	lsls	r3, r3, #6
 8002534:	431a      	orrs	r2, r3
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	071b      	lsls	r3, r3, #28
 800254c:	4943      	ldr	r1, [pc, #268]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002554:	4b41      	ldr	r3, [pc, #260]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800255a:	f023 021f 	bic.w	r2, r3, #31
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	3b01      	subs	r3, #1
 8002564:	493d      	ldr	r1, [pc, #244]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002574:	2b00      	cmp	r3, #0
 8002576:	d029      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002580:	d124      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002582:	4b36      	ldr	r3, [pc, #216]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002594:	4b31      	ldr	r3, [pc, #196]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800259a:	0f1b      	lsrs	r3, r3, #28
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	019b      	lsls	r3, r3, #6
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	3b01      	subs	r3, #1
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	431a      	orrs	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	071b      	lsls	r3, r3, #28
 80025c4:	4925      	ldr	r1, [pc, #148]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	071b      	lsls	r3, r3, #28
 80025fe:	4917      	ldr	r1, [pc, #92]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002606:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800260c:	f7fe fce2 	bl	8000fd4 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002614:	f7fe fcde 	bl	8000fd4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e09f      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 8095 	bne.w	8002764 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe fcc8 	bl	8000fd4 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002646:	e00f      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002648:	f7fe fcc4 	bl	8000fd4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d908      	bls.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e085      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	42470068 	.word	0x42470068
 8002664:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002668:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002674:	d0e8      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02b      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269a:	2b00      	cmp	r3, #0
 800269c:	d127      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800269e:	4b34      	ldr	r3, [pc, #208]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	431a      	orrs	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	085b      	lsrs	r3, r3, #1
 80026c0:	3b01      	subs	r3, #1
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	061b      	lsls	r3, r3, #24
 80026cc:	4928      	ldr	r1, [pc, #160]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026d4:	4b26      	ldr	r3, [pc, #152]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e2:	3b01      	subs	r3, #1
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	4922      	ldr	r1, [pc, #136]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01d      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002702:	d118      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270a:	0e1b      	lsrs	r3, r3, #24
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	019b      	lsls	r3, r3, #6
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	3b01      	subs	r3, #1
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	431a      	orrs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	4910      	ldr	r1, [pc, #64]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002736:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800273c:	f7fe fc4a 	bl	8000fd4 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002744:	f7fe fc46 	bl	8000fd4 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e007      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002756:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800275e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002762:	d1ef      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3730      	adds	r7, #48	@ 0x30
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	42470070 	.word	0x42470070

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800277c:	b0ae      	sub	sp, #184	@ 0xb8
 800277e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279e:	4bcb      	ldr	r3, [pc, #812]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	f200 8206 	bhi.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x440>
 80027ac:	a201      	add	r2, pc, #4	@ (adr r2, 80027b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	080027e9 	.word	0x080027e9
 80027b8:	08002bb9 	.word	0x08002bb9
 80027bc:	08002bb9 	.word	0x08002bb9
 80027c0:	08002bb9 	.word	0x08002bb9
 80027c4:	080027f1 	.word	0x080027f1
 80027c8:	08002bb9 	.word	0x08002bb9
 80027cc:	08002bb9 	.word	0x08002bb9
 80027d0:	08002bb9 	.word	0x08002bb9
 80027d4:	080027f9 	.word	0x080027f9
 80027d8:	08002bb9 	.word	0x08002bb9
 80027dc:	08002bb9 	.word	0x08002bb9
 80027e0:	08002bb9 	.word	0x08002bb9
 80027e4:	080029e9 	.word	0x080029e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x358>)
 80027ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ee:	e1e7      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027f6:	e1e3      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f8:	4bb4      	ldr	r3, [pc, #720]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002800:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002804:	4bb1      	ldr	r3, [pc, #708]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d071      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4bae      	ldr	r3, [pc, #696]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	2200      	movs	r2, #0
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800281c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002828:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800282c:	2300      	movs	r3, #0
 800282e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4621      	mov	r1, r4
 8002850:	1a51      	subs	r1, r2, r1
 8002852:	6439      	str	r1, [r7, #64]	@ 0x40
 8002854:	4629      	mov	r1, r5
 8002856:	eb63 0301 	sbc.w	r3, r3, r1
 800285a:	647b      	str	r3, [r7, #68]	@ 0x44
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002868:	4649      	mov	r1, r9
 800286a:	018b      	lsls	r3, r1, #6
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002872:	4641      	mov	r1, r8
 8002874:	018a      	lsls	r2, r1, #6
 8002876:	4641      	mov	r1, r8
 8002878:	1a51      	subs	r1, r2, r1
 800287a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800287c:	4649      	mov	r1, r9
 800287e:	eb63 0301 	sbc.w	r3, r3, r1
 8002882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002890:	4649      	mov	r1, r9
 8002892:	00cb      	lsls	r3, r1, #3
 8002894:	4641      	mov	r1, r8
 8002896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289a:	4641      	mov	r1, r8
 800289c:	00ca      	lsls	r2, r1, #3
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	4622      	mov	r2, r4
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80028aa:	462b      	mov	r3, r5
 80028ac:	460a      	mov	r2, r1
 80028ae:	eb42 0303 	adc.w	r3, r2, r3
 80028b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028c0:	4629      	mov	r1, r5
 80028c2:	024b      	lsls	r3, r1, #9
 80028c4:	4621      	mov	r1, r4
 80028c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ca:	4621      	mov	r1, r4
 80028cc:	024a      	lsls	r2, r1, #9
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028e4:	f7fd fce4 	bl	80002b0 <__aeabi_uldivmod>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4613      	mov	r3, r2
 80028ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028f2:	e067      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f4:	4b75      	ldr	r3, [pc, #468]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002900:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002904:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800290e:	2300      	movs	r3, #0
 8002910:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002912:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	f04f 0000 	mov.w	r0, #0
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	0159      	lsls	r1, r3, #5
 8002924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002928:	0150      	lsls	r0, r2, #5
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4621      	mov	r1, r4
 8002930:	1a51      	subs	r1, r2, r1
 8002932:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002934:	4629      	mov	r1, r5
 8002936:	eb63 0301 	sbc.w	r3, r3, r1
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002948:	4649      	mov	r1, r9
 800294a:	018b      	lsls	r3, r1, #6
 800294c:	4641      	mov	r1, r8
 800294e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002952:	4641      	mov	r1, r8
 8002954:	018a      	lsls	r2, r1, #6
 8002956:	4641      	mov	r1, r8
 8002958:	ebb2 0a01 	subs.w	sl, r2, r1
 800295c:	4649      	mov	r1, r9
 800295e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800296e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002976:	4692      	mov	sl, r2
 8002978:	469b      	mov	fp, r3
 800297a:	4623      	mov	r3, r4
 800297c:	eb1a 0303 	adds.w	r3, sl, r3
 8002980:	623b      	str	r3, [r7, #32]
 8002982:	462b      	mov	r3, r5
 8002984:	eb4b 0303 	adc.w	r3, fp, r3
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002996:	4629      	mov	r1, r5
 8002998:	028b      	lsls	r3, r1, #10
 800299a:	4621      	mov	r1, r4
 800299c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a0:	4621      	mov	r1, r4
 80029a2:	028a      	lsls	r2, r1, #10
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ac:	2200      	movs	r2, #0
 80029ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80029b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80029b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029b6:	f7fd fc7b 	bl	80002b0 <__aeabi_uldivmod>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4613      	mov	r3, r2
 80029c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029c4:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029e6:	e0eb      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f4:	4b35      	ldr	r3, [pc, #212]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d06b      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a00:	4b32      	ldr	r3, [pc, #200]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x354>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	099b      	lsrs	r3, r3, #6
 8002a06:	2200      	movs	r2, #0
 8002a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a12:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a14:	2300      	movs	r3, #0
 8002a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	462b      	mov	r3, r5
 8002a20:	f04f 0000 	mov.w	r0, #0
 8002a24:	f04f 0100 	mov.w	r1, #0
 8002a28:	0159      	lsls	r1, r3, #5
 8002a2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2e:	0150      	lsls	r0, r2, #5
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4621      	mov	r1, r4
 8002a36:	1a51      	subs	r1, r2, r1
 8002a38:	61b9      	str	r1, [r7, #24]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a4e:	4659      	mov	r1, fp
 8002a50:	018b      	lsls	r3, r1, #6
 8002a52:	4651      	mov	r1, sl
 8002a54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a58:	4651      	mov	r1, sl
 8002a5a:	018a      	lsls	r2, r1, #6
 8002a5c:	4651      	mov	r1, sl
 8002a5e:	ebb2 0801 	subs.w	r8, r2, r1
 8002a62:	4659      	mov	r1, fp
 8002a64:	eb63 0901 	sbc.w	r9, r3, r1
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7c:	4690      	mov	r8, r2
 8002a7e:	4699      	mov	r9, r3
 8002a80:	4623      	mov	r3, r4
 8002a82:	eb18 0303 	adds.w	r3, r8, r3
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	462b      	mov	r3, r5
 8002a8a:	eb49 0303 	adc.w	r3, r9, r3
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	024b      	lsls	r3, r1, #9
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	024a      	lsls	r2, r1, #9
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ab6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ab8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002abc:	f7fd fbf8 	bl	80002b0 <__aeabi_uldivmod>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aca:	e065      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x420>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	00f42400 	.word	0x00f42400
 8002ad4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	099b      	lsrs	r3, r3, #6
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ae8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aea:	2300      	movs	r3, #0
 8002aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002af2:	4642      	mov	r2, r8
 8002af4:	464b      	mov	r3, r9
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	0159      	lsls	r1, r3, #5
 8002b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b04:	0150      	lsls	r0, r2, #5
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	1a51      	subs	r1, r2, r1
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	4649      	mov	r1, r9
 8002b12:	eb63 0301 	sbc.w	r3, r3, r1
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b24:	4659      	mov	r1, fp
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	4651      	mov	r1, sl
 8002b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b2e:	4651      	mov	r1, sl
 8002b30:	018a      	lsls	r2, r1, #6
 8002b32:	4651      	mov	r1, sl
 8002b34:	1a54      	subs	r4, r2, r1
 8002b36:	4659      	mov	r1, fp
 8002b38:	eb63 0501 	sbc.w	r5, r3, r1
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	00eb      	lsls	r3, r5, #3
 8002b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4a:	00e2      	lsls	r2, r4, #3
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	461d      	mov	r5, r3
 8002b50:	4643      	mov	r3, r8
 8002b52:	18e3      	adds	r3, r4, r3
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	464b      	mov	r3, r9
 8002b58:	eb45 0303 	adc.w	r3, r5, r3
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	028b      	lsls	r3, r1, #10
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b74:	4621      	mov	r1, r4
 8002b76:	028a      	lsls	r2, r1, #10
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b80:	2200      	movs	r2, #0
 8002b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b8a:	f7fd fb91 	bl	80002b0 <__aeabi_uldivmod>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4613      	mov	r3, r2
 8002b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b98:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	0f1b      	lsrs	r3, r3, #28
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002baa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bb6:	e003      	b.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	37b8      	adds	r7, #184	@ 0xb8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	00f42400 	.word	0x00f42400

08002bd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e28d      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 8083 	beq.w	8002cfe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bf8:	4b94      	ldr	r3, [pc, #592]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d019      	beq.n	8002c38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c04:	4b91      	ldr	r3, [pc, #580]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c10:	4b8e      	ldr	r3, [pc, #568]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c1c:	d00c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d112      	bne.n	8002c50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b88      	ldr	r3, [pc, #544]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c36:	d10b      	bne.n	8002c50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	4b84      	ldr	r3, [pc, #528]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05b      	beq.n	8002cfc <HAL_RCC_OscConfig+0x124>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d157      	bne.n	8002cfc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e25a      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCC_OscConfig+0x90>
 8002c5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xcc>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0xb4>
 8002c72:	4b76      	ldr	r3, [pc, #472]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a75      	ldr	r2, [pc, #468]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b73      	ldr	r3, [pc, #460]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a72      	ldr	r2, [pc, #456]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xcc>
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6e      	ldr	r2, [pc, #440]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b6c      	ldr	r3, [pc, #432]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe f992 	bl	8000fd4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe f98e 	bl	8000fd4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	@ 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e21f      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b61      	ldr	r3, [pc, #388]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xdc>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f97e 	bl	8000fd4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f97a 	bl	8000fd4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	@ 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e20b      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b57      	ldr	r3, [pc, #348]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x104>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d06f      	beq.n	8002dea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d0a:	4b50      	ldr	r3, [pc, #320]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d017      	beq.n	8002d46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d16:	4b4d      	ldr	r3, [pc, #308]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d22:	4b4a      	ldr	r3, [pc, #296]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b47      	ldr	r3, [pc, #284]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d36:	2b0c      	cmp	r3, #12
 8002d38:	d11c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b44      	ldr	r3, [pc, #272]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4b41      	ldr	r3, [pc, #260]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x186>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e1d3      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4937      	ldr	r1, [pc, #220]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	e03a      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b34      	ldr	r3, [pc, #208]	@ (8002e50 <HAL_RCC_OscConfig+0x278>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fe f927 	bl	8000fd4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f923 	bl	8000fd4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e1b4      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b28      	ldr	r3, [pc, #160]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4925      	ldr	r1, [pc, #148]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	e015      	b.n	8002dea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <HAL_RCC_OscConfig+0x278>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f906 	bl	8000fd4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f902 	bl	8000fd4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e193      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d036      	beq.n	8002e64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe f8e6 	bl	8000fd4 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe f8e2 	bl	8000fd4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e173      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_RCC_OscConfig+0x274>)
 8002e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x234>
 8002e2a:	e01b      	b.n	8002e64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_RCC_OscConfig+0x27c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe f8cf 	bl	8000fd4 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	e00e      	b.n	8002e58 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7fe f8cb 	bl	8000fd4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d907      	bls.n	8002e58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e15c      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	42470000 	.word	0x42470000
 8002e54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	4b8a      	ldr	r3, [pc, #552]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ea      	bne.n	8002e3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8097 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b83      	ldr	r3, [pc, #524]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	4b7f      	ldr	r3, [pc, #508]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	4a7e      	ldr	r2, [pc, #504]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e92:	4b7c      	ldr	r3, [pc, #496]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b79      	ldr	r3, [pc, #484]	@ (8003088 <HAL_RCC_OscConfig+0x4b0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eae:	4b76      	ldr	r3, [pc, #472]	@ (8003088 <HAL_RCC_OscConfig+0x4b0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a75      	ldr	r2, [pc, #468]	@ (8003088 <HAL_RCC_OscConfig+0x4b0>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eba:	f7fe f88b 	bl	8000fd4 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec2:	f7fe f887 	bl	8000fd4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e118      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8003088 <HAL_RCC_OscConfig+0x4b0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x31e>
 8002ee8:	4b66      	ldr	r3, [pc, #408]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	4a65      	ldr	r2, [pc, #404]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef4:	e01c      	b.n	8002f30 <HAL_RCC_OscConfig+0x358>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x340>
 8002efe:	4b61      	ldr	r3, [pc, #388]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	4a60      	ldr	r2, [pc, #384]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0x358>
 8002f18:	4b5a      	ldr	r3, [pc, #360]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	4a59      	ldr	r2, [pc, #356]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f24:	4b57      	ldr	r3, [pc, #348]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a56      	ldr	r2, [pc, #344]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f2a:	f023 0304 	bic.w	r3, r3, #4
 8002f2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d015      	beq.n	8002f64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f38:	f7fe f84c 	bl	8000fd4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f40:	f7fe f848 	bl	8000fd4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e0d7      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f56:	4b4b      	ldr	r3, [pc, #300]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ee      	beq.n	8002f40 <HAL_RCC_OscConfig+0x368>
 8002f62:	e014      	b.n	8002f8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe f836 	bl	8000fd4 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6c:	f7fe f832 	bl	8000fd4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e0c1      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f82:	4b40      	ldr	r3, [pc, #256]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ee      	bne.n	8002f6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f8e:	7dfb      	ldrb	r3, [r7, #23]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f94:	4b3b      	ldr	r3, [pc, #236]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	4a3a      	ldr	r2, [pc, #232]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80ad 	beq.w	8003104 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002faa:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d060      	beq.n	8003078 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d145      	bne.n	800304a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b33      	ldr	r3, [pc, #204]	@ (800308c <HAL_RCC_OscConfig+0x4b4>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe f806 	bl	8000fd4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe f802 	bl	8000fd4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e093      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	4b29      	ldr	r3, [pc, #164]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	3b01      	subs	r3, #1
 8003004:	041b      	lsls	r3, r3, #16
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003014:	071b      	lsls	r3, r3, #28
 8003016:	491b      	ldr	r1, [pc, #108]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_RCC_OscConfig+0x4b4>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd ffd7 	bl	8000fd4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fd ffd3 	bl	8000fd4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e064      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x452>
 8003048:	e05c      	b.n	8003104 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <HAL_RCC_OscConfig+0x4b4>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fd ffc0 	bl	8000fd4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd ffbc 	bl	8000fd4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e04d      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_RCC_OscConfig+0x4ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x480>
 8003076:	e045      	b.n	8003104 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e040      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
 8003084:	40023800 	.word	0x40023800
 8003088:	40007000 	.word	0x40007000
 800308c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003090:	4b1f      	ldr	r3, [pc, #124]	@ (8003110 <HAL_RCC_OscConfig+0x538>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d030      	beq.n	8003100 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d129      	bne.n	8003100 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d122      	bne.n	8003100 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d119      	bne.n	8003100 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d10f      	bne.n	8003100 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d001      	beq.n	8003104 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023800 	.word	0x40023800

08003114 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e073      	b.n	8003212 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7f5b      	ldrb	r3, [r3, #29]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fdbe 	bl	8000cbc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b10      	cmp	r3, #16
 8003152:	d055      	beq.n	8003200 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	22ca      	movs	r2, #202	@ 0xca
 800315a:	625a      	str	r2, [r3, #36]	@ 0x24
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2253      	movs	r2, #83	@ 0x53
 8003162:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fbd3 	bl	8003910 <RTC_EnterInitMode>
 800316a:	4603      	mov	r3, r0
 800316c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12c      	bne.n	80031ce <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003186:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	041a      	lsls	r2, r3, #16
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fbda 	bl	800397e <RTC_ExitInitMode>
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699a      	ldr	r2, [r3, #24]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	22ff      	movs	r2, #255	@ 0xff
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80031fe:	e001      	b.n	8003204 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800321a:	b590      	push	{r4, r7, lr}
 800321c:	b087      	sub	sp, #28
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	7f1b      	ldrb	r3, [r3, #28]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_RTC_SetTime+0x1c>
 8003232:	2302      	movs	r3, #2
 8003234:	e087      	b.n	8003346 <HAL_RTC_SetTime+0x12c>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2202      	movs	r2, #2
 8003240:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d126      	bne.n	8003296 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d102      	bne.n	800325c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fbb1 	bl	80039c8 <RTC_ByteToBcd2>
 8003266:	4603      	mov	r3, r0
 8003268:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	785b      	ldrb	r3, [r3, #1]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fbaa 	bl	80039c8 <RTC_ByteToBcd2>
 8003274:	4603      	mov	r3, r0
 8003276:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003278:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	789b      	ldrb	r3, [r3, #2]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fba2 	bl	80039c8 <RTC_ByteToBcd2>
 8003284:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003286:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	78db      	ldrb	r3, [r3, #3]
 800328e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	e018      	b.n	80032c8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	785b      	ldrb	r3, [r3, #1]
 80032b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032b6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80032bc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	78db      	ldrb	r3, [r3, #3]
 80032c2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	22ca      	movs	r2, #202	@ 0xca
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2253      	movs	r2, #83	@ 0x53
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fb19 	bl	8003910 <RTC_EnterInitMode>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d120      	bne.n	800332a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80032f2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80032f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003306:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6899      	ldr	r1, [r3, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	431a      	orrs	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fb2c 	bl	800397e <RTC_ExitInitMode>
 8003326:	4603      	mov	r3, r0
 8003328:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	22ff      	movs	r2, #255	@ 0xff
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]

  return status;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bd90      	pop	{r4, r7, pc}

0800334e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003380:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003384:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	0d9b      	lsrs	r3, r3, #22
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d11a      	bne.n	8003400 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fb18 	bl	8003a04 <RTC_Bcd2ToByte>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fb0f 	bl	8003a04 <RTC_Bcd2ToByte>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	789b      	ldrb	r3, [r3, #2]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fb06 	bl	8003a04 <RTC_Bcd2ToByte>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800340a:	b590      	push	{r4, r7, lr}
 800340c:	b087      	sub	sp, #28
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	7f1b      	ldrb	r3, [r3, #28]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RTC_SetDate+0x1c>
 8003422:	2302      	movs	r3, #2
 8003424:	e071      	b.n	800350a <HAL_RTC_SetDate+0x100>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2202      	movs	r2, #2
 8003430:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10e      	bne.n	8003456 <HAL_RTC_SetDate+0x4c>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	f023 0310 	bic.w	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	330a      	adds	r3, #10
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11c      	bne.n	8003496 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	78db      	ldrb	r3, [r3, #3]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fab1 	bl	80039c8 <RTC_ByteToBcd2>
 8003466:	4603      	mov	r3, r0
 8003468:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 faaa 	bl	80039c8 <RTC_ByteToBcd2>
 8003474:	4603      	mov	r3, r0
 8003476:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003478:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	789b      	ldrb	r3, [r3, #2]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 faa2 	bl	80039c8 <RTC_ByteToBcd2>
 8003484:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003486:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e00e      	b.n	80034b4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034a2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80034a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	22ca      	movs	r2, #202	@ 0xca
 80034ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2253      	movs	r2, #83	@ 0x53
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fa23 	bl	8003910 <RTC_EnterInitMode>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10c      	bne.n	80034ee <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034e2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fa4a 	bl	800397e <RTC_ExitInitMode>
 80034ea:	4603      	mov	r3, r0
 80034ec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	22ff      	movs	r2, #255	@ 0xff
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]

  return status;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
}
 800350a:	4618      	mov	r0, r3
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}

08003512 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b086      	sub	sp, #24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800352c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003530:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	b2da      	uxtb	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	0b5b      	lsrs	r3, r3, #13
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11a      	bne.n	80035a6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fa45 	bl	8003a04 <RTC_Bcd2ToByte>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	785b      	ldrb	r3, [r3, #1]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fa3c 	bl	8003a04 <RTC_Bcd2ToByte>
 800358c:	4603      	mov	r3, r0
 800358e:	461a      	mov	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	789b      	ldrb	r3, [r3, #2]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fa33 	bl	8003a04 <RTC_Bcd2ToByte>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b089      	sub	sp, #36	@ 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80035bc:	4b9b      	ldr	r3, [pc, #620]	@ (800382c <HAL_RTC_SetAlarm_IT+0x27c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a9b      	ldr	r2, [pc, #620]	@ (8003830 <HAL_RTC_SetAlarm_IT+0x280>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0adb      	lsrs	r3, r3, #11
 80035c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035cc:	fb02 f303 	mul.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	7f1b      	ldrb	r3, [r3, #28]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_RTC_SetAlarm_IT+0x36>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e11e      	b.n	8003824 <HAL_RTC_SetAlarm_IT+0x274>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2202      	movs	r2, #2
 80035f0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d137      	bne.n	8003668 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d102      	bne.n	800360c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2200      	movs	r2, #0
 800360a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f9d9 	bl	80039c8 <RTC_ByteToBcd2>
 8003616:	4603      	mov	r3, r0
 8003618:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f9d2 	bl	80039c8 <RTC_ByteToBcd2>
 8003624:	4603      	mov	r3, r0
 8003626:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003628:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	789b      	ldrb	r3, [r3, #2]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f9ca 	bl	80039c8 <RTC_ByteToBcd2>
 8003634:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003636:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003640:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f9bc 	bl	80039c8 <RTC_ByteToBcd2>
 8003650:	4603      	mov	r3, r0
 8003652:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003654:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800365c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003662:	4313      	orrs	r3, r2
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e023      	b.n	80036b0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2200      	movs	r2, #0
 800367a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003688:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800368e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	78db      	ldrb	r3, [r3, #3]
 8003694:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003696:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800369e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80036a0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80036a6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	22ca      	movs	r2, #202	@ 0xca
 80036c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2253      	movs	r2, #83	@ 0x53
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d4:	d142      	bne.n	800375c <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80036f6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10b      	bne.n	800371c <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	22ff      	movs	r2, #255	@ 0xff
 800370a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2203      	movs	r2, #3
 8003710:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e083      	b.n	8003824 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0e6      	beq.n	80036f8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003748:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	e04c      	b.n	80037f6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800376a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800377c:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800377e:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <HAL_RTC_SetAlarm_IT+0x27c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <HAL_RTC_SetAlarm_IT+0x280>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	0adb      	lsrs	r3, r3, #11
 800378a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3b01      	subs	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	22ff      	movs	r2, #255	@ 0xff
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2203      	movs	r2, #3
 80037ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e035      	b.n	8003824 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0e6      	beq.n	8003794 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037f4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80037f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <HAL_RTC_SetAlarm_IT+0x284>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003834 <HAL_RTC_SetAlarm_IT+0x284>)
 80037fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003800:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003802:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <HAL_RTC_SetAlarm_IT+0x284>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	4a0b      	ldr	r2, [pc, #44]	@ (8003834 <HAL_RTC_SetAlarm_IT+0x284>)
 8003808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	22ff      	movs	r2, #255	@ 0xff
 8003814:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3724      	adds	r7, #36	@ 0x24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd90      	pop	{r4, r7, pc}
 800382c:	20000000 	.word	0x20000000
 8003830:	10624dd3 	.word	0x10624dd3
 8003834:	40013c00 	.word	0x40013c00

08003838 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003840:	4b1f      	ldr	r3, [pc, #124]	@ (80038c0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003846:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8003874:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd f80c 	bl	8000894 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d012      	beq.n	80038b0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80038a8:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f8e2 	bl	8003a74 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	775a      	strb	r2, [r3, #29]
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_RTC_WaitForSynchro+0x48>)
 80038d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d8:	f7fd fb7c 	bl	8000fd4 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038de:	e009      	b.n	80038f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038e0:	f7fd fb78 	bl	8000fd4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038ee:	d901      	bls.n	80038f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e007      	b.n	8003904 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ee      	beq.n	80038e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	00017f5f 	.word	0x00017f5f

08003910 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d122      	bne.n	8003974 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800393c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800393e:	f7fd fb49 	bl	8000fd4 <HAL_GetTick>
 8003942:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003944:	e00c      	b.n	8003960 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003946:	f7fd fb45 	bl	8000fd4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003954:	d904      	bls.n	8003960 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2204      	movs	r2, #4
 800395a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <RTC_EnterInitMode+0x64>
 800396e:	7bfb      	ldrb	r3, [r7, #15]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d1e8      	bne.n	8003946 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003998:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0320 	and.w	r3, r3, #32
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff8b 	bl	80038c4 <HAL_RTC_WaitForSynchro>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2204      	movs	r2, #4
 80039b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80039d6:	e005      	b.n	80039e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	3b0a      	subs	r3, #10
 80039e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	2b09      	cmp	r3, #9
 80039e8:	d8f6      	bhi.n	80039d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b2db      	uxtb	r3, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	b2db      	uxtb	r3, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3350      	adds	r3, #80	@ 0x50
 8003a56:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	601a      	str	r2, [r3, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e042      	b.n	8003b20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd f936 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	@ 0x24
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f82b 	bl	8003b28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b0c0      	sub	sp, #256	@ 0x100
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	68d9      	ldr	r1, [r3, #12]
 8003b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	ea40 0301 	orr.w	r3, r0, r1
 8003b50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b80:	f021 010c 	bic.w	r1, r1, #12
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba2:	6999      	ldr	r1, [r3, #24]
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	ea40 0301 	orr.w	r3, r0, r1
 8003bae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b8f      	ldr	r3, [pc, #572]	@ (8003df4 <UART_SetConfig+0x2cc>)
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d005      	beq.n	8003bc8 <UART_SetConfig+0xa0>
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8003df8 <UART_SetConfig+0x2d0>)
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d104      	bne.n	8003bd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc8:	f7fe fa98 	bl	80020fc <HAL_RCC_GetPCLK2Freq>
 8003bcc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bd0:	e003      	b.n	8003bda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bd2:	f7fe fa7f 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8003bd6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003be4:	f040 810c 	bne.w	8003e00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bec:	2200      	movs	r2, #0
 8003bee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bf2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	1891      	adds	r1, r2, r2
 8003c00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c02:	415b      	adcs	r3, r3
 8003c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	eb12 0801 	adds.w	r8, r2, r1
 8003c10:	4629      	mov	r1, r5
 8003c12:	eb43 0901 	adc.w	r9, r3, r1
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c2a:	4690      	mov	r8, r2
 8003c2c:	4699      	mov	r9, r3
 8003c2e:	4623      	mov	r3, r4
 8003c30:	eb18 0303 	adds.w	r3, r8, r3
 8003c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c38:	462b      	mov	r3, r5
 8003c3a:	eb49 0303 	adc.w	r3, r9, r3
 8003c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c56:	460b      	mov	r3, r1
 8003c58:	18db      	adds	r3, r3, r3
 8003c5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	eb42 0303 	adc.w	r3, r2, r3
 8003c62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c6c:	f7fc fb20 	bl	80002b0 <__aeabi_uldivmod>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4b61      	ldr	r3, [pc, #388]	@ (8003dfc <UART_SetConfig+0x2d4>)
 8003c76:	fba3 2302 	umull	r2, r3, r3, r2
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	011c      	lsls	r4, r3, #4
 8003c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cc0:	4692      	mov	sl, r2
 8003cc2:	469b      	mov	fp, r3
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cce:	464b      	mov	r3, r9
 8003cd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003cd4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ce4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ce8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cec:	460b      	mov	r3, r1
 8003cee:	18db      	adds	r3, r3, r3
 8003cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	eb42 0303 	adc.w	r3, r2, r3
 8003cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d02:	f7fc fad5 	bl	80002b0 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003dfc <UART_SetConfig+0x2d4>)
 8003d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2264      	movs	r2, #100	@ 0x64
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	1acb      	subs	r3, r1, r3
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d22:	4b36      	ldr	r3, [pc, #216]	@ (8003dfc <UART_SetConfig+0x2d4>)
 8003d24:	fba3 2302 	umull	r2, r3, r3, r2
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d30:	441c      	add	r4, r3
 8003d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d44:	4642      	mov	r2, r8
 8003d46:	464b      	mov	r3, r9
 8003d48:	1891      	adds	r1, r2, r2
 8003d4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d4c:	415b      	adcs	r3, r3
 8003d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d54:	4641      	mov	r1, r8
 8003d56:	1851      	adds	r1, r2, r1
 8003d58:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	414b      	adcs	r3, r1
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d6c:	4659      	mov	r1, fp
 8003d6e:	00cb      	lsls	r3, r1, #3
 8003d70:	4651      	mov	r1, sl
 8003d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d76:	4651      	mov	r1, sl
 8003d78:	00ca      	lsls	r2, r1, #3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4642      	mov	r2, r8
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d88:	464b      	mov	r3, r9
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003da0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003da8:	460b      	mov	r3, r1
 8003daa:	18db      	adds	r3, r3, r3
 8003dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dae:	4613      	mov	r3, r2
 8003db0:	eb42 0303 	adc.w	r3, r2, r3
 8003db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003db6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dbe:	f7fc fa77 	bl	80002b0 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dfc <UART_SetConfig+0x2d4>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	@ 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	3332      	adds	r3, #50	@ 0x32
 8003dda:	4a08      	ldr	r2, [pc, #32]	@ (8003dfc <UART_SetConfig+0x2d4>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 0207 	and.w	r2, r3, #7
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4422      	add	r2, r4
 8003dee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003df0:	e106      	b.n	8004000 <UART_SetConfig+0x4d8>
 8003df2:	bf00      	nop
 8003df4:	40011000 	.word	0x40011000
 8003df8:	40011400 	.word	0x40011400
 8003dfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e12:	4642      	mov	r2, r8
 8003e14:	464b      	mov	r3, r9
 8003e16:	1891      	adds	r1, r2, r2
 8003e18:	6239      	str	r1, [r7, #32]
 8003e1a:	415b      	adcs	r3, r3
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e22:	4641      	mov	r1, r8
 8003e24:	1854      	adds	r4, r2, r1
 8003e26:	4649      	mov	r1, r9
 8003e28:	eb43 0501 	adc.w	r5, r3, r1
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	00eb      	lsls	r3, r5, #3
 8003e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3a:	00e2      	lsls	r2, r4, #3
 8003e3c:	4614      	mov	r4, r2
 8003e3e:	461d      	mov	r5, r3
 8003e40:	4643      	mov	r3, r8
 8003e42:	18e3      	adds	r3, r4, r3
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e48:	464b      	mov	r3, r9
 8003e4a:	eb45 0303 	adc.w	r3, r5, r3
 8003e4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e6e:	4629      	mov	r1, r5
 8003e70:	008b      	lsls	r3, r1, #2
 8003e72:	4621      	mov	r1, r4
 8003e74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e78:	4621      	mov	r1, r4
 8003e7a:	008a      	lsls	r2, r1, #2
 8003e7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e80:	f7fc fa16 	bl	80002b0 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4b60      	ldr	r3, [pc, #384]	@ (800400c <UART_SetConfig+0x4e4>)
 8003e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	011c      	lsls	r4, r3, #4
 8003e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ea0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	61b9      	str	r1, [r7, #24]
 8003eac:	415b      	adcs	r3, r3
 8003eae:	61fb      	str	r3, [r7, #28]
 8003eb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6139      	str	r1, [r7, #16]
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ee8:	464b      	mov	r3, r9
 8003eea:	460a      	mov	r2, r1
 8003eec:	eb42 0303 	adc.w	r3, r2, r3
 8003ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003efe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	008b      	lsls	r3, r1, #2
 8003f10:	4641      	mov	r1, r8
 8003f12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f16:	4641      	mov	r1, r8
 8003f18:	008a      	lsls	r2, r1, #2
 8003f1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f1e:	f7fc f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b38      	ldr	r3, [pc, #224]	@ (800400c <UART_SetConfig+0x4e4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	@ 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	3332      	adds	r3, #50	@ 0x32
 8003f3c:	4a33      	ldr	r2, [pc, #204]	@ (800400c <UART_SetConfig+0x4e4>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f48:	441c      	add	r4, r3
 8003f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f4e:	2200      	movs	r2, #0
 8003f50:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f52:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	1891      	adds	r1, r2, r2
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	415b      	adcs	r3, r3
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f68:	4641      	mov	r1, r8
 8003f6a:	1851      	adds	r1, r2, r1
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	4649      	mov	r1, r9
 8003f70:	414b      	adcs	r3, r1
 8003f72:	607b      	str	r3, [r7, #4]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f80:	4659      	mov	r1, fp
 8003f82:	00cb      	lsls	r3, r1, #3
 8003f84:	4651      	mov	r1, sl
 8003f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	00ca      	lsls	r2, r1, #3
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	4642      	mov	r2, r8
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	460a      	mov	r2, r1
 8003f9e:	eb42 0303 	adc.w	r3, r2, r3
 8003fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fae:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	008b      	lsls	r3, r1, #2
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	008a      	lsls	r2, r1, #2
 8003fca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fce:	f7fc f96f 	bl	80002b0 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <UART_SetConfig+0x4e4>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	@ 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	3332      	adds	r3, #50	@ 0x32
 8003fea:	4a08      	ldr	r2, [pc, #32]	@ (800400c <UART_SetConfig+0x4e4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4422      	add	r2, r4
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800400c:	51eb851f 	.word	0x51eb851f

08004010 <siprintf>:
 8004010:	b40e      	push	{r1, r2, r3}
 8004012:	b500      	push	{lr}
 8004014:	b09c      	sub	sp, #112	@ 0x70
 8004016:	ab1d      	add	r3, sp, #116	@ 0x74
 8004018:	9002      	str	r0, [sp, #8]
 800401a:	9006      	str	r0, [sp, #24]
 800401c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004020:	4809      	ldr	r0, [pc, #36]	@ (8004048 <siprintf+0x38>)
 8004022:	9107      	str	r1, [sp, #28]
 8004024:	9104      	str	r1, [sp, #16]
 8004026:	4909      	ldr	r1, [pc, #36]	@ (800404c <siprintf+0x3c>)
 8004028:	f853 2b04 	ldr.w	r2, [r3], #4
 800402c:	9105      	str	r1, [sp, #20]
 800402e:	6800      	ldr	r0, [r0, #0]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	a902      	add	r1, sp, #8
 8004034:	f000 f994 	bl	8004360 <_svfiprintf_r>
 8004038:	9b02      	ldr	r3, [sp, #8]
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	b01c      	add	sp, #112	@ 0x70
 8004040:	f85d eb04 	ldr.w	lr, [sp], #4
 8004044:	b003      	add	sp, #12
 8004046:	4770      	bx	lr
 8004048:	2000000c 	.word	0x2000000c
 800404c:	ffff0208 	.word	0xffff0208

08004050 <memset>:
 8004050:	4402      	add	r2, r0
 8004052:	4603      	mov	r3, r0
 8004054:	4293      	cmp	r3, r2
 8004056:	d100      	bne.n	800405a <memset+0xa>
 8004058:	4770      	bx	lr
 800405a:	f803 1b01 	strb.w	r1, [r3], #1
 800405e:	e7f9      	b.n	8004054 <memset+0x4>

08004060 <__errno>:
 8004060:	4b01      	ldr	r3, [pc, #4]	@ (8004068 <__errno+0x8>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	2000000c 	.word	0x2000000c

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4d0d      	ldr	r5, [pc, #52]	@ (80040a4 <__libc_init_array+0x38>)
 8004070:	4c0d      	ldr	r4, [pc, #52]	@ (80040a8 <__libc_init_array+0x3c>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	2600      	movs	r6, #0
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	4d0b      	ldr	r5, [pc, #44]	@ (80040ac <__libc_init_array+0x40>)
 800407e:	4c0c      	ldr	r4, [pc, #48]	@ (80040b0 <__libc_init_array+0x44>)
 8004080:	f000 fc66 	bl	8004950 <_init>
 8004084:	1b64      	subs	r4, r4, r5
 8004086:	10a4      	asrs	r4, r4, #2
 8004088:	2600      	movs	r6, #0
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	080049dc 	.word	0x080049dc
 80040a8:	080049dc 	.word	0x080049dc
 80040ac:	080049dc 	.word	0x080049dc
 80040b0:	080049e0 	.word	0x080049e0

080040b4 <__retarget_lock_acquire_recursive>:
 80040b4:	4770      	bx	lr

080040b6 <__retarget_lock_release_recursive>:
 80040b6:	4770      	bx	lr

080040b8 <_free_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4605      	mov	r5, r0
 80040bc:	2900      	cmp	r1, #0
 80040be:	d041      	beq.n	8004144 <_free_r+0x8c>
 80040c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c4:	1f0c      	subs	r4, r1, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfb8      	it	lt
 80040ca:	18e4      	addlt	r4, r4, r3
 80040cc:	f000 f8e0 	bl	8004290 <__malloc_lock>
 80040d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <_free_r+0x90>)
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	b933      	cbnz	r3, 80040e4 <_free_r+0x2c>
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6014      	str	r4, [r2, #0]
 80040da:	4628      	mov	r0, r5
 80040dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e0:	f000 b8dc 	b.w	800429c <__malloc_unlock>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d908      	bls.n	80040fa <_free_r+0x42>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	1821      	adds	r1, r4, r0
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf01      	itttt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	1809      	addeq	r1, r1, r0
 80040f6:	6021      	streq	r1, [r4, #0]
 80040f8:	e7ed      	b.n	80040d6 <_free_r+0x1e>
 80040fa:	461a      	mov	r2, r3
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b10b      	cbz	r3, 8004104 <_free_r+0x4c>
 8004100:	42a3      	cmp	r3, r4
 8004102:	d9fa      	bls.n	80040fa <_free_r+0x42>
 8004104:	6811      	ldr	r1, [r2, #0]
 8004106:	1850      	adds	r0, r2, r1
 8004108:	42a0      	cmp	r0, r4
 800410a:	d10b      	bne.n	8004124 <_free_r+0x6c>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	4401      	add	r1, r0
 8004110:	1850      	adds	r0, r2, r1
 8004112:	4283      	cmp	r3, r0
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	d1e0      	bne.n	80040da <_free_r+0x22>
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	6053      	str	r3, [r2, #4]
 800411e:	4408      	add	r0, r1
 8004120:	6010      	str	r0, [r2, #0]
 8004122:	e7da      	b.n	80040da <_free_r+0x22>
 8004124:	d902      	bls.n	800412c <_free_r+0x74>
 8004126:	230c      	movs	r3, #12
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	e7d6      	b.n	80040da <_free_r+0x22>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	1821      	adds	r1, r4, r0
 8004130:	428b      	cmp	r3, r1
 8004132:	bf04      	itt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	6063      	str	r3, [r4, #4]
 800413a:	bf04      	itt	eq
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	6054      	str	r4, [r2, #4]
 8004142:	e7ca      	b.n	80040da <_free_r+0x22>
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	bf00      	nop
 8004148:	200002a0 	.word	0x200002a0

0800414c <sbrk_aligned>:
 800414c:	b570      	push	{r4, r5, r6, lr}
 800414e:	4e0f      	ldr	r6, [pc, #60]	@ (800418c <sbrk_aligned+0x40>)
 8004150:	460c      	mov	r4, r1
 8004152:	6831      	ldr	r1, [r6, #0]
 8004154:	4605      	mov	r5, r0
 8004156:	b911      	cbnz	r1, 800415e <sbrk_aligned+0x12>
 8004158:	f000 fba6 	bl	80048a8 <_sbrk_r>
 800415c:	6030      	str	r0, [r6, #0]
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	f000 fba1 	bl	80048a8 <_sbrk_r>
 8004166:	1c43      	adds	r3, r0, #1
 8004168:	d103      	bne.n	8004172 <sbrk_aligned+0x26>
 800416a:	f04f 34ff 	mov.w	r4, #4294967295
 800416e:	4620      	mov	r0, r4
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	1cc4      	adds	r4, r0, #3
 8004174:	f024 0403 	bic.w	r4, r4, #3
 8004178:	42a0      	cmp	r0, r4
 800417a:	d0f8      	beq.n	800416e <sbrk_aligned+0x22>
 800417c:	1a21      	subs	r1, r4, r0
 800417e:	4628      	mov	r0, r5
 8004180:	f000 fb92 	bl	80048a8 <_sbrk_r>
 8004184:	3001      	adds	r0, #1
 8004186:	d1f2      	bne.n	800416e <sbrk_aligned+0x22>
 8004188:	e7ef      	b.n	800416a <sbrk_aligned+0x1e>
 800418a:	bf00      	nop
 800418c:	2000029c 	.word	0x2000029c

08004190 <_malloc_r>:
 8004190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004194:	1ccd      	adds	r5, r1, #3
 8004196:	f025 0503 	bic.w	r5, r5, #3
 800419a:	3508      	adds	r5, #8
 800419c:	2d0c      	cmp	r5, #12
 800419e:	bf38      	it	cc
 80041a0:	250c      	movcc	r5, #12
 80041a2:	2d00      	cmp	r5, #0
 80041a4:	4606      	mov	r6, r0
 80041a6:	db01      	blt.n	80041ac <_malloc_r+0x1c>
 80041a8:	42a9      	cmp	r1, r5
 80041aa:	d904      	bls.n	80041b6 <_malloc_r+0x26>
 80041ac:	230c      	movs	r3, #12
 80041ae:	6033      	str	r3, [r6, #0]
 80041b0:	2000      	movs	r0, #0
 80041b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800428c <_malloc_r+0xfc>
 80041ba:	f000 f869 	bl	8004290 <__malloc_lock>
 80041be:	f8d8 3000 	ldr.w	r3, [r8]
 80041c2:	461c      	mov	r4, r3
 80041c4:	bb44      	cbnz	r4, 8004218 <_malloc_r+0x88>
 80041c6:	4629      	mov	r1, r5
 80041c8:	4630      	mov	r0, r6
 80041ca:	f7ff ffbf 	bl	800414c <sbrk_aligned>
 80041ce:	1c43      	adds	r3, r0, #1
 80041d0:	4604      	mov	r4, r0
 80041d2:	d158      	bne.n	8004286 <_malloc_r+0xf6>
 80041d4:	f8d8 4000 	ldr.w	r4, [r8]
 80041d8:	4627      	mov	r7, r4
 80041da:	2f00      	cmp	r7, #0
 80041dc:	d143      	bne.n	8004266 <_malloc_r+0xd6>
 80041de:	2c00      	cmp	r4, #0
 80041e0:	d04b      	beq.n	800427a <_malloc_r+0xea>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	4639      	mov	r1, r7
 80041e6:	4630      	mov	r0, r6
 80041e8:	eb04 0903 	add.w	r9, r4, r3
 80041ec:	f000 fb5c 	bl	80048a8 <_sbrk_r>
 80041f0:	4581      	cmp	r9, r0
 80041f2:	d142      	bne.n	800427a <_malloc_r+0xea>
 80041f4:	6821      	ldr	r1, [r4, #0]
 80041f6:	1a6d      	subs	r5, r5, r1
 80041f8:	4629      	mov	r1, r5
 80041fa:	4630      	mov	r0, r6
 80041fc:	f7ff ffa6 	bl	800414c <sbrk_aligned>
 8004200:	3001      	adds	r0, #1
 8004202:	d03a      	beq.n	800427a <_malloc_r+0xea>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	442b      	add	r3, r5
 8004208:	6023      	str	r3, [r4, #0]
 800420a:	f8d8 3000 	ldr.w	r3, [r8]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	bb62      	cbnz	r2, 800426c <_malloc_r+0xdc>
 8004212:	f8c8 7000 	str.w	r7, [r8]
 8004216:	e00f      	b.n	8004238 <_malloc_r+0xa8>
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	1b52      	subs	r2, r2, r5
 800421c:	d420      	bmi.n	8004260 <_malloc_r+0xd0>
 800421e:	2a0b      	cmp	r2, #11
 8004220:	d917      	bls.n	8004252 <_malloc_r+0xc2>
 8004222:	1961      	adds	r1, r4, r5
 8004224:	42a3      	cmp	r3, r4
 8004226:	6025      	str	r5, [r4, #0]
 8004228:	bf18      	it	ne
 800422a:	6059      	strne	r1, [r3, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	bf08      	it	eq
 8004230:	f8c8 1000 	streq.w	r1, [r8]
 8004234:	5162      	str	r2, [r4, r5]
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	4630      	mov	r0, r6
 800423a:	f000 f82f 	bl	800429c <__malloc_unlock>
 800423e:	f104 000b 	add.w	r0, r4, #11
 8004242:	1d23      	adds	r3, r4, #4
 8004244:	f020 0007 	bic.w	r0, r0, #7
 8004248:	1ac2      	subs	r2, r0, r3
 800424a:	bf1c      	itt	ne
 800424c:	1a1b      	subne	r3, r3, r0
 800424e:	50a3      	strne	r3, [r4, r2]
 8004250:	e7af      	b.n	80041b2 <_malloc_r+0x22>
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	42a3      	cmp	r3, r4
 8004256:	bf0c      	ite	eq
 8004258:	f8c8 2000 	streq.w	r2, [r8]
 800425c:	605a      	strne	r2, [r3, #4]
 800425e:	e7eb      	b.n	8004238 <_malloc_r+0xa8>
 8004260:	4623      	mov	r3, r4
 8004262:	6864      	ldr	r4, [r4, #4]
 8004264:	e7ae      	b.n	80041c4 <_malloc_r+0x34>
 8004266:	463c      	mov	r4, r7
 8004268:	687f      	ldr	r7, [r7, #4]
 800426a:	e7b6      	b.n	80041da <_malloc_r+0x4a>
 800426c:	461a      	mov	r2, r3
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	42a3      	cmp	r3, r4
 8004272:	d1fb      	bne.n	800426c <_malloc_r+0xdc>
 8004274:	2300      	movs	r3, #0
 8004276:	6053      	str	r3, [r2, #4]
 8004278:	e7de      	b.n	8004238 <_malloc_r+0xa8>
 800427a:	230c      	movs	r3, #12
 800427c:	6033      	str	r3, [r6, #0]
 800427e:	4630      	mov	r0, r6
 8004280:	f000 f80c 	bl	800429c <__malloc_unlock>
 8004284:	e794      	b.n	80041b0 <_malloc_r+0x20>
 8004286:	6005      	str	r5, [r0, #0]
 8004288:	e7d6      	b.n	8004238 <_malloc_r+0xa8>
 800428a:	bf00      	nop
 800428c:	200002a0 	.word	0x200002a0

08004290 <__malloc_lock>:
 8004290:	4801      	ldr	r0, [pc, #4]	@ (8004298 <__malloc_lock+0x8>)
 8004292:	f7ff bf0f 	b.w	80040b4 <__retarget_lock_acquire_recursive>
 8004296:	bf00      	nop
 8004298:	20000298 	.word	0x20000298

0800429c <__malloc_unlock>:
 800429c:	4801      	ldr	r0, [pc, #4]	@ (80042a4 <__malloc_unlock+0x8>)
 800429e:	f7ff bf0a 	b.w	80040b6 <__retarget_lock_release_recursive>
 80042a2:	bf00      	nop
 80042a4:	20000298 	.word	0x20000298

080042a8 <__ssputs_r>:
 80042a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042ac:	688e      	ldr	r6, [r1, #8]
 80042ae:	461f      	mov	r7, r3
 80042b0:	42be      	cmp	r6, r7
 80042b2:	680b      	ldr	r3, [r1, #0]
 80042b4:	4682      	mov	sl, r0
 80042b6:	460c      	mov	r4, r1
 80042b8:	4690      	mov	r8, r2
 80042ba:	d82d      	bhi.n	8004318 <__ssputs_r+0x70>
 80042bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042c4:	d026      	beq.n	8004314 <__ssputs_r+0x6c>
 80042c6:	6965      	ldr	r5, [r4, #20]
 80042c8:	6909      	ldr	r1, [r1, #16]
 80042ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ce:	eba3 0901 	sub.w	r9, r3, r1
 80042d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042d6:	1c7b      	adds	r3, r7, #1
 80042d8:	444b      	add	r3, r9
 80042da:	106d      	asrs	r5, r5, #1
 80042dc:	429d      	cmp	r5, r3
 80042de:	bf38      	it	cc
 80042e0:	461d      	movcc	r5, r3
 80042e2:	0553      	lsls	r3, r2, #21
 80042e4:	d527      	bpl.n	8004336 <__ssputs_r+0x8e>
 80042e6:	4629      	mov	r1, r5
 80042e8:	f7ff ff52 	bl	8004190 <_malloc_r>
 80042ec:	4606      	mov	r6, r0
 80042ee:	b360      	cbz	r0, 800434a <__ssputs_r+0xa2>
 80042f0:	6921      	ldr	r1, [r4, #16]
 80042f2:	464a      	mov	r2, r9
 80042f4:	f000 fae8 	bl	80048c8 <memcpy>
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	6126      	str	r6, [r4, #16]
 8004306:	6165      	str	r5, [r4, #20]
 8004308:	444e      	add	r6, r9
 800430a:	eba5 0509 	sub.w	r5, r5, r9
 800430e:	6026      	str	r6, [r4, #0]
 8004310:	60a5      	str	r5, [r4, #8]
 8004312:	463e      	mov	r6, r7
 8004314:	42be      	cmp	r6, r7
 8004316:	d900      	bls.n	800431a <__ssputs_r+0x72>
 8004318:	463e      	mov	r6, r7
 800431a:	6820      	ldr	r0, [r4, #0]
 800431c:	4632      	mov	r2, r6
 800431e:	4641      	mov	r1, r8
 8004320:	f000 faa8 	bl	8004874 <memmove>
 8004324:	68a3      	ldr	r3, [r4, #8]
 8004326:	1b9b      	subs	r3, r3, r6
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	4433      	add	r3, r6
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	2000      	movs	r0, #0
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	462a      	mov	r2, r5
 8004338:	f000 fad4 	bl	80048e4 <_realloc_r>
 800433c:	4606      	mov	r6, r0
 800433e:	2800      	cmp	r0, #0
 8004340:	d1e0      	bne.n	8004304 <__ssputs_r+0x5c>
 8004342:	6921      	ldr	r1, [r4, #16]
 8004344:	4650      	mov	r0, sl
 8004346:	f7ff feb7 	bl	80040b8 <_free_r>
 800434a:	230c      	movs	r3, #12
 800434c:	f8ca 3000 	str.w	r3, [sl]
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004356:	81a3      	strh	r3, [r4, #12]
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	e7e9      	b.n	8004332 <__ssputs_r+0x8a>
	...

08004360 <_svfiprintf_r>:
 8004360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004364:	4698      	mov	r8, r3
 8004366:	898b      	ldrh	r3, [r1, #12]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	b09d      	sub	sp, #116	@ 0x74
 800436c:	4607      	mov	r7, r0
 800436e:	460d      	mov	r5, r1
 8004370:	4614      	mov	r4, r2
 8004372:	d510      	bpl.n	8004396 <_svfiprintf_r+0x36>
 8004374:	690b      	ldr	r3, [r1, #16]
 8004376:	b973      	cbnz	r3, 8004396 <_svfiprintf_r+0x36>
 8004378:	2140      	movs	r1, #64	@ 0x40
 800437a:	f7ff ff09 	bl	8004190 <_malloc_r>
 800437e:	6028      	str	r0, [r5, #0]
 8004380:	6128      	str	r0, [r5, #16]
 8004382:	b930      	cbnz	r0, 8004392 <_svfiprintf_r+0x32>
 8004384:	230c      	movs	r3, #12
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	b01d      	add	sp, #116	@ 0x74
 800438e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004392:	2340      	movs	r3, #64	@ 0x40
 8004394:	616b      	str	r3, [r5, #20]
 8004396:	2300      	movs	r3, #0
 8004398:	9309      	str	r3, [sp, #36]	@ 0x24
 800439a:	2320      	movs	r3, #32
 800439c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043a4:	2330      	movs	r3, #48	@ 0x30
 80043a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004544 <_svfiprintf_r+0x1e4>
 80043aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043ae:	f04f 0901 	mov.w	r9, #1
 80043b2:	4623      	mov	r3, r4
 80043b4:	469a      	mov	sl, r3
 80043b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ba:	b10a      	cbz	r2, 80043c0 <_svfiprintf_r+0x60>
 80043bc:	2a25      	cmp	r2, #37	@ 0x25
 80043be:	d1f9      	bne.n	80043b4 <_svfiprintf_r+0x54>
 80043c0:	ebba 0b04 	subs.w	fp, sl, r4
 80043c4:	d00b      	beq.n	80043de <_svfiprintf_r+0x7e>
 80043c6:	465b      	mov	r3, fp
 80043c8:	4622      	mov	r2, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	4638      	mov	r0, r7
 80043ce:	f7ff ff6b 	bl	80042a8 <__ssputs_r>
 80043d2:	3001      	adds	r0, #1
 80043d4:	f000 80a7 	beq.w	8004526 <_svfiprintf_r+0x1c6>
 80043d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043da:	445a      	add	r2, fp
 80043dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043de:	f89a 3000 	ldrb.w	r3, [sl]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 809f 	beq.w	8004526 <_svfiprintf_r+0x1c6>
 80043e8:	2300      	movs	r3, #0
 80043ea:	f04f 32ff 	mov.w	r2, #4294967295
 80043ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043f2:	f10a 0a01 	add.w	sl, sl, #1
 80043f6:	9304      	str	r3, [sp, #16]
 80043f8:	9307      	str	r3, [sp, #28]
 80043fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004400:	4654      	mov	r4, sl
 8004402:	2205      	movs	r2, #5
 8004404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004408:	484e      	ldr	r0, [pc, #312]	@ (8004544 <_svfiprintf_r+0x1e4>)
 800440a:	f7fb ff01 	bl	8000210 <memchr>
 800440e:	9a04      	ldr	r2, [sp, #16]
 8004410:	b9d8      	cbnz	r0, 800444a <_svfiprintf_r+0xea>
 8004412:	06d0      	lsls	r0, r2, #27
 8004414:	bf44      	itt	mi
 8004416:	2320      	movmi	r3, #32
 8004418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800441c:	0711      	lsls	r1, r2, #28
 800441e:	bf44      	itt	mi
 8004420:	232b      	movmi	r3, #43	@ 0x2b
 8004422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004426:	f89a 3000 	ldrb.w	r3, [sl]
 800442a:	2b2a      	cmp	r3, #42	@ 0x2a
 800442c:	d015      	beq.n	800445a <_svfiprintf_r+0xfa>
 800442e:	9a07      	ldr	r2, [sp, #28]
 8004430:	4654      	mov	r4, sl
 8004432:	2000      	movs	r0, #0
 8004434:	f04f 0c0a 	mov.w	ip, #10
 8004438:	4621      	mov	r1, r4
 800443a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800443e:	3b30      	subs	r3, #48	@ 0x30
 8004440:	2b09      	cmp	r3, #9
 8004442:	d94b      	bls.n	80044dc <_svfiprintf_r+0x17c>
 8004444:	b1b0      	cbz	r0, 8004474 <_svfiprintf_r+0x114>
 8004446:	9207      	str	r2, [sp, #28]
 8004448:	e014      	b.n	8004474 <_svfiprintf_r+0x114>
 800444a:	eba0 0308 	sub.w	r3, r0, r8
 800444e:	fa09 f303 	lsl.w	r3, r9, r3
 8004452:	4313      	orrs	r3, r2
 8004454:	9304      	str	r3, [sp, #16]
 8004456:	46a2      	mov	sl, r4
 8004458:	e7d2      	b.n	8004400 <_svfiprintf_r+0xa0>
 800445a:	9b03      	ldr	r3, [sp, #12]
 800445c:	1d19      	adds	r1, r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	9103      	str	r1, [sp, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfbb      	ittet	lt
 8004466:	425b      	neglt	r3, r3
 8004468:	f042 0202 	orrlt.w	r2, r2, #2
 800446c:	9307      	strge	r3, [sp, #28]
 800446e:	9307      	strlt	r3, [sp, #28]
 8004470:	bfb8      	it	lt
 8004472:	9204      	strlt	r2, [sp, #16]
 8004474:	7823      	ldrb	r3, [r4, #0]
 8004476:	2b2e      	cmp	r3, #46	@ 0x2e
 8004478:	d10a      	bne.n	8004490 <_svfiprintf_r+0x130>
 800447a:	7863      	ldrb	r3, [r4, #1]
 800447c:	2b2a      	cmp	r3, #42	@ 0x2a
 800447e:	d132      	bne.n	80044e6 <_svfiprintf_r+0x186>
 8004480:	9b03      	ldr	r3, [sp, #12]
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	9203      	str	r2, [sp, #12]
 8004488:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800448c:	3402      	adds	r4, #2
 800448e:	9305      	str	r3, [sp, #20]
 8004490:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004554 <_svfiprintf_r+0x1f4>
 8004494:	7821      	ldrb	r1, [r4, #0]
 8004496:	2203      	movs	r2, #3
 8004498:	4650      	mov	r0, sl
 800449a:	f7fb feb9 	bl	8000210 <memchr>
 800449e:	b138      	cbz	r0, 80044b0 <_svfiprintf_r+0x150>
 80044a0:	9b04      	ldr	r3, [sp, #16]
 80044a2:	eba0 000a 	sub.w	r0, r0, sl
 80044a6:	2240      	movs	r2, #64	@ 0x40
 80044a8:	4082      	lsls	r2, r0
 80044aa:	4313      	orrs	r3, r2
 80044ac:	3401      	adds	r4, #1
 80044ae:	9304      	str	r3, [sp, #16]
 80044b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b4:	4824      	ldr	r0, [pc, #144]	@ (8004548 <_svfiprintf_r+0x1e8>)
 80044b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044ba:	2206      	movs	r2, #6
 80044bc:	f7fb fea8 	bl	8000210 <memchr>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d036      	beq.n	8004532 <_svfiprintf_r+0x1d2>
 80044c4:	4b21      	ldr	r3, [pc, #132]	@ (800454c <_svfiprintf_r+0x1ec>)
 80044c6:	bb1b      	cbnz	r3, 8004510 <_svfiprintf_r+0x1b0>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	3307      	adds	r3, #7
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	3308      	adds	r3, #8
 80044d2:	9303      	str	r3, [sp, #12]
 80044d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044d6:	4433      	add	r3, r6
 80044d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044da:	e76a      	b.n	80043b2 <_svfiprintf_r+0x52>
 80044dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044e0:	460c      	mov	r4, r1
 80044e2:	2001      	movs	r0, #1
 80044e4:	e7a8      	b.n	8004438 <_svfiprintf_r+0xd8>
 80044e6:	2300      	movs	r3, #0
 80044e8:	3401      	adds	r4, #1
 80044ea:	9305      	str	r3, [sp, #20]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f04f 0c0a 	mov.w	ip, #10
 80044f2:	4620      	mov	r0, r4
 80044f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044f8:	3a30      	subs	r2, #48	@ 0x30
 80044fa:	2a09      	cmp	r2, #9
 80044fc:	d903      	bls.n	8004506 <_svfiprintf_r+0x1a6>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0c6      	beq.n	8004490 <_svfiprintf_r+0x130>
 8004502:	9105      	str	r1, [sp, #20]
 8004504:	e7c4      	b.n	8004490 <_svfiprintf_r+0x130>
 8004506:	fb0c 2101 	mla	r1, ip, r1, r2
 800450a:	4604      	mov	r4, r0
 800450c:	2301      	movs	r3, #1
 800450e:	e7f0      	b.n	80044f2 <_svfiprintf_r+0x192>
 8004510:	ab03      	add	r3, sp, #12
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	462a      	mov	r2, r5
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <_svfiprintf_r+0x1f0>)
 8004518:	a904      	add	r1, sp, #16
 800451a:	4638      	mov	r0, r7
 800451c:	f3af 8000 	nop.w
 8004520:	1c42      	adds	r2, r0, #1
 8004522:	4606      	mov	r6, r0
 8004524:	d1d6      	bne.n	80044d4 <_svfiprintf_r+0x174>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	065b      	lsls	r3, r3, #25
 800452a:	f53f af2d 	bmi.w	8004388 <_svfiprintf_r+0x28>
 800452e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004530:	e72c      	b.n	800438c <_svfiprintf_r+0x2c>
 8004532:	ab03      	add	r3, sp, #12
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	462a      	mov	r2, r5
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <_svfiprintf_r+0x1f0>)
 800453a:	a904      	add	r1, sp, #16
 800453c:	4638      	mov	r0, r7
 800453e:	f000 f879 	bl	8004634 <_printf_i>
 8004542:	e7ed      	b.n	8004520 <_svfiprintf_r+0x1c0>
 8004544:	080049a0 	.word	0x080049a0
 8004548:	080049aa 	.word	0x080049aa
 800454c:	00000000 	.word	0x00000000
 8004550:	080042a9 	.word	0x080042a9
 8004554:	080049a6 	.word	0x080049a6

08004558 <_printf_common>:
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	4616      	mov	r6, r2
 800455e:	4698      	mov	r8, r3
 8004560:	688a      	ldr	r2, [r1, #8]
 8004562:	690b      	ldr	r3, [r1, #16]
 8004564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004568:	4293      	cmp	r3, r2
 800456a:	bfb8      	it	lt
 800456c:	4613      	movlt	r3, r2
 800456e:	6033      	str	r3, [r6, #0]
 8004570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004574:	4607      	mov	r7, r0
 8004576:	460c      	mov	r4, r1
 8004578:	b10a      	cbz	r2, 800457e <_printf_common+0x26>
 800457a:	3301      	adds	r3, #1
 800457c:	6033      	str	r3, [r6, #0]
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	0699      	lsls	r1, r3, #26
 8004582:	bf42      	ittt	mi
 8004584:	6833      	ldrmi	r3, [r6, #0]
 8004586:	3302      	addmi	r3, #2
 8004588:	6033      	strmi	r3, [r6, #0]
 800458a:	6825      	ldr	r5, [r4, #0]
 800458c:	f015 0506 	ands.w	r5, r5, #6
 8004590:	d106      	bne.n	80045a0 <_printf_common+0x48>
 8004592:	f104 0a19 	add.w	sl, r4, #25
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	6832      	ldr	r2, [r6, #0]
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	42ab      	cmp	r3, r5
 800459e:	dc26      	bgt.n	80045ee <_printf_common+0x96>
 80045a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045a4:	6822      	ldr	r2, [r4, #0]
 80045a6:	3b00      	subs	r3, #0
 80045a8:	bf18      	it	ne
 80045aa:	2301      	movne	r3, #1
 80045ac:	0692      	lsls	r2, r2, #26
 80045ae:	d42b      	bmi.n	8004608 <_printf_common+0xb0>
 80045b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045b4:	4641      	mov	r1, r8
 80045b6:	4638      	mov	r0, r7
 80045b8:	47c8      	blx	r9
 80045ba:	3001      	adds	r0, #1
 80045bc:	d01e      	beq.n	80045fc <_printf_common+0xa4>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	6922      	ldr	r2, [r4, #16]
 80045c2:	f003 0306 	and.w	r3, r3, #6
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	bf02      	ittt	eq
 80045ca:	68e5      	ldreq	r5, [r4, #12]
 80045cc:	6833      	ldreq	r3, [r6, #0]
 80045ce:	1aed      	subeq	r5, r5, r3
 80045d0:	68a3      	ldr	r3, [r4, #8]
 80045d2:	bf0c      	ite	eq
 80045d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d8:	2500      	movne	r5, #0
 80045da:	4293      	cmp	r3, r2
 80045dc:	bfc4      	itt	gt
 80045de:	1a9b      	subgt	r3, r3, r2
 80045e0:	18ed      	addgt	r5, r5, r3
 80045e2:	2600      	movs	r6, #0
 80045e4:	341a      	adds	r4, #26
 80045e6:	42b5      	cmp	r5, r6
 80045e8:	d11a      	bne.n	8004620 <_printf_common+0xc8>
 80045ea:	2000      	movs	r0, #0
 80045ec:	e008      	b.n	8004600 <_printf_common+0xa8>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4641      	mov	r1, r8
 80045f4:	4638      	mov	r0, r7
 80045f6:	47c8      	blx	r9
 80045f8:	3001      	adds	r0, #1
 80045fa:	d103      	bne.n	8004604 <_printf_common+0xac>
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004604:	3501      	adds	r5, #1
 8004606:	e7c6      	b.n	8004596 <_printf_common+0x3e>
 8004608:	18e1      	adds	r1, r4, r3
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	2030      	movs	r0, #48	@ 0x30
 800460e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004612:	4422      	add	r2, r4
 8004614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800461c:	3302      	adds	r3, #2
 800461e:	e7c7      	b.n	80045b0 <_printf_common+0x58>
 8004620:	2301      	movs	r3, #1
 8004622:	4622      	mov	r2, r4
 8004624:	4641      	mov	r1, r8
 8004626:	4638      	mov	r0, r7
 8004628:	47c8      	blx	r9
 800462a:	3001      	adds	r0, #1
 800462c:	d0e6      	beq.n	80045fc <_printf_common+0xa4>
 800462e:	3601      	adds	r6, #1
 8004630:	e7d9      	b.n	80045e6 <_printf_common+0x8e>
	...

08004634 <_printf_i>:
 8004634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	7e0f      	ldrb	r7, [r1, #24]
 800463a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800463c:	2f78      	cmp	r7, #120	@ 0x78
 800463e:	4691      	mov	r9, r2
 8004640:	4680      	mov	r8, r0
 8004642:	460c      	mov	r4, r1
 8004644:	469a      	mov	sl, r3
 8004646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800464a:	d807      	bhi.n	800465c <_printf_i+0x28>
 800464c:	2f62      	cmp	r7, #98	@ 0x62
 800464e:	d80a      	bhi.n	8004666 <_printf_i+0x32>
 8004650:	2f00      	cmp	r7, #0
 8004652:	f000 80d2 	beq.w	80047fa <_printf_i+0x1c6>
 8004656:	2f58      	cmp	r7, #88	@ 0x58
 8004658:	f000 80b9 	beq.w	80047ce <_printf_i+0x19a>
 800465c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004664:	e03a      	b.n	80046dc <_printf_i+0xa8>
 8004666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800466a:	2b15      	cmp	r3, #21
 800466c:	d8f6      	bhi.n	800465c <_printf_i+0x28>
 800466e:	a101      	add	r1, pc, #4	@ (adr r1, 8004674 <_printf_i+0x40>)
 8004670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004674:	080046cd 	.word	0x080046cd
 8004678:	080046e1 	.word	0x080046e1
 800467c:	0800465d 	.word	0x0800465d
 8004680:	0800465d 	.word	0x0800465d
 8004684:	0800465d 	.word	0x0800465d
 8004688:	0800465d 	.word	0x0800465d
 800468c:	080046e1 	.word	0x080046e1
 8004690:	0800465d 	.word	0x0800465d
 8004694:	0800465d 	.word	0x0800465d
 8004698:	0800465d 	.word	0x0800465d
 800469c:	0800465d 	.word	0x0800465d
 80046a0:	080047e1 	.word	0x080047e1
 80046a4:	0800470b 	.word	0x0800470b
 80046a8:	0800479b 	.word	0x0800479b
 80046ac:	0800465d 	.word	0x0800465d
 80046b0:	0800465d 	.word	0x0800465d
 80046b4:	08004803 	.word	0x08004803
 80046b8:	0800465d 	.word	0x0800465d
 80046bc:	0800470b 	.word	0x0800470b
 80046c0:	0800465d 	.word	0x0800465d
 80046c4:	0800465d 	.word	0x0800465d
 80046c8:	080047a3 	.word	0x080047a3
 80046cc:	6833      	ldr	r3, [r6, #0]
 80046ce:	1d1a      	adds	r2, r3, #4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6032      	str	r2, [r6, #0]
 80046d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046dc:	2301      	movs	r3, #1
 80046de:	e09d      	b.n	800481c <_printf_i+0x1e8>
 80046e0:	6833      	ldr	r3, [r6, #0]
 80046e2:	6820      	ldr	r0, [r4, #0]
 80046e4:	1d19      	adds	r1, r3, #4
 80046e6:	6031      	str	r1, [r6, #0]
 80046e8:	0606      	lsls	r6, r0, #24
 80046ea:	d501      	bpl.n	80046f0 <_printf_i+0xbc>
 80046ec:	681d      	ldr	r5, [r3, #0]
 80046ee:	e003      	b.n	80046f8 <_printf_i+0xc4>
 80046f0:	0645      	lsls	r5, r0, #25
 80046f2:	d5fb      	bpl.n	80046ec <_printf_i+0xb8>
 80046f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	da03      	bge.n	8004704 <_printf_i+0xd0>
 80046fc:	232d      	movs	r3, #45	@ 0x2d
 80046fe:	426d      	negs	r5, r5
 8004700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004704:	4859      	ldr	r0, [pc, #356]	@ (800486c <_printf_i+0x238>)
 8004706:	230a      	movs	r3, #10
 8004708:	e011      	b.n	800472e <_printf_i+0xfa>
 800470a:	6821      	ldr	r1, [r4, #0]
 800470c:	6833      	ldr	r3, [r6, #0]
 800470e:	0608      	lsls	r0, r1, #24
 8004710:	f853 5b04 	ldr.w	r5, [r3], #4
 8004714:	d402      	bmi.n	800471c <_printf_i+0xe8>
 8004716:	0649      	lsls	r1, r1, #25
 8004718:	bf48      	it	mi
 800471a:	b2ad      	uxthmi	r5, r5
 800471c:	2f6f      	cmp	r7, #111	@ 0x6f
 800471e:	4853      	ldr	r0, [pc, #332]	@ (800486c <_printf_i+0x238>)
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	bf14      	ite	ne
 8004724:	230a      	movne	r3, #10
 8004726:	2308      	moveq	r3, #8
 8004728:	2100      	movs	r1, #0
 800472a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800472e:	6866      	ldr	r6, [r4, #4]
 8004730:	60a6      	str	r6, [r4, #8]
 8004732:	2e00      	cmp	r6, #0
 8004734:	bfa2      	ittt	ge
 8004736:	6821      	ldrge	r1, [r4, #0]
 8004738:	f021 0104 	bicge.w	r1, r1, #4
 800473c:	6021      	strge	r1, [r4, #0]
 800473e:	b90d      	cbnz	r5, 8004744 <_printf_i+0x110>
 8004740:	2e00      	cmp	r6, #0
 8004742:	d04b      	beq.n	80047dc <_printf_i+0x1a8>
 8004744:	4616      	mov	r6, r2
 8004746:	fbb5 f1f3 	udiv	r1, r5, r3
 800474a:	fb03 5711 	mls	r7, r3, r1, r5
 800474e:	5dc7      	ldrb	r7, [r0, r7]
 8004750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004754:	462f      	mov	r7, r5
 8004756:	42bb      	cmp	r3, r7
 8004758:	460d      	mov	r5, r1
 800475a:	d9f4      	bls.n	8004746 <_printf_i+0x112>
 800475c:	2b08      	cmp	r3, #8
 800475e:	d10b      	bne.n	8004778 <_printf_i+0x144>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	07df      	lsls	r7, r3, #31
 8004764:	d508      	bpl.n	8004778 <_printf_i+0x144>
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	6861      	ldr	r1, [r4, #4]
 800476a:	4299      	cmp	r1, r3
 800476c:	bfde      	ittt	le
 800476e:	2330      	movle	r3, #48	@ 0x30
 8004770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004778:	1b92      	subs	r2, r2, r6
 800477a:	6122      	str	r2, [r4, #16]
 800477c:	f8cd a000 	str.w	sl, [sp]
 8004780:	464b      	mov	r3, r9
 8004782:	aa03      	add	r2, sp, #12
 8004784:	4621      	mov	r1, r4
 8004786:	4640      	mov	r0, r8
 8004788:	f7ff fee6 	bl	8004558 <_printf_common>
 800478c:	3001      	adds	r0, #1
 800478e:	d14a      	bne.n	8004826 <_printf_i+0x1f2>
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	b004      	add	sp, #16
 8004796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	f043 0320 	orr.w	r3, r3, #32
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	4833      	ldr	r0, [pc, #204]	@ (8004870 <_printf_i+0x23c>)
 80047a4:	2778      	movs	r7, #120	@ 0x78
 80047a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	6831      	ldr	r1, [r6, #0]
 80047ae:	061f      	lsls	r7, r3, #24
 80047b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80047b4:	d402      	bmi.n	80047bc <_printf_i+0x188>
 80047b6:	065f      	lsls	r7, r3, #25
 80047b8:	bf48      	it	mi
 80047ba:	b2ad      	uxthmi	r5, r5
 80047bc:	6031      	str	r1, [r6, #0]
 80047be:	07d9      	lsls	r1, r3, #31
 80047c0:	bf44      	itt	mi
 80047c2:	f043 0320 	orrmi.w	r3, r3, #32
 80047c6:	6023      	strmi	r3, [r4, #0]
 80047c8:	b11d      	cbz	r5, 80047d2 <_printf_i+0x19e>
 80047ca:	2310      	movs	r3, #16
 80047cc:	e7ac      	b.n	8004728 <_printf_i+0xf4>
 80047ce:	4827      	ldr	r0, [pc, #156]	@ (800486c <_printf_i+0x238>)
 80047d0:	e7e9      	b.n	80047a6 <_printf_i+0x172>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f023 0320 	bic.w	r3, r3, #32
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	e7f6      	b.n	80047ca <_printf_i+0x196>
 80047dc:	4616      	mov	r6, r2
 80047de:	e7bd      	b.n	800475c <_printf_i+0x128>
 80047e0:	6833      	ldr	r3, [r6, #0]
 80047e2:	6825      	ldr	r5, [r4, #0]
 80047e4:	6961      	ldr	r1, [r4, #20]
 80047e6:	1d18      	adds	r0, r3, #4
 80047e8:	6030      	str	r0, [r6, #0]
 80047ea:	062e      	lsls	r6, r5, #24
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	d501      	bpl.n	80047f4 <_printf_i+0x1c0>
 80047f0:	6019      	str	r1, [r3, #0]
 80047f2:	e002      	b.n	80047fa <_printf_i+0x1c6>
 80047f4:	0668      	lsls	r0, r5, #25
 80047f6:	d5fb      	bpl.n	80047f0 <_printf_i+0x1bc>
 80047f8:	8019      	strh	r1, [r3, #0]
 80047fa:	2300      	movs	r3, #0
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	4616      	mov	r6, r2
 8004800:	e7bc      	b.n	800477c <_printf_i+0x148>
 8004802:	6833      	ldr	r3, [r6, #0]
 8004804:	1d1a      	adds	r2, r3, #4
 8004806:	6032      	str	r2, [r6, #0]
 8004808:	681e      	ldr	r6, [r3, #0]
 800480a:	6862      	ldr	r2, [r4, #4]
 800480c:	2100      	movs	r1, #0
 800480e:	4630      	mov	r0, r6
 8004810:	f7fb fcfe 	bl	8000210 <memchr>
 8004814:	b108      	cbz	r0, 800481a <_printf_i+0x1e6>
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	6060      	str	r0, [r4, #4]
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	2300      	movs	r3, #0
 8004820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004824:	e7aa      	b.n	800477c <_printf_i+0x148>
 8004826:	6923      	ldr	r3, [r4, #16]
 8004828:	4632      	mov	r2, r6
 800482a:	4649      	mov	r1, r9
 800482c:	4640      	mov	r0, r8
 800482e:	47d0      	blx	sl
 8004830:	3001      	adds	r0, #1
 8004832:	d0ad      	beq.n	8004790 <_printf_i+0x15c>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	079b      	lsls	r3, r3, #30
 8004838:	d413      	bmi.n	8004862 <_printf_i+0x22e>
 800483a:	68e0      	ldr	r0, [r4, #12]
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	4298      	cmp	r0, r3
 8004840:	bfb8      	it	lt
 8004842:	4618      	movlt	r0, r3
 8004844:	e7a6      	b.n	8004794 <_printf_i+0x160>
 8004846:	2301      	movs	r3, #1
 8004848:	4632      	mov	r2, r6
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	47d0      	blx	sl
 8004850:	3001      	adds	r0, #1
 8004852:	d09d      	beq.n	8004790 <_printf_i+0x15c>
 8004854:	3501      	adds	r5, #1
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	9903      	ldr	r1, [sp, #12]
 800485a:	1a5b      	subs	r3, r3, r1
 800485c:	42ab      	cmp	r3, r5
 800485e:	dcf2      	bgt.n	8004846 <_printf_i+0x212>
 8004860:	e7eb      	b.n	800483a <_printf_i+0x206>
 8004862:	2500      	movs	r5, #0
 8004864:	f104 0619 	add.w	r6, r4, #25
 8004868:	e7f5      	b.n	8004856 <_printf_i+0x222>
 800486a:	bf00      	nop
 800486c:	080049b1 	.word	0x080049b1
 8004870:	080049c2 	.word	0x080049c2

08004874 <memmove>:
 8004874:	4288      	cmp	r0, r1
 8004876:	b510      	push	{r4, lr}
 8004878:	eb01 0402 	add.w	r4, r1, r2
 800487c:	d902      	bls.n	8004884 <memmove+0x10>
 800487e:	4284      	cmp	r4, r0
 8004880:	4623      	mov	r3, r4
 8004882:	d807      	bhi.n	8004894 <memmove+0x20>
 8004884:	1e43      	subs	r3, r0, #1
 8004886:	42a1      	cmp	r1, r4
 8004888:	d008      	beq.n	800489c <memmove+0x28>
 800488a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800488e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004892:	e7f8      	b.n	8004886 <memmove+0x12>
 8004894:	4402      	add	r2, r0
 8004896:	4601      	mov	r1, r0
 8004898:	428a      	cmp	r2, r1
 800489a:	d100      	bne.n	800489e <memmove+0x2a>
 800489c:	bd10      	pop	{r4, pc}
 800489e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048a6:	e7f7      	b.n	8004898 <memmove+0x24>

080048a8 <_sbrk_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	4d06      	ldr	r5, [pc, #24]	@ (80048c4 <_sbrk_r+0x1c>)
 80048ac:	2300      	movs	r3, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	f7fc fab6 	bl	8000e24 <_sbrk>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_sbrk_r+0x1a>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_sbrk_r+0x1a>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	20000294 	.word	0x20000294

080048c8 <memcpy>:
 80048c8:	440a      	add	r2, r1
 80048ca:	4291      	cmp	r1, r2
 80048cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80048d0:	d100      	bne.n	80048d4 <memcpy+0xc>
 80048d2:	4770      	bx	lr
 80048d4:	b510      	push	{r4, lr}
 80048d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048de:	4291      	cmp	r1, r2
 80048e0:	d1f9      	bne.n	80048d6 <memcpy+0xe>
 80048e2:	bd10      	pop	{r4, pc}

080048e4 <_realloc_r>:
 80048e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e8:	4680      	mov	r8, r0
 80048ea:	4615      	mov	r5, r2
 80048ec:	460c      	mov	r4, r1
 80048ee:	b921      	cbnz	r1, 80048fa <_realloc_r+0x16>
 80048f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f4:	4611      	mov	r1, r2
 80048f6:	f7ff bc4b 	b.w	8004190 <_malloc_r>
 80048fa:	b92a      	cbnz	r2, 8004908 <_realloc_r+0x24>
 80048fc:	f7ff fbdc 	bl	80040b8 <_free_r>
 8004900:	2400      	movs	r4, #0
 8004902:	4620      	mov	r0, r4
 8004904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004908:	f000 f81a 	bl	8004940 <_malloc_usable_size_r>
 800490c:	4285      	cmp	r5, r0
 800490e:	4606      	mov	r6, r0
 8004910:	d802      	bhi.n	8004918 <_realloc_r+0x34>
 8004912:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004916:	d8f4      	bhi.n	8004902 <_realloc_r+0x1e>
 8004918:	4629      	mov	r1, r5
 800491a:	4640      	mov	r0, r8
 800491c:	f7ff fc38 	bl	8004190 <_malloc_r>
 8004920:	4607      	mov	r7, r0
 8004922:	2800      	cmp	r0, #0
 8004924:	d0ec      	beq.n	8004900 <_realloc_r+0x1c>
 8004926:	42b5      	cmp	r5, r6
 8004928:	462a      	mov	r2, r5
 800492a:	4621      	mov	r1, r4
 800492c:	bf28      	it	cs
 800492e:	4632      	movcs	r2, r6
 8004930:	f7ff ffca 	bl	80048c8 <memcpy>
 8004934:	4621      	mov	r1, r4
 8004936:	4640      	mov	r0, r8
 8004938:	f7ff fbbe 	bl	80040b8 <_free_r>
 800493c:	463c      	mov	r4, r7
 800493e:	e7e0      	b.n	8004902 <_realloc_r+0x1e>

08004940 <_malloc_usable_size_r>:
 8004940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004944:	1f18      	subs	r0, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	bfbc      	itt	lt
 800494a:	580b      	ldrlt	r3, [r1, r0]
 800494c:	18c0      	addlt	r0, r0, r3
 800494e:	4770      	bx	lr

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
