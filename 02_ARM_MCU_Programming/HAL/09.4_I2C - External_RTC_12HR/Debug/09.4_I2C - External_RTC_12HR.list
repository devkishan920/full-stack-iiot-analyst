
09.4_I2C - External_RTC_12HR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004398  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004568  08004568  00005568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004604  08004604  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004604  08004604  00005604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800460c  0800460c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800460c  0800460c  0000560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004610  08004610  00005610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004614  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  0800467c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  0800467c  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b015  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0a  00000000  00000000  000110ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00012ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080c  00000000  00000000  00013508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022346  00000000  00000000  00013d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc0f  00000000  00000000  0003605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc9a4  00000000  00000000  00043c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011060d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  00110650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001138fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004550 	.word	0x08004550

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08004550 	.word	0x08004550

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <decToBcd>:
#define DS1307_ADDRESS 0xD0


// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <decToBcd+0x48>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1092      	asrs	r2, r2, #2
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	b2d8      	uxtb	r0, r3
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <decToBcd+0x48>)
 80005c0:	fb83 1302 	smull	r1, r3, r3, r2
 80005c4:	1099      	asrs	r1, r3, #2
 80005c6:	17d3      	asrs	r3, r2, #31
 80005c8:	1ac9      	subs	r1, r1, r3
 80005ca:	460b      	mov	r3, r1
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	1ad1      	subs	r1, r2, r3
 80005d4:	b2cb      	uxtb	r3, r1
 80005d6:	4403      	add	r3, r0
 80005d8:	b2db      	uxtb	r3, r3
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	66666667 	.word	0x66666667

080005ec <bcdToDec>:
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	461a      	mov	r2, r3
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	4413      	add	r3, r2
}
 8000610:	4618      	mov	r0, r3
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <Set_Time>:
} TIME;

 TIME Time;

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af04      	add	r7, sp, #16
 8000622:	4604      	mov	r4, r0
 8000624:	4608      	mov	r0, r1
 8000626:	4611      	mov	r1, r2
 8000628:	461a      	mov	r2, r3
 800062a:	4623      	mov	r3, r4
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	4603      	mov	r3, r0
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	460b      	mov	r3, r1
 8000634:	717b      	strb	r3, [r7, #5]
 8000636:	4613      	mov	r3, r2
 8000638:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ffaf 	bl	80005a0 <decToBcd>
 8000642:	4603      	mov	r3, r0
 8000644:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffa9 	bl	80005a0 <decToBcd>
 800064e:	4603      	mov	r3, r0
 8000650:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour)|1<<6;
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffa3 	bl	80005a0 <decToBcd>
 800065a:	4603      	mov	r3, r0
 800065c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000660:	b2db      	uxtb	r3, r3
 8000662:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8000664:	793b      	ldrb	r3, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ff9a 	bl	80005a0 <decToBcd>
 800066c:	4603      	mov	r3, r0
 800066e:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8000670:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff93 	bl	80005a0 <decToBcd>
 800067a:	4603      	mov	r3, r0
 800067c:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 800067e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff8c 	bl	80005a0 <decToBcd>
 8000688:	4603      	mov	r3, r0
 800068a:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800068c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff85 	bl	80005a0 <decToBcd>
 8000696:	4603      	mov	r3, r0
 8000698:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS1307_ADDRESS, 0x00, 1, set_time, 7, 1000);
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	2307      	movs	r3, #7
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	2200      	movs	r2, #0
 80006ae:	21d0      	movs	r1, #208	@ 0xd0
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <Set_Time+0xa4>)
 80006b2:	f001 f855 	bl	8001760 <HAL_I2C_Mem_Write>
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd90      	pop	{r4, r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000084 	.word	0x20000084

080006c4 <Get_Time>:

//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout);
int flag;

void Get_Time (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS1307_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	9302      	str	r3, [sp, #8]
 80006d0:	2307      	movs	r3, #7
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	463b      	mov	r3, r7
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2301      	movs	r3, #1
 80006da:	2200      	movs	r2, #0
 80006dc:	21d0      	movs	r1, #208	@ 0xd0
 80006de:	483d      	ldr	r0, [pc, #244]	@ (80007d4 <Get_Time+0x110>)
 80006e0:	f001 f938 	bl	8001954 <HAL_I2C_Mem_Read>
	Time.seconds = bcdToDec(get_time[0]);
 80006e4:	783b      	ldrb	r3, [r7, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff80 	bl	80005ec <bcdToDec>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b39      	ldr	r3, [pc, #228]	@ (80007d8 <Get_Time+0x114>)
 80006f2:	701a      	strb	r2, [r3, #0]
	Time.minutes = bcdToDec(get_time[1]);
 80006f4:	787b      	ldrb	r3, [r7, #1]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff78 	bl	80005ec <bcdToDec>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b35      	ldr	r3, [pc, #212]	@ (80007d8 <Get_Time+0x114>)
 8000702:	705a      	strb	r2, [r3, #1]

	if(get_time[2]&1<<5)
 8000704:	78bb      	ldrb	r3, [r7, #2]
 8000706:	f003 0320 	and.w	r3, r3, #32
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <Get_Time+0x52>
		{
			flag=1;
 800070e:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <Get_Time+0x118>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	e002      	b.n	800071c <Get_Time+0x58>
		}
	else
	{
		flag=0;
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <Get_Time+0x118>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	}


	Time.hour = bcdToDec(get_time[2]&~(11<<5));
 800071c:	78bb      	ldrb	r3, [r7, #2]
 800071e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff61 	bl	80005ec <bcdToDec>
 800072a:	4603      	mov	r3, r0
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <Get_Time+0x114>)
 8000730:	709a      	strb	r2, [r3, #2]
	Time.dayofweek = bcdToDec(get_time[3]);
 8000732:	78fb      	ldrb	r3, [r7, #3]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff59 	bl	80005ec <bcdToDec>
 800073a:	4603      	mov	r3, r0
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <Get_Time+0x114>)
 8000740:	70da      	strb	r2, [r3, #3]
	Time.dayofmonth = bcdToDec(get_time[4]);
 8000742:	793b      	ldrb	r3, [r7, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff51 	bl	80005ec <bcdToDec>
 800074a:	4603      	mov	r3, r0
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <Get_Time+0x114>)
 8000750:	711a      	strb	r2, [r3, #4]
	Time.month = bcdToDec(get_time[5]);
 8000752:	797b      	ldrb	r3, [r7, #5]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff49 	bl	80005ec <bcdToDec>
 800075a:	4603      	mov	r3, r0
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <Get_Time+0x114>)
 8000760:	715a      	strb	r2, [r3, #5]
	Time.year = bcdToDec(get_time[6]);
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff41 	bl	80005ec <bcdToDec>
 800076a:	4603      	mov	r3, r0
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <Get_Time+0x114>)
 8000770:	719a      	strb	r2, [r3, #6]

//	-------------------------------------------------
	if(flag==1)
 8000772:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <Get_Time+0x118>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d10a      	bne.n	8000790 <Get_Time+0xcc>
	{
		printf("Time: %02d:%02d:%02d PM\n", Time.hour, Time.minutes, Time.seconds);
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <Get_Time+0x114>)
 800077c:	789b      	ldrb	r3, [r3, #2]
 800077e:	4619      	mov	r1, r3
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <Get_Time+0x114>)
 8000782:	785b      	ldrb	r3, [r3, #1]
 8000784:	461a      	mov	r2, r3
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <Get_Time+0x114>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <Get_Time+0x11c>)
 800078c:	f003 f836 	bl	80037fc <iprintf>
	}

	if(flag==0)
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <Get_Time+0x118>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d10a      	bne.n	80007ae <Get_Time+0xea>
	{
		printf("Time: %02d:%02d:%02d AM\n", Time.hour, Time.minutes, Time.seconds);
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <Get_Time+0x114>)
 800079a:	789b      	ldrb	r3, [r3, #2]
 800079c:	4619      	mov	r1, r3
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <Get_Time+0x114>)
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <Get_Time+0x114>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <Get_Time+0x120>)
 80007aa:	f003 f827 	bl	80037fc <iprintf>
	}

	printf("Date: %02d-%02d-20%02d\n", Time.dayofmonth, Time.month, Time.year);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <Get_Time+0x114>)
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	4619      	mov	r1, r3
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <Get_Time+0x114>)
 80007b6:	795b      	ldrb	r3, [r3, #5]
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <Get_Time+0x114>)
 80007bc:	799b      	ldrb	r3, [r3, #6]
 80007be:	480a      	ldr	r0, [pc, #40]	@ (80007e8 <Get_Time+0x124>)
 80007c0:	f003 f81c 	bl	80037fc <iprintf>

	printf("\n");
 80007c4:	200a      	movs	r0, #10
 80007c6:	f003 f82b 	bl	8003820 <putchar>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000084 	.word	0x20000084
 80007d8:	20000120 	.word	0x20000120
 80007dc:	20000128 	.word	0x20000128
 80007e0:	08004568 	.word	0x08004568
 80007e4:	08004584 	.word	0x08004584
 80007e8:	080045a0 	.word	0x080045a0

080007ec <main>:
char buffer2[10];



int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af04      	add	r7, sp, #16
  HAL_Init();
 80007f2:	f000 fb47 	bl	8000e84 <HAL_Init>

  SystemClock_Config();
 80007f6:	f000 f81b 	bl	8000830 <SystemClock_Config>

  MX_GPIO_Init();
 80007fa:	f000 f8df 	bl	80009bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007fe:	f000 f8b3 	bl	8000968 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000802:	f000 f883 	bl	800090c <MX_I2C1_Init>

//  void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
  Set_Time(30, 56, 4, 2, 10, 2, 25);
 8000806:	2319      	movs	r3, #25
 8000808:	9302      	str	r3, [sp, #8]
 800080a:	2302      	movs	r3, #2
 800080c:	9301      	str	r3, [sp, #4]
 800080e:	230a      	movs	r3, #10
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2302      	movs	r3, #2
 8000814:	2204      	movs	r2, #4
 8000816:	2138      	movs	r1, #56	@ 0x38
 8000818:	201e      	movs	r0, #30
 800081a:	f7ff feff 	bl	800061c <Set_Time>

  while (1)
  {
//	  printf("Hello");
	  	  Get_Time();
 800081e:	f7ff ff51 	bl	80006c4 <Get_Time>
	  	  HAL_Delay(1000);
 8000822:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000826:	f000 fb9f 	bl	8000f68 <HAL_Delay>
	  	  Get_Time();
 800082a:	bf00      	nop
 800082c:	e7f7      	b.n	800081e <main+0x32>
	...

08000830 <SystemClock_Config>:
  }
}

void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	@ 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2234      	movs	r2, #52	@ 0x34
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 f839 	bl	80038b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b2a      	ldr	r3, [pc, #168]	@ (8000904 <SystemClock_Config+0xd4>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a29      	ldr	r2, [pc, #164]	@ (8000904 <SystemClock_Config+0xd4>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b27      	ldr	r3, [pc, #156]	@ (8000904 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	4b24      	ldr	r3, [pc, #144]	@ (8000908 <SystemClock_Config+0xd8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800087c:	4a22      	ldr	r2, [pc, #136]	@ (8000908 <SystemClock_Config+0xd8>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <SystemClock_Config+0xd8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2310      	movs	r3, #16
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a4:	2310      	movs	r3, #16
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f978 	bl	8002bb4 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ca:	f000 f8e5 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2302      	movs	r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2102      	movs	r1, #2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fe18 	bl	8002520 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008f6:	f000 f8cf 	bl	8000a98 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	@ 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <MX_I2C1_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	@ (8000960 <MX_I2C1_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <MX_I2C1_Init+0x50>)
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <MX_I2C1_Init+0x58>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000928:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_I2C1_Init+0x50>)
 800092a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800092e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_I2C1_Init+0x50>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_I2C1_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_I2C1_Init+0x50>)
 800094a:	f000 fdc5 	bl	80014d8 <HAL_I2C_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000954:	f000 f8a0 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000084 	.word	0x20000084
 8000960:	40005400 	.word	0x40005400
 8000964:	000186a0 	.word	0x000186a0

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	@ (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f002 fba6 	bl	80030f0 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f875 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200000d8 	.word	0x200000d8
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a2c      	ldr	r2, [pc, #176]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a25      	ldr	r2, [pc, #148]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a1e      	ldr	r2, [pc, #120]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_GPIO_Init+0xd0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2120      	movs	r1, #32
 8000a46:	4812      	ldr	r0, [pc, #72]	@ (8000a90 <MX_GPIO_Init+0xd4>)
 8000a48:	f000 fd2c 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_GPIO_Init+0xd8>)
 8000a64:	f000 fb8a 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a68:	2320      	movs	r3, #32
 8000a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_GPIO_Init+0xd4>)
 8000a80:	f000 fb7c 	bl	800117c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	@ 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020800 	.word	0x40020800

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <Error_Handler+0x8>

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fb16 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	@ (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b32:	23c0      	movs	r3, #192	@ 0xc0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b36:	2312      	movs	r3, #18
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b42:	2304      	movs	r3, #4
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b4e:	f000 fb15 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <HAL_UART_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_UART_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_UART_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <HAL_UART_MspInit+0x8c>)
 8000bfa:	f000 fabf 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	@ 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f95d 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <ITM_SendChar>:
// ITM Register Addresses
#define ITM_STIMULUS_PORT0 *((volatile uint32_t *)0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t *)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
    DEMCR |= (1 << 24); // Enable TRACENA
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <ITM_SendChar+0x48>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0e      	ldr	r2, [pc, #56]	@ (8000cbc <ITM_SendChar+0x48>)
 8000c84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c88:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1 << 0); // Enable Stimulus Port 0
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <ITM_SendChar+0x4c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <ITM_SendChar+0x4c>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6013      	str	r3, [r2, #0]

    while (!(ITM_STIMULUS_PORT0 & 1))
 8000c96:	bf00      	nop
 8000c98:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f8      	beq.n	8000c98 <ITM_SendChar+0x24>
        ; // read FIFO Status in bit[0]

    ITM_STIMULUS_PORT0 = ch;
 8000ca6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	6013      	str	r3, [r2, #0]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000edfc 	.word	0xe000edfc
 8000cc0:	e0000e00 	.word	0xe0000e00

08000cc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	e00a      	b.n	8000cec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd6:	f3af 8000 	nop.w
 8000cda:	4601      	mov	r1, r0
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf0      	blt.n	8000cd6 <_read+0x12>
  }

  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e009      	b.n	8000d24 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ffab 	bl	8000c74 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	697a      	ldr	r2, [r7, #20]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	dbf1      	blt.n	8000d10 <_write+0x12>
  }
  return len;
 8000d2c:	687b      	ldr	r3, [r7, #4]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <_close>:

int _close(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_isatty>:

int _isatty(int file)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	@ (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f002 fdc0 	bl	8003954 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20020000 	.word	0x20020000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	2000012c 	.word	0x2000012c
 8000e08:	20000280 	.word	0x20000280

08000e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e34:	f7ff ffea 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	@ (8000e7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 fd7f 	bl	8003960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e62:	f7ff fcc3 	bl	80007ec <main>
  bx  lr    
 8000e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e74:	08004614 	.word	0x08004614
  ldr r2, =_sbss
 8000e78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e7c:	20000280 	.word	0x20000280

08000e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC_IRQHandler>
	...

08000e84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <HAL_Init+0x40>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <HAL_Init+0x40>)
 8000e9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <HAL_Init+0x40>)
 8000ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f931 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f808 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb8:	f7ff fdf4 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023c00 	.word	0x40023c00

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x54>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x58>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f93b 	bl	8001162 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f911 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_InitTick+0x5c>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	@ (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000130 	.word	0x20000130

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	@ (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000130 	.word	0x20000130

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff47 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff5c 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffb0 	bl	80010d0 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e165      	b.n	8001464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8154 	bne.w	800145e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80ae 	beq.w	800145e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b5d      	ldr	r3, [pc, #372]	@ (800147c <HAL_GPIO_Init+0x300>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a5c      	ldr	r2, [pc, #368]	@ (800147c <HAL_GPIO_Init+0x300>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b5a      	ldr	r3, [pc, #360]	@ (800147c <HAL_GPIO_Init+0x300>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a58      	ldr	r2, [pc, #352]	@ (8001480 <HAL_GPIO_Init+0x304>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4f      	ldr	r2, [pc, #316]	@ (8001484 <HAL_GPIO_Init+0x308>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d025      	beq.n	8001396 <HAL_GPIO_Init+0x21a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4e      	ldr	r2, [pc, #312]	@ (8001488 <HAL_GPIO_Init+0x30c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d01f      	beq.n	8001392 <HAL_GPIO_Init+0x216>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4d      	ldr	r2, [pc, #308]	@ (800148c <HAL_GPIO_Init+0x310>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x212>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4c      	ldr	r2, [pc, #304]	@ (8001490 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x20e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4b      	ldr	r2, [pc, #300]	@ (8001494 <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x20a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4a      	ldr	r2, [pc, #296]	@ (8001498 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x206>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a49      	ldr	r2, [pc, #292]	@ (800149c <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x202>
 800137a:	2306      	movs	r3, #6
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 800137e:	2307      	movs	r3, #7
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x21c>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a31      	ldr	r2, [pc, #196]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b2f      	ldr	r3, [pc, #188]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a26      	ldr	r2, [pc, #152]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a11      	ldr	r2, [pc, #68]	@ (80014a0 <HAL_GPIO_Init+0x324>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae96 	bls.w	8001198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40021400 	.word	0x40021400
 800149c:	40021800 	.word	0x40021800
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e12b      	b.n	8001742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff faf8 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800152a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800153a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800153c:	f001 f8e2 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a81      	ldr	r2, [pc, #516]	@ (800174c <HAL_I2C_Init+0x274>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d807      	bhi.n	800155c <HAL_I2C_Init+0x84>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a80      	ldr	r2, [pc, #512]	@ (8001750 <HAL_I2C_Init+0x278>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e006      	b.n	800156a <HAL_I2C_Init+0x92>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a7d      	ldr	r2, [pc, #500]	@ (8001754 <HAL_I2C_Init+0x27c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	bf94      	ite	ls
 8001564:	2301      	movls	r3, #1
 8001566:	2300      	movhi	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e7      	b.n	8001742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a78      	ldr	r2, [pc, #480]	@ (8001758 <HAL_I2C_Init+0x280>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a6a      	ldr	r2, [pc, #424]	@ (800174c <HAL_I2C_Init+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d802      	bhi.n	80015ac <HAL_I2C_Init+0xd4>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	e009      	b.n	80015c0 <HAL_I2C_Init+0xe8>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a69      	ldr	r2, [pc, #420]	@ (800175c <HAL_I2C_Init+0x284>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	3301      	adds	r3, #1
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	495c      	ldr	r1, [pc, #368]	@ (800174c <HAL_I2C_Init+0x274>)
 80015dc:	428b      	cmp	r3, r1
 80015de:	d819      	bhi.n	8001614 <HAL_I2C_Init+0x13c>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e59      	subs	r1, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ee:	1c59      	adds	r1, r3, #1
 80015f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015f4:	400b      	ands	r3, r1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <HAL_I2C_Init+0x138>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e59      	subs	r1, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fbb1 f3f3 	udiv	r3, r1, r3
 8001608:	3301      	adds	r3, #1
 800160a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160e:	e051      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001610:	2304      	movs	r3, #4
 8001612:	e04f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <HAL_I2C_Init+0x168>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e012      	b.n	8001666 <HAL_I2C_Init+0x18e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x196>
 800166a:	2301      	movs	r3, #1
 800166c:	e022      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_Init+0x1bc>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e58      	subs	r0, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	0099      	lsls	r1, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6809      	ldr	r1, [r1, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6911      	ldr	r1, [r2, #16]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	817b      	strh	r3, [r7, #10]
 8001772:	460b      	mov	r3, r1
 8001774:	813b      	strh	r3, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800177a:	f7ff fbe9 	bl	8000f50 <HAL_GetTick>
 800177e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b20      	cmp	r3, #32
 800178a:	f040 80d9 	bne.w	8001940 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2319      	movs	r3, #25
 8001794:	2201      	movs	r2, #1
 8001796:	496d      	ldr	r1, [pc, #436]	@ (800194c <HAL_I2C_Mem_Write+0x1ec>)
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fc8b 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017a4:	2302      	movs	r3, #2
 80017a6:	e0cc      	b.n	8001942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_Mem_Write+0x56>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e0c5      	b.n	8001942 <HAL_I2C_Mem_Write+0x1e2>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d007      	beq.n	80017dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2221      	movs	r2, #33	@ 0x21
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2240      	movs	r2, #64	@ 0x40
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6a3a      	ldr	r2, [r7, #32]
 8001806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800180c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a4d      	ldr	r2, [pc, #308]	@ (8001950 <HAL_I2C_Mem_Write+0x1f0>)
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800181e:	88f8      	ldrh	r0, [r7, #6]
 8001820:	893a      	ldrh	r2, [r7, #8]
 8001822:	8979      	ldrh	r1, [r7, #10]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4603      	mov	r3, r0
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 fac2 	bl	8001db8 <I2C_RequestMemoryWrite>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d052      	beq.n	80018e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e081      	b.n	8001942 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f000 fd50 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	2b04      	cmp	r3, #4
 8001854:	d107      	bne.n	8001866 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06b      	b.n	8001942 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d11b      	bne.n	80018e0 <HAL_I2C_Mem_Write+0x180>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d017      	beq.n	80018e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1aa      	bne.n	800183e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fd43 	bl	8002378 <I2C_WaitOnBTFFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800190e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e016      	b.n	8001942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800193c:	2300      	movs	r3, #0
 800193e:	e000      	b.n	8001942 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
  }
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	00100002 	.word	0x00100002
 8001950:	ffff0000 	.word	0xffff0000

08001954 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	@ 0x30
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	817b      	strh	r3, [r7, #10]
 8001966:	460b      	mov	r3, r1
 8001968:	813b      	strh	r3, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800196e:	f7ff faef 	bl	8000f50 <HAL_GetTick>
 8001972:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b20      	cmp	r3, #32
 800197e:	f040 8214 	bne.w	8001daa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2319      	movs	r3, #25
 8001988:	2201      	movs	r2, #1
 800198a:	497b      	ldr	r1, [pc, #492]	@ (8001b78 <HAL_I2C_Mem_Read+0x224>)
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 fb91 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
 800199a:	e207      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_I2C_Mem_Read+0x56>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e200      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d007      	beq.n	80019d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2222      	movs	r2, #34	@ 0x22
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2240      	movs	r2, #64	@ 0x40
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b7c <HAL_I2C_Mem_Read+0x228>)
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a12:	88f8      	ldrh	r0, [r7, #6]
 8001a14:	893a      	ldrh	r2, [r7, #8]
 8001a16:	8979      	ldrh	r1, [r7, #10]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	4603      	mov	r3, r0
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fa5e 	bl	8001ee4 <I2C_RequestMemoryRead>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e1bc      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d113      	bne.n	8001a62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	623b      	str	r3, [r7, #32]
 8001a4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e190      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d11b      	bne.n	8001aa2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e170      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d11b      	bne.n	8001ae2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ab8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	e150      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001af8:	e144      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	f200 80f1 	bhi.w	8001ce6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d123      	bne.n	8001b54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f000 fc79 	bl	8002408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e145      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b52:	e117      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d14e      	bne.n	8001bfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b62:	2200      	movs	r2, #0
 8001b64:	4906      	ldr	r1, [pc, #24]	@ (8001b80 <HAL_I2C_Mem_Read+0x22c>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 faa4 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e11a      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
 8001b76:	bf00      	nop
 8001b78:	00100002 	.word	0x00100002
 8001b7c:	ffff0000 	.word	0xffff0000
 8001b80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001bf8:	e0c4      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c00:	2200      	movs	r2, #0
 8001c02:	496c      	ldr	r1, [pc, #432]	@ (8001db4 <HAL_I2C_Mem_Read+0x460>)
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fa55 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0cb      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4955      	ldr	r1, [pc, #340]	@ (8001db4 <HAL_I2C_Mem_Read+0x460>)
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 fa27 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e09d      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ce4:	e04e      	b.n	8001d84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fb8c 	bl	8002408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e058      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f003 0304 	and.w	r3, r3, #4
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d124      	bne.n	8001d84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f aeb6 	bne.w	8001afa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3728      	adds	r7, #40	@ 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	00010004 	.word	0x00010004

08001db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	817b      	strh	r3, [r7, #10]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	813b      	strh	r3, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f960 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e08:	d103      	bne.n	8001e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e05f      	b.n	8001ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e16:	897b      	ldrh	r3, [r7, #10]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	492d      	ldr	r1, [pc, #180]	@ (8001ee0 <I2C_RequestMemoryWrite+0x128>)
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f9bb 	bl	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e04c      	b.n	8001ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e54:	6a39      	ldr	r1, [r7, #32]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 fa46 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d107      	bne.n	8001e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e02b      	b.n	8001ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e84:	893b      	ldrh	r3, [r7, #8]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	e021      	b.n	8001ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e90:	893b      	ldrh	r3, [r7, #8]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea0:	6a39      	ldr	r1, [r7, #32]
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 fa20 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d107      	bne.n	8001ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e005      	b.n	8001ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eca:	893b      	ldrh	r3, [r7, #8]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	00010002 	.word	0x00010002

08001ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	4608      	mov	r0, r1
 8001eee:	4611      	mov	r1, r2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	817b      	strh	r3, [r7, #10]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	813b      	strh	r3, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f8c2 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f44:	d103      	bne.n	8001f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0aa      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f52:	897b      	ldrh	r3, [r7, #10]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	6a3a      	ldr	r2, [r7, #32]
 8001f66:	4952      	ldr	r1, [pc, #328]	@ (80020b0 <I2C_RequestMemoryRead+0x1cc>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f91d 	bl	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e097      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f9a8 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e076      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc0:	893b      	ldrh	r3, [r7, #8]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	e021      	b.n	8002010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	6a39      	ldr	r1, [r7, #32]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f982 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d107      	bne.n	8002002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e050      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002006:	893b      	ldrh	r3, [r7, #8]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002012:	6a39      	ldr	r1, [r7, #32]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f967 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	2b04      	cmp	r3, #4
 8002026:	d107      	bne.n	8002038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e035      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800204a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	2200      	movs	r2, #0
 8002054:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f82b 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800206e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002072:	d103      	bne.n	800207c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e013      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002080:	897b      	ldrh	r3, [r7, #10]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	6a3a      	ldr	r2, [r7, #32]
 8002094:	4906      	ldr	r1, [pc, #24]	@ (80020b0 <I2C_RequestMemoryRead+0x1cc>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f886 	bl	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	00010002 	.word	0x00010002

080020b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c4:	e048      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d044      	beq.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7fe ff3f 	bl	8000f50 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d139      	bne.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10d      	bne.n	800210a <I2C_WaitOnFlagUntilTimeout+0x56>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	e00c      	b.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x70>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	429a      	cmp	r2, r3
 8002128:	d116      	bne.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e023      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	0c1b      	lsrs	r3, r3, #16
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10d      	bne.n	800217e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	43da      	mvns	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	e00c      	b.n	8002198 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	43da      	mvns	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d093      	beq.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021b6:	e071      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c6:	d123      	bne.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e067      	b.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d041      	beq.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7fe fe9a 	bl	8000f50 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d136      	bne.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10c      	bne.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	e00b      	b.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	43da      	mvns	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e021      	b.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10c      	bne.n	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e00b      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f af6d 	bne.w	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f4:	e034      	b.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f8e3 	bl	80024c2 <I2C_IsAcknowledgeFailed>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e034      	b.n	8002370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d028      	beq.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7fe fe1f 	bl	8000f50 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11d      	bne.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	2b80      	cmp	r3, #128	@ 0x80
 8002330:	d016      	beq.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	2b80      	cmp	r3, #128	@ 0x80
 800236c:	d1c3      	bne.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002384:	e034      	b.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f89b 	bl	80024c2 <I2C_IsAcknowledgeFailed>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e034      	b.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d028      	beq.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7fe fdd7 	bl	8000f50 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11d      	bne.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d016      	beq.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e007      	b.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d1c3      	bne.n	8002386 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002414:	e049      	b.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	2b10      	cmp	r3, #16
 8002422:	d119      	bne.n	8002458 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0210 	mvn.w	r2, #16
 800242c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e030      	b.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002458:	f7fe fd7a 	bl	8000f50 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	429a      	cmp	r2, r3
 8002466:	d302      	bcc.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11d      	bne.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002478:	2b40      	cmp	r3, #64	@ 0x40
 800247a:	d016      	beq.n	80024aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f043 0220 	orr.w	r2, r3, #32
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e007      	b.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b40      	cmp	r3, #64	@ 0x40
 80024b6:	d1ae      	bne.n	8002416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d8:	d11b      	bne.n	8002512 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f043 0204 	orr.w	r2, r3, #4
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0cc      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b68      	ldr	r3, [pc, #416]	@ (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d90c      	bls.n	800255c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b65      	ldr	r3, [pc, #404]	@ (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b63      	ldr	r3, [pc, #396]	@ (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b8      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002574:	4b59      	ldr	r3, [pc, #356]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a58      	ldr	r2, [pc, #352]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800257e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800258c:	4b53      	ldr	r3, [pc, #332]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a52      	ldr	r2, [pc, #328]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b50      	ldr	r3, [pc, #320]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	494d      	ldr	r1, [pc, #308]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d044      	beq.n	8002640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b47      	ldr	r3, [pc, #284]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d003      	beq.n	80025de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	4b3f      	ldr	r3, [pc, #252]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e067      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4934      	ldr	r1, [pc, #208]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7fe fc9e 	bl	8000f50 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe fc9a 	bl	8000f50 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e04f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b2b      	ldr	r3, [pc, #172]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d20c      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b20      	ldr	r3, [pc, #128]	@ (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e032      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4916      	ldr	r1, [pc, #88]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	490e      	ldr	r1, [pc, #56]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026a6:	f000 f855 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	490a      	ldr	r1, [pc, #40]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	5ccb      	ldrb	r3, [r1, r3]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fbfe 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00
 80026dc:	40023800 	.word	0x40023800
 80026e0:	080045b8 	.word	0x080045b8
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_RCC_GetHCLKFreq+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002708:	f7ff fff0 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0a9b      	lsrs	r3, r3, #10
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	@ (8002728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	080045c8 	.word	0x080045c8

0800272c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002730:	f7ff ffdc 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8002734:	4602      	mov	r2, r0
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	0b5b      	lsrs	r3, r3, #13
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	4903      	ldr	r1, [pc, #12]	@ (8002750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002742:	5ccb      	ldrb	r3, [r1, r3]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	080045c8 	.word	0x080045c8

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002758:	b0ae      	sub	sp, #184	@ 0xb8
 800275a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800277a:	4bcb      	ldr	r3, [pc, #812]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b0c      	cmp	r3, #12
 8002784:	f200 8206 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x440>
 8002788:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <HAL_RCC_GetSysClockFreq+0x3c>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027c5 	.word	0x080027c5
 8002794:	08002b95 	.word	0x08002b95
 8002798:	08002b95 	.word	0x08002b95
 800279c:	08002b95 	.word	0x08002b95
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	08002b95 	.word	0x08002b95
 80027a8:	08002b95 	.word	0x08002b95
 80027ac:	08002b95 	.word	0x08002b95
 80027b0:	080027d5 	.word	0x080027d5
 80027b4:	08002b95 	.word	0x08002b95
 80027b8:	08002b95 	.word	0x08002b95
 80027bc:	08002b95 	.word	0x08002b95
 80027c0:	080029c5 	.word	0x080029c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4bb9      	ldr	r3, [pc, #740]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x358>)
 80027c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ca:	e1e7      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027cc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027d2:	e1e3      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	4bb4      	ldr	r3, [pc, #720]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e0:	4bb1      	ldr	r3, [pc, #708]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d071      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4bae      	ldr	r3, [pc, #696]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80027fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800280e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002812:	4622      	mov	r2, r4
 8002814:	462b      	mov	r3, r5
 8002816:	f04f 0000 	mov.w	r0, #0
 800281a:	f04f 0100 	mov.w	r1, #0
 800281e:	0159      	lsls	r1, r3, #5
 8002820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002824:	0150      	lsls	r0, r2, #5
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4621      	mov	r1, r4
 800282c:	1a51      	subs	r1, r2, r1
 800282e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002830:	4629      	mov	r1, r5
 8002832:	eb63 0301 	sbc.w	r3, r3, r1
 8002836:	647b      	str	r3, [r7, #68]	@ 0x44
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002844:	4649      	mov	r1, r9
 8002846:	018b      	lsls	r3, r1, #6
 8002848:	4641      	mov	r1, r8
 800284a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800284e:	4641      	mov	r1, r8
 8002850:	018a      	lsls	r2, r1, #6
 8002852:	4641      	mov	r1, r8
 8002854:	1a51      	subs	r1, r2, r1
 8002856:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002858:	4649      	mov	r1, r9
 800285a:	eb63 0301 	sbc.w	r3, r3, r1
 800285e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800286c:	4649      	mov	r1, r9
 800286e:	00cb      	lsls	r3, r1, #3
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002876:	4641      	mov	r1, r8
 8002878:	00ca      	lsls	r2, r1, #3
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	4603      	mov	r3, r0
 8002880:	4622      	mov	r2, r4
 8002882:	189b      	adds	r3, r3, r2
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
 8002886:	462b      	mov	r3, r5
 8002888:	460a      	mov	r2, r1
 800288a:	eb42 0303 	adc.w	r3, r2, r3
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800289c:	4629      	mov	r1, r5
 800289e:	024b      	lsls	r3, r1, #9
 80028a0:	4621      	mov	r1, r4
 80028a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028a6:	4621      	mov	r1, r4
 80028a8:	024a      	lsls	r2, r1, #9
 80028aa:	4610      	mov	r0, r2
 80028ac:	4619      	mov	r1, r3
 80028ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028c0:	f7fd fcf6 	bl	80002b0 <__aeabi_uldivmod>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4613      	mov	r3, r2
 80028ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028ce:	e067      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d0:	4b75      	ldr	r3, [pc, #468]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	099b      	lsrs	r3, r3, #6
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028ea:	2300      	movs	r3, #0
 80028ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80028f2:	4622      	mov	r2, r4
 80028f4:	462b      	mov	r3, r5
 80028f6:	f04f 0000 	mov.w	r0, #0
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	0159      	lsls	r1, r3, #5
 8002900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002904:	0150      	lsls	r0, r2, #5
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4621      	mov	r1, r4
 800290c:	1a51      	subs	r1, r2, r1
 800290e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002910:	4629      	mov	r1, r5
 8002912:	eb63 0301 	sbc.w	r3, r3, r1
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002924:	4649      	mov	r1, r9
 8002926:	018b      	lsls	r3, r1, #6
 8002928:	4641      	mov	r1, r8
 800292a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800292e:	4641      	mov	r1, r8
 8002930:	018a      	lsls	r2, r1, #6
 8002932:	4641      	mov	r1, r8
 8002934:	ebb2 0a01 	subs.w	sl, r2, r1
 8002938:	4649      	mov	r1, r9
 800293a:	eb63 0b01 	sbc.w	fp, r3, r1
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800294a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800294e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002952:	4692      	mov	sl, r2
 8002954:	469b      	mov	fp, r3
 8002956:	4623      	mov	r3, r4
 8002958:	eb1a 0303 	adds.w	r3, sl, r3
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	462b      	mov	r3, r5
 8002960:	eb4b 0303 	adc.w	r3, fp, r3
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002972:	4629      	mov	r1, r5
 8002974:	028b      	lsls	r3, r1, #10
 8002976:	4621      	mov	r1, r4
 8002978:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800297c:	4621      	mov	r1, r4
 800297e:	028a      	lsls	r2, r1, #10
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002988:	2200      	movs	r2, #0
 800298a:	673b      	str	r3, [r7, #112]	@ 0x70
 800298c:	677a      	str	r2, [r7, #116]	@ 0x74
 800298e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002992:	f7fd fc8d 	bl	80002b0 <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4613      	mov	r3, r2
 800299c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029a0:	4b41      	ldr	r3, [pc, #260]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029c2:	e0eb      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c4:	4b38      	ldr	r3, [pc, #224]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d0:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d06b      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029dc:	4b32      	ldr	r3, [pc, #200]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	099b      	lsrs	r3, r3, #6
 80029e2:	2200      	movs	r2, #0
 80029e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80029f0:	2300      	movs	r3, #0
 80029f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80029f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029f8:	4622      	mov	r2, r4
 80029fa:	462b      	mov	r3, r5
 80029fc:	f04f 0000 	mov.w	r0, #0
 8002a00:	f04f 0100 	mov.w	r1, #0
 8002a04:	0159      	lsls	r1, r3, #5
 8002a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a0a:	0150      	lsls	r0, r2, #5
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4621      	mov	r1, r4
 8002a12:	1a51      	subs	r1, r2, r1
 8002a14:	61b9      	str	r1, [r7, #24]
 8002a16:	4629      	mov	r1, r5
 8002a18:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a2a:	4659      	mov	r1, fp
 8002a2c:	018b      	lsls	r3, r1, #6
 8002a2e:	4651      	mov	r1, sl
 8002a30:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a34:	4651      	mov	r1, sl
 8002a36:	018a      	lsls	r2, r1, #6
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ebb2 0801 	subs.w	r8, r2, r1
 8002a3e:	4659      	mov	r1, fp
 8002a40:	eb63 0901 	sbc.w	r9, r3, r1
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a54:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a58:	4690      	mov	r8, r2
 8002a5a:	4699      	mov	r9, r3
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	eb18 0303 	adds.w	r3, r8, r3
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	462b      	mov	r3, r5
 8002a66:	eb49 0303 	adc.w	r3, r9, r3
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a78:	4629      	mov	r1, r5
 8002a7a:	024b      	lsls	r3, r1, #9
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a82:	4621      	mov	r1, r4
 8002a84:	024a      	lsls	r2, r1, #9
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a8e:	2200      	movs	r2, #0
 8002a90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a92:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a98:	f7fd fc0a 	bl	80002b0 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aa6:	e065      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x420>
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x458>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	2200      	movs	r2, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	4611      	mov	r1, r2
 8002ac0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ac4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002aca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ace:	4642      	mov	r2, r8
 8002ad0:	464b      	mov	r3, r9
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f04f 0100 	mov.w	r1, #0
 8002ada:	0159      	lsls	r1, r3, #5
 8002adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae0:	0150      	lsls	r0, r2, #5
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4641      	mov	r1, r8
 8002ae8:	1a51      	subs	r1, r2, r1
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	4649      	mov	r1, r9
 8002aee:	eb63 0301 	sbc.w	r3, r3, r1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b00:	4659      	mov	r1, fp
 8002b02:	018b      	lsls	r3, r1, #6
 8002b04:	4651      	mov	r1, sl
 8002b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	018a      	lsls	r2, r1, #6
 8002b0e:	4651      	mov	r1, sl
 8002b10:	1a54      	subs	r4, r2, r1
 8002b12:	4659      	mov	r1, fp
 8002b14:	eb63 0501 	sbc.w	r5, r3, r1
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b66:	f7fd fba3 	bl	80002b0 <__aeabi_uldivmod>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4613      	mov	r3, r2
 8002b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b74:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x458>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0f1b      	lsrs	r3, r3, #28
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b92:	e003      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	37b8      	adds	r7, #184	@ 0xb8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400

08002bb4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e28d      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8083 	beq.w	8002cda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bd4:	4b94      	ldr	r3, [pc, #592]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d019      	beq.n	8002c14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002be0:	4b91      	ldr	r3, [pc, #580]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
        || \
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bec:	4b8e      	ldr	r3, [pc, #568]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b8b      	ldr	r3, [pc, #556]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b88      	ldr	r3, [pc, #544]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b84      	ldr	r3, [pc, #528]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x124>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e25a      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x90>
 8002c36:	4b7c      	ldr	r3, [pc, #496]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xcc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xb4>
 8002c4e:	4b76      	ldr	r3, [pc, #472]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a75      	ldr	r2, [pc, #468]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b73      	ldr	r3, [pc, #460]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a72      	ldr	r2, [pc, #456]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xcc>
 8002c68:	4b6f      	ldr	r3, [pc, #444]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b6c      	ldr	r3, [pc, #432]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6b      	ldr	r2, [pc, #428]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe f962 	bl	8000f50 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe f95e 	bl	8000f50 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e21f      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b61      	ldr	r3, [pc, #388]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xdc>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f94e 	bl	8000f50 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe f94a 	bl	8000f50 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e20b      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b57      	ldr	r3, [pc, #348]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x104>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d06f      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ce6:	4b50      	ldr	r3, [pc, #320]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d017      	beq.n	8002d22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00b      	beq.n	8002d22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d0a:	4b47      	ldr	r3, [pc, #284]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d11c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b44      	ldr	r3, [pc, #272]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d116      	bne.n	8002d50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	4b41      	ldr	r3, [pc, #260]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x186>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e1d3      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4937      	ldr	r1, [pc, #220]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	e03a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d020      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d58:	4b34      	ldr	r3, [pc, #208]	@ (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f8f7 	bl	8000f50 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d66:	f7fe f8f3 	bl	8000f50 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1b4      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d84:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4925      	ldr	r1, [pc, #148]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
 8002d98:	e015      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	4b24      	ldr	r3, [pc, #144]	@ (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da0:	f7fe f8d6 	bl	8000f50 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da8:	f7fe f8d2 	bl	8000f50 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e193      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	4b1b      	ldr	r3, [pc, #108]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d036      	beq.n	8002e40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d016      	beq.n	8002e08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7fe f8b6 	bl	8000f50 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe f8b2 	bl	8000f50 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e173      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x234>
 8002e06:	e01b      	b.n	8002e40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f89f 	bl	8000f50 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	e00e      	b.n	8002e34 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fe f89b 	bl	8000f50 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d907      	bls.n	8002e34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e15c      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	42470000 	.word	0x42470000
 8002e30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b8a      	ldr	r3, [pc, #552]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ea      	bne.n	8002e16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8097 	beq.w	8002f7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b83      	ldr	r3, [pc, #524]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b7f      	ldr	r3, [pc, #508]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a7e      	ldr	r2, [pc, #504]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b79      	ldr	r3, [pc, #484]	@ (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b76      	ldr	r3, [pc, #472]	@ (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe f85b 	bl	8000f50 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe f857 	bl	8000f50 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e118      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	4b6c      	ldr	r3, [pc, #432]	@ (8003064 <HAL_RCC_OscConfig+0x4b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x31e>
 8002ec4:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a65      	ldr	r2, [pc, #404]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed0:	e01c      	b.n	8002f0c <HAL_RCC_OscConfig+0x358>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x340>
 8002eda:	4b61      	ldr	r3, [pc, #388]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ede:	4a60      	ldr	r2, [pc, #384]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	4a5d      	ldr	r2, [pc, #372]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0x358>
 8002ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	4a59      	ldr	r2, [pc, #356]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f00:	4b57      	ldr	r3, [pc, #348]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a56      	ldr	r2, [pc, #344]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f06:	f023 0304 	bic.w	r3, r3, #4
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe f81c 	bl	8000f50 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f818 	bl	8000f50 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0d7      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	4b4b      	ldr	r3, [pc, #300]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0ee      	beq.n	8002f1c <HAL_RCC_OscConfig+0x368>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f806 	bl	8000f50 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe f802 	bl	8000f50 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0c1      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ee      	bne.n	8002f48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b3b      	ldr	r3, [pc, #236]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	4a3a      	ldr	r2, [pc, #232]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80ad 	beq.w	80030e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f86:	4b36      	ldr	r3, [pc, #216]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d060      	beq.n	8003054 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d145      	bne.n	8003026 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b33      	ldr	r3, [pc, #204]	@ (8003068 <HAL_RCC_OscConfig+0x4b4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fd ffd6 	bl	8000f50 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fd ffd2 	bl	8000f50 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e093      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	019b      	lsls	r3, r3, #6
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	041b      	lsls	r3, r3, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff0:	071b      	lsls	r3, r3, #28
 8002ff2:	491b      	ldr	r1, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_RCC_OscConfig+0x4b4>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fd ffa7 	bl	8000f50 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fd ffa3 	bl	8000f50 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e064      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x452>
 8003024:	e05c      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <HAL_RCC_OscConfig+0x4b4>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302c:	f7fd ff90 	bl	8000f50 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fd ff8c 	bl	8000f50 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e04d      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x480>
 8003052:	e045      	b.n	80030e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e040      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
 8003060:	40023800 	.word	0x40023800
 8003064:	40007000 	.word	0x40007000
 8003068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800306c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ec <HAL_RCC_OscConfig+0x538>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d030      	beq.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d129      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d122      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800309c:	4013      	ands	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d119      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d10f      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e042      	b.n	8003188 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fd34 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	@ 0x24
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f82b 	bl	8003190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b0c0      	sub	sp, #256	@ 0x100
 8003196:	af00      	add	r7, sp, #0
 8003198:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	68d9      	ldr	r1, [r3, #12]
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	ea40 0301 	orr.w	r3, r0, r1
 80031b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031e8:	f021 010c 	bic.w	r1, r1, #12
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031f6:	430b      	orrs	r3, r1
 80031f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	6999      	ldr	r1, [r3, #24]
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	ea40 0301 	orr.w	r3, r0, r1
 8003216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8f      	ldr	r3, [pc, #572]	@ (800345c <UART_SetConfig+0x2cc>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d005      	beq.n	8003230 <UART_SetConfig+0xa0>
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b8d      	ldr	r3, [pc, #564]	@ (8003460 <UART_SetConfig+0x2d0>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d104      	bne.n	800323a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003230:	f7ff fa7c 	bl	800272c <HAL_RCC_GetPCLK2Freq>
 8003234:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003238:	e003      	b.n	8003242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800323a:	f7ff fa63 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 800323e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324c:	f040 810c 	bne.w	8003468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800325a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800325e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	1891      	adds	r1, r2, r2
 8003268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800326a:	415b      	adcs	r3, r3
 800326c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800326e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003272:	4621      	mov	r1, r4
 8003274:	eb12 0801 	adds.w	r8, r2, r1
 8003278:	4629      	mov	r1, r5
 800327a:	eb43 0901 	adc.w	r9, r3, r1
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003292:	4690      	mov	r8, r2
 8003294:	4699      	mov	r9, r3
 8003296:	4623      	mov	r3, r4
 8003298:	eb18 0303 	adds.w	r3, r8, r3
 800329c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032a0:	462b      	mov	r3, r5
 80032a2:	eb49 0303 	adc.w	r3, r9, r3
 80032a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032be:	460b      	mov	r3, r1
 80032c0:	18db      	adds	r3, r3, r3
 80032c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032c4:	4613      	mov	r3, r2
 80032c6:	eb42 0303 	adc.w	r3, r2, r3
 80032ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80032cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032d4:	f7fc ffec 	bl	80002b0 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <UART_SetConfig+0x2d4>)
 80032de:	fba3 2302 	umull	r2, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	011c      	lsls	r4, r3, #4
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003300:	415b      	adcs	r3, r3
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003308:	4641      	mov	r1, r8
 800330a:	eb12 0a01 	adds.w	sl, r2, r1
 800330e:	4649      	mov	r1, r9
 8003310:	eb43 0b01 	adc.w	fp, r3, r1
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003328:	4692      	mov	sl, r2
 800332a:	469b      	mov	fp, r3
 800332c:	4643      	mov	r3, r8
 800332e:	eb1a 0303 	adds.w	r3, sl, r3
 8003332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003336:	464b      	mov	r3, r9
 8003338:	eb4b 0303 	adc.w	r3, fp, r3
 800333c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800334c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003354:	460b      	mov	r3, r1
 8003356:	18db      	adds	r3, r3, r3
 8003358:	643b      	str	r3, [r7, #64]	@ 0x40
 800335a:	4613      	mov	r3, r2
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
 8003362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800336a:	f7fc ffa1 	bl	80002b0 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4611      	mov	r1, r2
 8003374:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <UART_SetConfig+0x2d4>)
 8003376:	fba3 2301 	umull	r2, r3, r3, r1
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2264      	movs	r2, #100	@ 0x64
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	1acb      	subs	r3, r1, r3
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800338a:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <UART_SetConfig+0x2d4>)
 800338c:	fba3 2302 	umull	r2, r3, r3, r2
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003398:	441c      	add	r4, r3
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033b4:	415b      	adcs	r3, r3
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033bc:	4641      	mov	r1, r8
 80033be:	1851      	adds	r1, r2, r1
 80033c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80033c2:	4649      	mov	r1, r9
 80033c4:	414b      	adcs	r3, r1
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033d4:	4659      	mov	r1, fp
 80033d6:	00cb      	lsls	r3, r1, #3
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033de:	4651      	mov	r1, sl
 80033e0:	00ca      	lsls	r2, r1, #3
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	4642      	mov	r2, r8
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f0:	464b      	mov	r3, r9
 80033f2:	460a      	mov	r2, r1
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003408:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800340c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003410:	460b      	mov	r3, r1
 8003412:	18db      	adds	r3, r3, r3
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003416:	4613      	mov	r3, r2
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003426:	f7fc ff43 	bl	80002b0 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <UART_SetConfig+0x2d4>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	2164      	movs	r1, #100	@ 0x64
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	3332      	adds	r3, #50	@ 0x32
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <UART_SetConfig+0x2d4>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	f003 0207 	and.w	r2, r3, #7
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4422      	add	r2, r4
 8003456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003458:	e106      	b.n	8003668 <UART_SetConfig+0x4d8>
 800345a:	bf00      	nop
 800345c:	40011000 	.word	0x40011000
 8003460:	40011400 	.word	0x40011400
 8003464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003472:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800347a:	4642      	mov	r2, r8
 800347c:	464b      	mov	r3, r9
 800347e:	1891      	adds	r1, r2, r2
 8003480:	6239      	str	r1, [r7, #32]
 8003482:	415b      	adcs	r3, r3
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
 8003486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800348a:	4641      	mov	r1, r8
 800348c:	1854      	adds	r4, r2, r1
 800348e:	4649      	mov	r1, r9
 8003490:	eb43 0501 	adc.w	r5, r3, r1
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	00eb      	lsls	r3, r5, #3
 800349e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a2:	00e2      	lsls	r2, r4, #3
 80034a4:	4614      	mov	r4, r2
 80034a6:	461d      	mov	r5, r3
 80034a8:	4643      	mov	r3, r8
 80034aa:	18e3      	adds	r3, r4, r3
 80034ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034b0:	464b      	mov	r3, r9
 80034b2:	eb45 0303 	adc.w	r3, r5, r3
 80034b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034d6:	4629      	mov	r1, r5
 80034d8:	008b      	lsls	r3, r1, #2
 80034da:	4621      	mov	r1, r4
 80034dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e0:	4621      	mov	r1, r4
 80034e2:	008a      	lsls	r2, r1, #2
 80034e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034e8:	f7fc fee2 	bl	80002b0 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b60      	ldr	r3, [pc, #384]	@ (8003674 <UART_SetConfig+0x4e4>)
 80034f2:	fba3 2302 	umull	r2, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	011c      	lsls	r4, r3, #4
 80034fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	1891      	adds	r1, r2, r2
 8003512:	61b9      	str	r1, [r7, #24]
 8003514:	415b      	adcs	r3, r3
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351c:	4641      	mov	r1, r8
 800351e:	1851      	adds	r1, r2, r1
 8003520:	6139      	str	r1, [r7, #16]
 8003522:	4649      	mov	r1, r9
 8003524:	414b      	adcs	r3, r1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003534:	4659      	mov	r1, fp
 8003536:	00cb      	lsls	r3, r1, #3
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353e:	4651      	mov	r1, sl
 8003540:	00ca      	lsls	r2, r1, #3
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	4603      	mov	r3, r0
 8003548:	4642      	mov	r2, r8
 800354a:	189b      	adds	r3, r3, r2
 800354c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003550:	464b      	mov	r3, r9
 8003552:	460a      	mov	r2, r1
 8003554:	eb42 0303 	adc.w	r3, r2, r3
 8003558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003566:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003574:	4649      	mov	r1, r9
 8003576:	008b      	lsls	r3, r1, #2
 8003578:	4641      	mov	r1, r8
 800357a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357e:	4641      	mov	r1, r8
 8003580:	008a      	lsls	r2, r1, #2
 8003582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003586:	f7fc fe93 	bl	80002b0 <__aeabi_uldivmod>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4611      	mov	r1, r2
 8003590:	4b38      	ldr	r3, [pc, #224]	@ (8003674 <UART_SetConfig+0x4e4>)
 8003592:	fba3 2301 	umull	r2, r3, r3, r1
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2264      	movs	r2, #100	@ 0x64
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	1acb      	subs	r3, r1, r3
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	3332      	adds	r3, #50	@ 0x32
 80035a4:	4a33      	ldr	r2, [pc, #204]	@ (8003674 <UART_SetConfig+0x4e4>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b0:	441c      	add	r4, r3
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b6:	2200      	movs	r2, #0
 80035b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80035bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	1891      	adds	r1, r2, r2
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	415b      	adcs	r3, r3
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d0:	4641      	mov	r1, r8
 80035d2:	1851      	adds	r1, r2, r1
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	4649      	mov	r1, r9
 80035d8:	414b      	adcs	r3, r1
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035e8:	4659      	mov	r1, fp
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4651      	mov	r1, sl
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4642      	mov	r2, r8
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003602:	464b      	mov	r3, r9
 8003604:	460a      	mov	r2, r1
 8003606:	eb42 0303 	adc.w	r3, r2, r3
 800360a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	663b      	str	r3, [r7, #96]	@ 0x60
 8003616:	667a      	str	r2, [r7, #100]	@ 0x64
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003624:	4649      	mov	r1, r9
 8003626:	008b      	lsls	r3, r1, #2
 8003628:	4641      	mov	r1, r8
 800362a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800362e:	4641      	mov	r1, r8
 8003630:	008a      	lsls	r2, r1, #2
 8003632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003636:	f7fc fe3b 	bl	80002b0 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <UART_SetConfig+0x4e4>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	@ 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	3332      	adds	r3, #50	@ 0x32
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <UART_SetConfig+0x4e4>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	f003 020f 	and.w	r2, r3, #15
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4422      	add	r2, r4
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800366e:	46bd      	mov	sp, r7
 8003670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003674:	51eb851f 	.word	0x51eb851f

08003678 <std>:
 8003678:	2300      	movs	r3, #0
 800367a:	b510      	push	{r4, lr}
 800367c:	4604      	mov	r4, r0
 800367e:	e9c0 3300 	strd	r3, r3, [r0]
 8003682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003686:	6083      	str	r3, [r0, #8]
 8003688:	8181      	strh	r1, [r0, #12]
 800368a:	6643      	str	r3, [r0, #100]	@ 0x64
 800368c:	81c2      	strh	r2, [r0, #14]
 800368e:	6183      	str	r3, [r0, #24]
 8003690:	4619      	mov	r1, r3
 8003692:	2208      	movs	r2, #8
 8003694:	305c      	adds	r0, #92	@ 0x5c
 8003696:	f000 f90e 	bl	80038b6 <memset>
 800369a:	4b0d      	ldr	r3, [pc, #52]	@ (80036d0 <std+0x58>)
 800369c:	6263      	str	r3, [r4, #36]	@ 0x24
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <std+0x5c>)
 80036a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <std+0x60>)
 80036a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <std+0x64>)
 80036a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <std+0x68>)
 80036ac:	6224      	str	r4, [r4, #32]
 80036ae:	429c      	cmp	r4, r3
 80036b0:	d006      	beq.n	80036c0 <std+0x48>
 80036b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036b6:	4294      	cmp	r4, r2
 80036b8:	d002      	beq.n	80036c0 <std+0x48>
 80036ba:	33d0      	adds	r3, #208	@ 0xd0
 80036bc:	429c      	cmp	r4, r3
 80036be:	d105      	bne.n	80036cc <std+0x54>
 80036c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c8:	f000 b96e 	b.w	80039a8 <__retarget_lock_init_recursive>
 80036cc:	bd10      	pop	{r4, pc}
 80036ce:	bf00      	nop
 80036d0:	08003831 	.word	0x08003831
 80036d4:	08003853 	.word	0x08003853
 80036d8:	0800388b 	.word	0x0800388b
 80036dc:	080038af 	.word	0x080038af
 80036e0:	20000134 	.word	0x20000134

080036e4 <stdio_exit_handler>:
 80036e4:	4a02      	ldr	r2, [pc, #8]	@ (80036f0 <stdio_exit_handler+0xc>)
 80036e6:	4903      	ldr	r1, [pc, #12]	@ (80036f4 <stdio_exit_handler+0x10>)
 80036e8:	4803      	ldr	r0, [pc, #12]	@ (80036f8 <stdio_exit_handler+0x14>)
 80036ea:	f000 b869 	b.w	80037c0 <_fwalk_sglue>
 80036ee:	bf00      	nop
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	08004249 	.word	0x08004249
 80036f8:	2000001c 	.word	0x2000001c

080036fc <cleanup_stdio>:
 80036fc:	6841      	ldr	r1, [r0, #4]
 80036fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <cleanup_stdio+0x34>)
 8003700:	4299      	cmp	r1, r3
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	d001      	beq.n	800370c <cleanup_stdio+0x10>
 8003708:	f000 fd9e 	bl	8004248 <_fflush_r>
 800370c:	68a1      	ldr	r1, [r4, #8]
 800370e:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <cleanup_stdio+0x38>)
 8003710:	4299      	cmp	r1, r3
 8003712:	d002      	beq.n	800371a <cleanup_stdio+0x1e>
 8003714:	4620      	mov	r0, r4
 8003716:	f000 fd97 	bl	8004248 <_fflush_r>
 800371a:	68e1      	ldr	r1, [r4, #12]
 800371c:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <cleanup_stdio+0x3c>)
 800371e:	4299      	cmp	r1, r3
 8003720:	d004      	beq.n	800372c <cleanup_stdio+0x30>
 8003722:	4620      	mov	r0, r4
 8003724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003728:	f000 bd8e 	b.w	8004248 <_fflush_r>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	bf00      	nop
 8003730:	20000134 	.word	0x20000134
 8003734:	2000019c 	.word	0x2000019c
 8003738:	20000204 	.word	0x20000204

0800373c <global_stdio_init.part.0>:
 800373c:	b510      	push	{r4, lr}
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <global_stdio_init.part.0+0x30>)
 8003740:	4c0b      	ldr	r4, [pc, #44]	@ (8003770 <global_stdio_init.part.0+0x34>)
 8003742:	4a0c      	ldr	r2, [pc, #48]	@ (8003774 <global_stdio_init.part.0+0x38>)
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	4620      	mov	r0, r4
 8003748:	2200      	movs	r2, #0
 800374a:	2104      	movs	r1, #4
 800374c:	f7ff ff94 	bl	8003678 <std>
 8003750:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003754:	2201      	movs	r2, #1
 8003756:	2109      	movs	r1, #9
 8003758:	f7ff ff8e 	bl	8003678 <std>
 800375c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003760:	2202      	movs	r2, #2
 8003762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003766:	2112      	movs	r1, #18
 8003768:	f7ff bf86 	b.w	8003678 <std>
 800376c:	2000026c 	.word	0x2000026c
 8003770:	20000134 	.word	0x20000134
 8003774:	080036e5 	.word	0x080036e5

08003778 <__sfp_lock_acquire>:
 8003778:	4801      	ldr	r0, [pc, #4]	@ (8003780 <__sfp_lock_acquire+0x8>)
 800377a:	f000 b916 	b.w	80039aa <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	20000275 	.word	0x20000275

08003784 <__sfp_lock_release>:
 8003784:	4801      	ldr	r0, [pc, #4]	@ (800378c <__sfp_lock_release+0x8>)
 8003786:	f000 b911 	b.w	80039ac <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	20000275 	.word	0x20000275

08003790 <__sinit>:
 8003790:	b510      	push	{r4, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	f7ff fff0 	bl	8003778 <__sfp_lock_acquire>
 8003798:	6a23      	ldr	r3, [r4, #32]
 800379a:	b11b      	cbz	r3, 80037a4 <__sinit+0x14>
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a0:	f7ff bff0 	b.w	8003784 <__sfp_lock_release>
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <__sinit+0x28>)
 80037a6:	6223      	str	r3, [r4, #32]
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__sinit+0x2c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f5      	bne.n	800379c <__sinit+0xc>
 80037b0:	f7ff ffc4 	bl	800373c <global_stdio_init.part.0>
 80037b4:	e7f2      	b.n	800379c <__sinit+0xc>
 80037b6:	bf00      	nop
 80037b8:	080036fd 	.word	0x080036fd
 80037bc:	2000026c 	.word	0x2000026c

080037c0 <_fwalk_sglue>:
 80037c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c4:	4607      	mov	r7, r0
 80037c6:	4688      	mov	r8, r1
 80037c8:	4614      	mov	r4, r2
 80037ca:	2600      	movs	r6, #0
 80037cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037d0:	f1b9 0901 	subs.w	r9, r9, #1
 80037d4:	d505      	bpl.n	80037e2 <_fwalk_sglue+0x22>
 80037d6:	6824      	ldr	r4, [r4, #0]
 80037d8:	2c00      	cmp	r4, #0
 80037da:	d1f7      	bne.n	80037cc <_fwalk_sglue+0xc>
 80037dc:	4630      	mov	r0, r6
 80037de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e2:	89ab      	ldrh	r3, [r5, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d907      	bls.n	80037f8 <_fwalk_sglue+0x38>
 80037e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ec:	3301      	adds	r3, #1
 80037ee:	d003      	beq.n	80037f8 <_fwalk_sglue+0x38>
 80037f0:	4629      	mov	r1, r5
 80037f2:	4638      	mov	r0, r7
 80037f4:	47c0      	blx	r8
 80037f6:	4306      	orrs	r6, r0
 80037f8:	3568      	adds	r5, #104	@ 0x68
 80037fa:	e7e9      	b.n	80037d0 <_fwalk_sglue+0x10>

080037fc <iprintf>:
 80037fc:	b40f      	push	{r0, r1, r2, r3}
 80037fe:	b507      	push	{r0, r1, r2, lr}
 8003800:	4906      	ldr	r1, [pc, #24]	@ (800381c <iprintf+0x20>)
 8003802:	ab04      	add	r3, sp, #16
 8003804:	6808      	ldr	r0, [r1, #0]
 8003806:	f853 2b04 	ldr.w	r2, [r3], #4
 800380a:	6881      	ldr	r1, [r0, #8]
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	f000 f9f1 	bl	8003bf4 <_vfiprintf_r>
 8003812:	b003      	add	sp, #12
 8003814:	f85d eb04 	ldr.w	lr, [sp], #4
 8003818:	b004      	add	sp, #16
 800381a:	4770      	bx	lr
 800381c:	20000018 	.word	0x20000018

08003820 <putchar>:
 8003820:	4b02      	ldr	r3, [pc, #8]	@ (800382c <putchar+0xc>)
 8003822:	4601      	mov	r1, r0
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	6882      	ldr	r2, [r0, #8]
 8003828:	f000 bd36 	b.w	8004298 <_putc_r>
 800382c:	20000018 	.word	0x20000018

08003830 <__sread>:
 8003830:	b510      	push	{r4, lr}
 8003832:	460c      	mov	r4, r1
 8003834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003838:	f000 f868 	bl	800390c <_read_r>
 800383c:	2800      	cmp	r0, #0
 800383e:	bfab      	itete	ge
 8003840:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003842:	89a3      	ldrhlt	r3, [r4, #12]
 8003844:	181b      	addge	r3, r3, r0
 8003846:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800384a:	bfac      	ite	ge
 800384c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800384e:	81a3      	strhlt	r3, [r4, #12]
 8003850:	bd10      	pop	{r4, pc}

08003852 <__swrite>:
 8003852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003856:	461f      	mov	r7, r3
 8003858:	898b      	ldrh	r3, [r1, #12]
 800385a:	05db      	lsls	r3, r3, #23
 800385c:	4605      	mov	r5, r0
 800385e:	460c      	mov	r4, r1
 8003860:	4616      	mov	r6, r2
 8003862:	d505      	bpl.n	8003870 <__swrite+0x1e>
 8003864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003868:	2302      	movs	r3, #2
 800386a:	2200      	movs	r2, #0
 800386c:	f000 f83c 	bl	80038e8 <_lseek_r>
 8003870:	89a3      	ldrh	r3, [r4, #12]
 8003872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	4632      	mov	r2, r6
 800387e:	463b      	mov	r3, r7
 8003880:	4628      	mov	r0, r5
 8003882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003886:	f000 b853 	b.w	8003930 <_write_r>

0800388a <__sseek>:
 800388a:	b510      	push	{r4, lr}
 800388c:	460c      	mov	r4, r1
 800388e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003892:	f000 f829 	bl	80038e8 <_lseek_r>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	bf15      	itete	ne
 800389c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800389e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038a6:	81a3      	strheq	r3, [r4, #12]
 80038a8:	bf18      	it	ne
 80038aa:	81a3      	strhne	r3, [r4, #12]
 80038ac:	bd10      	pop	{r4, pc}

080038ae <__sclose>:
 80038ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b2:	f000 b809 	b.w	80038c8 <_close_r>

080038b6 <memset>:
 80038b6:	4402      	add	r2, r0
 80038b8:	4603      	mov	r3, r0
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d100      	bne.n	80038c0 <memset+0xa>
 80038be:	4770      	bx	lr
 80038c0:	f803 1b01 	strb.w	r1, [r3], #1
 80038c4:	e7f9      	b.n	80038ba <memset+0x4>
	...

080038c8 <_close_r>:
 80038c8:	b538      	push	{r3, r4, r5, lr}
 80038ca:	4d06      	ldr	r5, [pc, #24]	@ (80038e4 <_close_r+0x1c>)
 80038cc:	2300      	movs	r3, #0
 80038ce:	4604      	mov	r4, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	602b      	str	r3, [r5, #0]
 80038d4:	f7fd fa2f 	bl	8000d36 <_close>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	d102      	bne.n	80038e2 <_close_r+0x1a>
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	b103      	cbz	r3, 80038e2 <_close_r+0x1a>
 80038e0:	6023      	str	r3, [r4, #0]
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	20000270 	.word	0x20000270

080038e8 <_lseek_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4d07      	ldr	r5, [pc, #28]	@ (8003908 <_lseek_r+0x20>)
 80038ec:	4604      	mov	r4, r0
 80038ee:	4608      	mov	r0, r1
 80038f0:	4611      	mov	r1, r2
 80038f2:	2200      	movs	r2, #0
 80038f4:	602a      	str	r2, [r5, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f7fd fa44 	bl	8000d84 <_lseek>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_lseek_r+0x1e>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_lseek_r+0x1e>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	20000270 	.word	0x20000270

0800390c <_read_r>:
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4d07      	ldr	r5, [pc, #28]	@ (800392c <_read_r+0x20>)
 8003910:	4604      	mov	r4, r0
 8003912:	4608      	mov	r0, r1
 8003914:	4611      	mov	r1, r2
 8003916:	2200      	movs	r2, #0
 8003918:	602a      	str	r2, [r5, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f7fd f9d2 	bl	8000cc4 <_read>
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d102      	bne.n	800392a <_read_r+0x1e>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b103      	cbz	r3, 800392a <_read_r+0x1e>
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	20000270 	.word	0x20000270

08003930 <_write_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d07      	ldr	r5, [pc, #28]	@ (8003950 <_write_r+0x20>)
 8003934:	4604      	mov	r4, r0
 8003936:	4608      	mov	r0, r1
 8003938:	4611      	mov	r1, r2
 800393a:	2200      	movs	r2, #0
 800393c:	602a      	str	r2, [r5, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	f7fd f9dd 	bl	8000cfe <_write>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d102      	bne.n	800394e <_write_r+0x1e>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	b103      	cbz	r3, 800394e <_write_r+0x1e>
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000270 	.word	0x20000270

08003954 <__errno>:
 8003954:	4b01      	ldr	r3, [pc, #4]	@ (800395c <__errno+0x8>)
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000018 	.word	0x20000018

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4d0d      	ldr	r5, [pc, #52]	@ (8003998 <__libc_init_array+0x38>)
 8003964:	4c0d      	ldr	r4, [pc, #52]	@ (800399c <__libc_init_array+0x3c>)
 8003966:	1b64      	subs	r4, r4, r5
 8003968:	10a4      	asrs	r4, r4, #2
 800396a:	2600      	movs	r6, #0
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	4d0b      	ldr	r5, [pc, #44]	@ (80039a0 <__libc_init_array+0x40>)
 8003972:	4c0c      	ldr	r4, [pc, #48]	@ (80039a4 <__libc_init_array+0x44>)
 8003974:	f000 fdec 	bl	8004550 <_init>
 8003978:	1b64      	subs	r4, r4, r5
 800397a:	10a4      	asrs	r4, r4, #2
 800397c:	2600      	movs	r6, #0
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	f855 3b04 	ldr.w	r3, [r5], #4
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	0800460c 	.word	0x0800460c
 800399c:	0800460c 	.word	0x0800460c
 80039a0:	0800460c 	.word	0x0800460c
 80039a4:	08004610 	.word	0x08004610

080039a8 <__retarget_lock_init_recursive>:
 80039a8:	4770      	bx	lr

080039aa <__retarget_lock_acquire_recursive>:
 80039aa:	4770      	bx	lr

080039ac <__retarget_lock_release_recursive>:
 80039ac:	4770      	bx	lr
	...

080039b0 <_free_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4605      	mov	r5, r0
 80039b4:	2900      	cmp	r1, #0
 80039b6:	d041      	beq.n	8003a3c <_free_r+0x8c>
 80039b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039bc:	1f0c      	subs	r4, r1, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bfb8      	it	lt
 80039c2:	18e4      	addlt	r4, r4, r3
 80039c4:	f000 f8e0 	bl	8003b88 <__malloc_lock>
 80039c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <_free_r+0x90>)
 80039ca:	6813      	ldr	r3, [r2, #0]
 80039cc:	b933      	cbnz	r3, 80039dc <_free_r+0x2c>
 80039ce:	6063      	str	r3, [r4, #4]
 80039d0:	6014      	str	r4, [r2, #0]
 80039d2:	4628      	mov	r0, r5
 80039d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d8:	f000 b8dc 	b.w	8003b94 <__malloc_unlock>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d908      	bls.n	80039f2 <_free_r+0x42>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	1821      	adds	r1, r4, r0
 80039e4:	428b      	cmp	r3, r1
 80039e6:	bf01      	itttt	eq
 80039e8:	6819      	ldreq	r1, [r3, #0]
 80039ea:	685b      	ldreq	r3, [r3, #4]
 80039ec:	1809      	addeq	r1, r1, r0
 80039ee:	6021      	streq	r1, [r4, #0]
 80039f0:	e7ed      	b.n	80039ce <_free_r+0x1e>
 80039f2:	461a      	mov	r2, r3
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b10b      	cbz	r3, 80039fc <_free_r+0x4c>
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	d9fa      	bls.n	80039f2 <_free_r+0x42>
 80039fc:	6811      	ldr	r1, [r2, #0]
 80039fe:	1850      	adds	r0, r2, r1
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d10b      	bne.n	8003a1c <_free_r+0x6c>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	4401      	add	r1, r0
 8003a08:	1850      	adds	r0, r2, r1
 8003a0a:	4283      	cmp	r3, r0
 8003a0c:	6011      	str	r1, [r2, #0]
 8003a0e:	d1e0      	bne.n	80039d2 <_free_r+0x22>
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	4408      	add	r0, r1
 8003a18:	6010      	str	r0, [r2, #0]
 8003a1a:	e7da      	b.n	80039d2 <_free_r+0x22>
 8003a1c:	d902      	bls.n	8003a24 <_free_r+0x74>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	e7d6      	b.n	80039d2 <_free_r+0x22>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	1821      	adds	r1, r4, r0
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	bf04      	itt	eq
 8003a2c:	6819      	ldreq	r1, [r3, #0]
 8003a2e:	685b      	ldreq	r3, [r3, #4]
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	bf04      	itt	eq
 8003a34:	1809      	addeq	r1, r1, r0
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	6054      	str	r4, [r2, #4]
 8003a3a:	e7ca      	b.n	80039d2 <_free_r+0x22>
 8003a3c:	bd38      	pop	{r3, r4, r5, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000027c 	.word	0x2000027c

08003a44 <sbrk_aligned>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	4e0f      	ldr	r6, [pc, #60]	@ (8003a84 <sbrk_aligned+0x40>)
 8003a48:	460c      	mov	r4, r1
 8003a4a:	6831      	ldr	r1, [r6, #0]
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	b911      	cbnz	r1, 8003a56 <sbrk_aligned+0x12>
 8003a50:	f000 fcea 	bl	8004428 <_sbrk_r>
 8003a54:	6030      	str	r0, [r6, #0]
 8003a56:	4621      	mov	r1, r4
 8003a58:	4628      	mov	r0, r5
 8003a5a:	f000 fce5 	bl	8004428 <_sbrk_r>
 8003a5e:	1c43      	adds	r3, r0, #1
 8003a60:	d103      	bne.n	8003a6a <sbrk_aligned+0x26>
 8003a62:	f04f 34ff 	mov.w	r4, #4294967295
 8003a66:	4620      	mov	r0, r4
 8003a68:	bd70      	pop	{r4, r5, r6, pc}
 8003a6a:	1cc4      	adds	r4, r0, #3
 8003a6c:	f024 0403 	bic.w	r4, r4, #3
 8003a70:	42a0      	cmp	r0, r4
 8003a72:	d0f8      	beq.n	8003a66 <sbrk_aligned+0x22>
 8003a74:	1a21      	subs	r1, r4, r0
 8003a76:	4628      	mov	r0, r5
 8003a78:	f000 fcd6 	bl	8004428 <_sbrk_r>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d1f2      	bne.n	8003a66 <sbrk_aligned+0x22>
 8003a80:	e7ef      	b.n	8003a62 <sbrk_aligned+0x1e>
 8003a82:	bf00      	nop
 8003a84:	20000278 	.word	0x20000278

08003a88 <_malloc_r>:
 8003a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a8c:	1ccd      	adds	r5, r1, #3
 8003a8e:	f025 0503 	bic.w	r5, r5, #3
 8003a92:	3508      	adds	r5, #8
 8003a94:	2d0c      	cmp	r5, #12
 8003a96:	bf38      	it	cc
 8003a98:	250c      	movcc	r5, #12
 8003a9a:	2d00      	cmp	r5, #0
 8003a9c:	4606      	mov	r6, r0
 8003a9e:	db01      	blt.n	8003aa4 <_malloc_r+0x1c>
 8003aa0:	42a9      	cmp	r1, r5
 8003aa2:	d904      	bls.n	8003aae <_malloc_r+0x26>
 8003aa4:	230c      	movs	r3, #12
 8003aa6:	6033      	str	r3, [r6, #0]
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b84 <_malloc_r+0xfc>
 8003ab2:	f000 f869 	bl	8003b88 <__malloc_lock>
 8003ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8003aba:	461c      	mov	r4, r3
 8003abc:	bb44      	cbnz	r4, 8003b10 <_malloc_r+0x88>
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f7ff ffbf 	bl	8003a44 <sbrk_aligned>
 8003ac6:	1c43      	adds	r3, r0, #1
 8003ac8:	4604      	mov	r4, r0
 8003aca:	d158      	bne.n	8003b7e <_malloc_r+0xf6>
 8003acc:	f8d8 4000 	ldr.w	r4, [r8]
 8003ad0:	4627      	mov	r7, r4
 8003ad2:	2f00      	cmp	r7, #0
 8003ad4:	d143      	bne.n	8003b5e <_malloc_r+0xd6>
 8003ad6:	2c00      	cmp	r4, #0
 8003ad8:	d04b      	beq.n	8003b72 <_malloc_r+0xea>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	4639      	mov	r1, r7
 8003ade:	4630      	mov	r0, r6
 8003ae0:	eb04 0903 	add.w	r9, r4, r3
 8003ae4:	f000 fca0 	bl	8004428 <_sbrk_r>
 8003ae8:	4581      	cmp	r9, r0
 8003aea:	d142      	bne.n	8003b72 <_malloc_r+0xea>
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	1a6d      	subs	r5, r5, r1
 8003af0:	4629      	mov	r1, r5
 8003af2:	4630      	mov	r0, r6
 8003af4:	f7ff ffa6 	bl	8003a44 <sbrk_aligned>
 8003af8:	3001      	adds	r0, #1
 8003afa:	d03a      	beq.n	8003b72 <_malloc_r+0xea>
 8003afc:	6823      	ldr	r3, [r4, #0]
 8003afe:	442b      	add	r3, r5
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	f8d8 3000 	ldr.w	r3, [r8]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	bb62      	cbnz	r2, 8003b64 <_malloc_r+0xdc>
 8003b0a:	f8c8 7000 	str.w	r7, [r8]
 8003b0e:	e00f      	b.n	8003b30 <_malloc_r+0xa8>
 8003b10:	6822      	ldr	r2, [r4, #0]
 8003b12:	1b52      	subs	r2, r2, r5
 8003b14:	d420      	bmi.n	8003b58 <_malloc_r+0xd0>
 8003b16:	2a0b      	cmp	r2, #11
 8003b18:	d917      	bls.n	8003b4a <_malloc_r+0xc2>
 8003b1a:	1961      	adds	r1, r4, r5
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	6025      	str	r5, [r4, #0]
 8003b20:	bf18      	it	ne
 8003b22:	6059      	strne	r1, [r3, #4]
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	bf08      	it	eq
 8003b28:	f8c8 1000 	streq.w	r1, [r8]
 8003b2c:	5162      	str	r2, [r4, r5]
 8003b2e:	604b      	str	r3, [r1, #4]
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f82f 	bl	8003b94 <__malloc_unlock>
 8003b36:	f104 000b 	add.w	r0, r4, #11
 8003b3a:	1d23      	adds	r3, r4, #4
 8003b3c:	f020 0007 	bic.w	r0, r0, #7
 8003b40:	1ac2      	subs	r2, r0, r3
 8003b42:	bf1c      	itt	ne
 8003b44:	1a1b      	subne	r3, r3, r0
 8003b46:	50a3      	strne	r3, [r4, r2]
 8003b48:	e7af      	b.n	8003aaa <_malloc_r+0x22>
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	42a3      	cmp	r3, r4
 8003b4e:	bf0c      	ite	eq
 8003b50:	f8c8 2000 	streq.w	r2, [r8]
 8003b54:	605a      	strne	r2, [r3, #4]
 8003b56:	e7eb      	b.n	8003b30 <_malloc_r+0xa8>
 8003b58:	4623      	mov	r3, r4
 8003b5a:	6864      	ldr	r4, [r4, #4]
 8003b5c:	e7ae      	b.n	8003abc <_malloc_r+0x34>
 8003b5e:	463c      	mov	r4, r7
 8003b60:	687f      	ldr	r7, [r7, #4]
 8003b62:	e7b6      	b.n	8003ad2 <_malloc_r+0x4a>
 8003b64:	461a      	mov	r2, r3
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d1fb      	bne.n	8003b64 <_malloc_r+0xdc>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6053      	str	r3, [r2, #4]
 8003b70:	e7de      	b.n	8003b30 <_malloc_r+0xa8>
 8003b72:	230c      	movs	r3, #12
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	4630      	mov	r0, r6
 8003b78:	f000 f80c 	bl	8003b94 <__malloc_unlock>
 8003b7c:	e794      	b.n	8003aa8 <_malloc_r+0x20>
 8003b7e:	6005      	str	r5, [r0, #0]
 8003b80:	e7d6      	b.n	8003b30 <_malloc_r+0xa8>
 8003b82:	bf00      	nop
 8003b84:	2000027c 	.word	0x2000027c

08003b88 <__malloc_lock>:
 8003b88:	4801      	ldr	r0, [pc, #4]	@ (8003b90 <__malloc_lock+0x8>)
 8003b8a:	f7ff bf0e 	b.w	80039aa <__retarget_lock_acquire_recursive>
 8003b8e:	bf00      	nop
 8003b90:	20000274 	.word	0x20000274

08003b94 <__malloc_unlock>:
 8003b94:	4801      	ldr	r0, [pc, #4]	@ (8003b9c <__malloc_unlock+0x8>)
 8003b96:	f7ff bf09 	b.w	80039ac <__retarget_lock_release_recursive>
 8003b9a:	bf00      	nop
 8003b9c:	20000274 	.word	0x20000274

08003ba0 <__sfputc_r>:
 8003ba0:	6893      	ldr	r3, [r2, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	b410      	push	{r4}
 8003ba8:	6093      	str	r3, [r2, #8]
 8003baa:	da08      	bge.n	8003bbe <__sfputc_r+0x1e>
 8003bac:	6994      	ldr	r4, [r2, #24]
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	db01      	blt.n	8003bb6 <__sfputc_r+0x16>
 8003bb2:	290a      	cmp	r1, #10
 8003bb4:	d103      	bne.n	8003bbe <__sfputc_r+0x1e>
 8003bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bba:	f000 bba1 	b.w	8004300 <__swbuf_r>
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	1c58      	adds	r0, r3, #1
 8003bc2:	6010      	str	r0, [r2, #0]
 8003bc4:	7019      	strb	r1, [r3, #0]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <__sfputs_r>:
 8003bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	18d5      	adds	r5, r2, r3
 8003bd8:	42ac      	cmp	r4, r5
 8003bda:	d101      	bne.n	8003be0 <__sfputs_r+0x12>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e007      	b.n	8003bf0 <__sfputs_r+0x22>
 8003be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be4:	463a      	mov	r2, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffda 	bl	8003ba0 <__sfputc_r>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d1f3      	bne.n	8003bd8 <__sfputs_r+0xa>
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bf4 <_vfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	b09d      	sub	sp, #116	@ 0x74
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	4698      	mov	r8, r3
 8003c00:	4606      	mov	r6, r0
 8003c02:	b118      	cbz	r0, 8003c0c <_vfiprintf_r+0x18>
 8003c04:	6a03      	ldr	r3, [r0, #32]
 8003c06:	b90b      	cbnz	r3, 8003c0c <_vfiprintf_r+0x18>
 8003c08:	f7ff fdc2 	bl	8003790 <__sinit>
 8003c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c0e:	07d9      	lsls	r1, r3, #31
 8003c10:	d405      	bmi.n	8003c1e <_vfiprintf_r+0x2a>
 8003c12:	89ab      	ldrh	r3, [r5, #12]
 8003c14:	059a      	lsls	r2, r3, #22
 8003c16:	d402      	bmi.n	8003c1e <_vfiprintf_r+0x2a>
 8003c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c1a:	f7ff fec6 	bl	80039aa <__retarget_lock_acquire_recursive>
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	071b      	lsls	r3, r3, #28
 8003c22:	d501      	bpl.n	8003c28 <_vfiprintf_r+0x34>
 8003c24:	692b      	ldr	r3, [r5, #16]
 8003c26:	b99b      	cbnz	r3, 8003c50 <_vfiprintf_r+0x5c>
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f000 fba6 	bl	800437c <__swsetup_r>
 8003c30:	b170      	cbz	r0, 8003c50 <_vfiprintf_r+0x5c>
 8003c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c34:	07dc      	lsls	r4, r3, #31
 8003c36:	d504      	bpl.n	8003c42 <_vfiprintf_r+0x4e>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	b01d      	add	sp, #116	@ 0x74
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	89ab      	ldrh	r3, [r5, #12]
 8003c44:	0598      	lsls	r0, r3, #22
 8003c46:	d4f7      	bmi.n	8003c38 <_vfiprintf_r+0x44>
 8003c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c4a:	f7ff feaf 	bl	80039ac <__retarget_lock_release_recursive>
 8003c4e:	e7f3      	b.n	8003c38 <_vfiprintf_r+0x44>
 8003c50:	2300      	movs	r3, #0
 8003c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c54:	2320      	movs	r3, #32
 8003c56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c5e:	2330      	movs	r3, #48	@ 0x30
 8003c60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003e10 <_vfiprintf_r+0x21c>
 8003c64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c68:	f04f 0901 	mov.w	r9, #1
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	469a      	mov	sl, r3
 8003c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c74:	b10a      	cbz	r2, 8003c7a <_vfiprintf_r+0x86>
 8003c76:	2a25      	cmp	r2, #37	@ 0x25
 8003c78:	d1f9      	bne.n	8003c6e <_vfiprintf_r+0x7a>
 8003c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c7e:	d00b      	beq.n	8003c98 <_vfiprintf_r+0xa4>
 8003c80:	465b      	mov	r3, fp
 8003c82:	4622      	mov	r2, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7ff ffa1 	bl	8003bce <__sfputs_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	f000 80a7 	beq.w	8003de0 <_vfiprintf_r+0x1ec>
 8003c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c94:	445a      	add	r2, fp
 8003c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c98:	f89a 3000 	ldrb.w	r3, [sl]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 809f 	beq.w	8003de0 <_vfiprintf_r+0x1ec>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cac:	f10a 0a01 	add.w	sl, sl, #1
 8003cb0:	9304      	str	r3, [sp, #16]
 8003cb2:	9307      	str	r3, [sp, #28]
 8003cb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cba:	4654      	mov	r4, sl
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc2:	4853      	ldr	r0, [pc, #332]	@ (8003e10 <_vfiprintf_r+0x21c>)
 8003cc4:	f7fc faa4 	bl	8000210 <memchr>
 8003cc8:	9a04      	ldr	r2, [sp, #16]
 8003cca:	b9d8      	cbnz	r0, 8003d04 <_vfiprintf_r+0x110>
 8003ccc:	06d1      	lsls	r1, r2, #27
 8003cce:	bf44      	itt	mi
 8003cd0:	2320      	movmi	r3, #32
 8003cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cd6:	0713      	lsls	r3, r2, #28
 8003cd8:	bf44      	itt	mi
 8003cda:	232b      	movmi	r3, #43	@ 0x2b
 8003cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ce6:	d015      	beq.n	8003d14 <_vfiprintf_r+0x120>
 8003ce8:	9a07      	ldr	r2, [sp, #28]
 8003cea:	4654      	mov	r4, sl
 8003cec:	2000      	movs	r0, #0
 8003cee:	f04f 0c0a 	mov.w	ip, #10
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cf8:	3b30      	subs	r3, #48	@ 0x30
 8003cfa:	2b09      	cmp	r3, #9
 8003cfc:	d94b      	bls.n	8003d96 <_vfiprintf_r+0x1a2>
 8003cfe:	b1b0      	cbz	r0, 8003d2e <_vfiprintf_r+0x13a>
 8003d00:	9207      	str	r2, [sp, #28]
 8003d02:	e014      	b.n	8003d2e <_vfiprintf_r+0x13a>
 8003d04:	eba0 0308 	sub.w	r3, r0, r8
 8003d08:	fa09 f303 	lsl.w	r3, r9, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	46a2      	mov	sl, r4
 8003d12:	e7d2      	b.n	8003cba <_vfiprintf_r+0xc6>
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	1d19      	adds	r1, r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9103      	str	r1, [sp, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bfbb      	ittet	lt
 8003d20:	425b      	neglt	r3, r3
 8003d22:	f042 0202 	orrlt.w	r2, r2, #2
 8003d26:	9307      	strge	r3, [sp, #28]
 8003d28:	9307      	strlt	r3, [sp, #28]
 8003d2a:	bfb8      	it	lt
 8003d2c:	9204      	strlt	r2, [sp, #16]
 8003d2e:	7823      	ldrb	r3, [r4, #0]
 8003d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d32:	d10a      	bne.n	8003d4a <_vfiprintf_r+0x156>
 8003d34:	7863      	ldrb	r3, [r4, #1]
 8003d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d38:	d132      	bne.n	8003da0 <_vfiprintf_r+0x1ac>
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	1d1a      	adds	r2, r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	9203      	str	r2, [sp, #12]
 8003d42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d46:	3402      	adds	r4, #2
 8003d48:	9305      	str	r3, [sp, #20]
 8003d4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003e20 <_vfiprintf_r+0x22c>
 8003d4e:	7821      	ldrb	r1, [r4, #0]
 8003d50:	2203      	movs	r2, #3
 8003d52:	4650      	mov	r0, sl
 8003d54:	f7fc fa5c 	bl	8000210 <memchr>
 8003d58:	b138      	cbz	r0, 8003d6a <_vfiprintf_r+0x176>
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	eba0 000a 	sub.w	r0, r0, sl
 8003d60:	2240      	movs	r2, #64	@ 0x40
 8003d62:	4082      	lsls	r2, r0
 8003d64:	4313      	orrs	r3, r2
 8003d66:	3401      	adds	r4, #1
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d6e:	4829      	ldr	r0, [pc, #164]	@ (8003e14 <_vfiprintf_r+0x220>)
 8003d70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d74:	2206      	movs	r2, #6
 8003d76:	f7fc fa4b 	bl	8000210 <memchr>
 8003d7a:	2800      	cmp	r0, #0
 8003d7c:	d03f      	beq.n	8003dfe <_vfiprintf_r+0x20a>
 8003d7e:	4b26      	ldr	r3, [pc, #152]	@ (8003e18 <_vfiprintf_r+0x224>)
 8003d80:	bb1b      	cbnz	r3, 8003dca <_vfiprintf_r+0x1d6>
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	3307      	adds	r3, #7
 8003d86:	f023 0307 	bic.w	r3, r3, #7
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	9303      	str	r3, [sp, #12]
 8003d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d90:	443b      	add	r3, r7
 8003d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d94:	e76a      	b.n	8003c6c <_vfiprintf_r+0x78>
 8003d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	e7a8      	b.n	8003cf2 <_vfiprintf_r+0xfe>
 8003da0:	2300      	movs	r3, #0
 8003da2:	3401      	adds	r4, #1
 8003da4:	9305      	str	r3, [sp, #20]
 8003da6:	4619      	mov	r1, r3
 8003da8:	f04f 0c0a 	mov.w	ip, #10
 8003dac:	4620      	mov	r0, r4
 8003dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db2:	3a30      	subs	r2, #48	@ 0x30
 8003db4:	2a09      	cmp	r2, #9
 8003db6:	d903      	bls.n	8003dc0 <_vfiprintf_r+0x1cc>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0c6      	beq.n	8003d4a <_vfiprintf_r+0x156>
 8003dbc:	9105      	str	r1, [sp, #20]
 8003dbe:	e7c4      	b.n	8003d4a <_vfiprintf_r+0x156>
 8003dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e7f0      	b.n	8003dac <_vfiprintf_r+0x1b8>
 8003dca:	ab03      	add	r3, sp, #12
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	462a      	mov	r2, r5
 8003dd0:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <_vfiprintf_r+0x228>)
 8003dd2:	a904      	add	r1, sp, #16
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f3af 8000 	nop.w
 8003dda:	4607      	mov	r7, r0
 8003ddc:	1c78      	adds	r0, r7, #1
 8003dde:	d1d6      	bne.n	8003d8e <_vfiprintf_r+0x19a>
 8003de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003de2:	07d9      	lsls	r1, r3, #31
 8003de4:	d405      	bmi.n	8003df2 <_vfiprintf_r+0x1fe>
 8003de6:	89ab      	ldrh	r3, [r5, #12]
 8003de8:	059a      	lsls	r2, r3, #22
 8003dea:	d402      	bmi.n	8003df2 <_vfiprintf_r+0x1fe>
 8003dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dee:	f7ff fddd 	bl	80039ac <__retarget_lock_release_recursive>
 8003df2:	89ab      	ldrh	r3, [r5, #12]
 8003df4:	065b      	lsls	r3, r3, #25
 8003df6:	f53f af1f 	bmi.w	8003c38 <_vfiprintf_r+0x44>
 8003dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dfc:	e71e      	b.n	8003c3c <_vfiprintf_r+0x48>
 8003dfe:	ab03      	add	r3, sp, #12
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	462a      	mov	r2, r5
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <_vfiprintf_r+0x228>)
 8003e06:	a904      	add	r1, sp, #16
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f000 f879 	bl	8003f00 <_printf_i>
 8003e0e:	e7e4      	b.n	8003dda <_vfiprintf_r+0x1e6>
 8003e10:	080045d0 	.word	0x080045d0
 8003e14:	080045da 	.word	0x080045da
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	08003bcf 	.word	0x08003bcf
 8003e20:	080045d6 	.word	0x080045d6

08003e24 <_printf_common>:
 8003e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	4616      	mov	r6, r2
 8003e2a:	4698      	mov	r8, r3
 8003e2c:	688a      	ldr	r2, [r1, #8]
 8003e2e:	690b      	ldr	r3, [r1, #16]
 8003e30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e34:	4293      	cmp	r3, r2
 8003e36:	bfb8      	it	lt
 8003e38:	4613      	movlt	r3, r2
 8003e3a:	6033      	str	r3, [r6, #0]
 8003e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e40:	4607      	mov	r7, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	b10a      	cbz	r2, 8003e4a <_printf_common+0x26>
 8003e46:	3301      	adds	r3, #1
 8003e48:	6033      	str	r3, [r6, #0]
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	0699      	lsls	r1, r3, #26
 8003e4e:	bf42      	ittt	mi
 8003e50:	6833      	ldrmi	r3, [r6, #0]
 8003e52:	3302      	addmi	r3, #2
 8003e54:	6033      	strmi	r3, [r6, #0]
 8003e56:	6825      	ldr	r5, [r4, #0]
 8003e58:	f015 0506 	ands.w	r5, r5, #6
 8003e5c:	d106      	bne.n	8003e6c <_printf_common+0x48>
 8003e5e:	f104 0a19 	add.w	sl, r4, #25
 8003e62:	68e3      	ldr	r3, [r4, #12]
 8003e64:	6832      	ldr	r2, [r6, #0]
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	42ab      	cmp	r3, r5
 8003e6a:	dc26      	bgt.n	8003eba <_printf_common+0x96>
 8003e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	3b00      	subs	r3, #0
 8003e74:	bf18      	it	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	0692      	lsls	r2, r2, #26
 8003e7a:	d42b      	bmi.n	8003ed4 <_printf_common+0xb0>
 8003e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e80:	4641      	mov	r1, r8
 8003e82:	4638      	mov	r0, r7
 8003e84:	47c8      	blx	r9
 8003e86:	3001      	adds	r0, #1
 8003e88:	d01e      	beq.n	8003ec8 <_printf_common+0xa4>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	6922      	ldr	r2, [r4, #16]
 8003e8e:	f003 0306 	and.w	r3, r3, #6
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf02      	ittt	eq
 8003e96:	68e5      	ldreq	r5, [r4, #12]
 8003e98:	6833      	ldreq	r3, [r6, #0]
 8003e9a:	1aed      	subeq	r5, r5, r3
 8003e9c:	68a3      	ldr	r3, [r4, #8]
 8003e9e:	bf0c      	ite	eq
 8003ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea4:	2500      	movne	r5, #0
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	bfc4      	itt	gt
 8003eaa:	1a9b      	subgt	r3, r3, r2
 8003eac:	18ed      	addgt	r5, r5, r3
 8003eae:	2600      	movs	r6, #0
 8003eb0:	341a      	adds	r4, #26
 8003eb2:	42b5      	cmp	r5, r6
 8003eb4:	d11a      	bne.n	8003eec <_printf_common+0xc8>
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	e008      	b.n	8003ecc <_printf_common+0xa8>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	4652      	mov	r2, sl
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	47c8      	blx	r9
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d103      	bne.n	8003ed0 <_printf_common+0xac>
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed0:	3501      	adds	r5, #1
 8003ed2:	e7c6      	b.n	8003e62 <_printf_common+0x3e>
 8003ed4:	18e1      	adds	r1, r4, r3
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	2030      	movs	r0, #48	@ 0x30
 8003eda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ede:	4422      	add	r2, r4
 8003ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ee8:	3302      	adds	r3, #2
 8003eea:	e7c7      	b.n	8003e7c <_printf_common+0x58>
 8003eec:	2301      	movs	r3, #1
 8003eee:	4622      	mov	r2, r4
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	47c8      	blx	r9
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d0e6      	beq.n	8003ec8 <_printf_common+0xa4>
 8003efa:	3601      	adds	r6, #1
 8003efc:	e7d9      	b.n	8003eb2 <_printf_common+0x8e>
	...

08003f00 <_printf_i>:
 8003f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	7e0f      	ldrb	r7, [r1, #24]
 8003f06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f08:	2f78      	cmp	r7, #120	@ 0x78
 8003f0a:	4691      	mov	r9, r2
 8003f0c:	4680      	mov	r8, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	469a      	mov	sl, r3
 8003f12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f16:	d807      	bhi.n	8003f28 <_printf_i+0x28>
 8003f18:	2f62      	cmp	r7, #98	@ 0x62
 8003f1a:	d80a      	bhi.n	8003f32 <_printf_i+0x32>
 8003f1c:	2f00      	cmp	r7, #0
 8003f1e:	f000 80d2 	beq.w	80040c6 <_printf_i+0x1c6>
 8003f22:	2f58      	cmp	r7, #88	@ 0x58
 8003f24:	f000 80b9 	beq.w	800409a <_printf_i+0x19a>
 8003f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f30:	e03a      	b.n	8003fa8 <_printf_i+0xa8>
 8003f32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f36:	2b15      	cmp	r3, #21
 8003f38:	d8f6      	bhi.n	8003f28 <_printf_i+0x28>
 8003f3a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f40 <_printf_i+0x40>)
 8003f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f40:	08003f99 	.word	0x08003f99
 8003f44:	08003fad 	.word	0x08003fad
 8003f48:	08003f29 	.word	0x08003f29
 8003f4c:	08003f29 	.word	0x08003f29
 8003f50:	08003f29 	.word	0x08003f29
 8003f54:	08003f29 	.word	0x08003f29
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	08003f29 	.word	0x08003f29
 8003f60:	08003f29 	.word	0x08003f29
 8003f64:	08003f29 	.word	0x08003f29
 8003f68:	08003f29 	.word	0x08003f29
 8003f6c:	080040ad 	.word	0x080040ad
 8003f70:	08003fd7 	.word	0x08003fd7
 8003f74:	08004067 	.word	0x08004067
 8003f78:	08003f29 	.word	0x08003f29
 8003f7c:	08003f29 	.word	0x08003f29
 8003f80:	080040cf 	.word	0x080040cf
 8003f84:	08003f29 	.word	0x08003f29
 8003f88:	08003fd7 	.word	0x08003fd7
 8003f8c:	08003f29 	.word	0x08003f29
 8003f90:	08003f29 	.word	0x08003f29
 8003f94:	0800406f 	.word	0x0800406f
 8003f98:	6833      	ldr	r3, [r6, #0]
 8003f9a:	1d1a      	adds	r2, r3, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6032      	str	r2, [r6, #0]
 8003fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e09d      	b.n	80040e8 <_printf_i+0x1e8>
 8003fac:	6833      	ldr	r3, [r6, #0]
 8003fae:	6820      	ldr	r0, [r4, #0]
 8003fb0:	1d19      	adds	r1, r3, #4
 8003fb2:	6031      	str	r1, [r6, #0]
 8003fb4:	0606      	lsls	r6, r0, #24
 8003fb6:	d501      	bpl.n	8003fbc <_printf_i+0xbc>
 8003fb8:	681d      	ldr	r5, [r3, #0]
 8003fba:	e003      	b.n	8003fc4 <_printf_i+0xc4>
 8003fbc:	0645      	lsls	r5, r0, #25
 8003fbe:	d5fb      	bpl.n	8003fb8 <_printf_i+0xb8>
 8003fc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fc4:	2d00      	cmp	r5, #0
 8003fc6:	da03      	bge.n	8003fd0 <_printf_i+0xd0>
 8003fc8:	232d      	movs	r3, #45	@ 0x2d
 8003fca:	426d      	negs	r5, r5
 8003fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fd0:	4859      	ldr	r0, [pc, #356]	@ (8004138 <_printf_i+0x238>)
 8003fd2:	230a      	movs	r3, #10
 8003fd4:	e011      	b.n	8003ffa <_printf_i+0xfa>
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	6833      	ldr	r3, [r6, #0]
 8003fda:	0608      	lsls	r0, r1, #24
 8003fdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fe0:	d402      	bmi.n	8003fe8 <_printf_i+0xe8>
 8003fe2:	0649      	lsls	r1, r1, #25
 8003fe4:	bf48      	it	mi
 8003fe6:	b2ad      	uxthmi	r5, r5
 8003fe8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fea:	4853      	ldr	r0, [pc, #332]	@ (8004138 <_printf_i+0x238>)
 8003fec:	6033      	str	r3, [r6, #0]
 8003fee:	bf14      	ite	ne
 8003ff0:	230a      	movne	r3, #10
 8003ff2:	2308      	moveq	r3, #8
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ffa:	6866      	ldr	r6, [r4, #4]
 8003ffc:	60a6      	str	r6, [r4, #8]
 8003ffe:	2e00      	cmp	r6, #0
 8004000:	bfa2      	ittt	ge
 8004002:	6821      	ldrge	r1, [r4, #0]
 8004004:	f021 0104 	bicge.w	r1, r1, #4
 8004008:	6021      	strge	r1, [r4, #0]
 800400a:	b90d      	cbnz	r5, 8004010 <_printf_i+0x110>
 800400c:	2e00      	cmp	r6, #0
 800400e:	d04b      	beq.n	80040a8 <_printf_i+0x1a8>
 8004010:	4616      	mov	r6, r2
 8004012:	fbb5 f1f3 	udiv	r1, r5, r3
 8004016:	fb03 5711 	mls	r7, r3, r1, r5
 800401a:	5dc7      	ldrb	r7, [r0, r7]
 800401c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004020:	462f      	mov	r7, r5
 8004022:	42bb      	cmp	r3, r7
 8004024:	460d      	mov	r5, r1
 8004026:	d9f4      	bls.n	8004012 <_printf_i+0x112>
 8004028:	2b08      	cmp	r3, #8
 800402a:	d10b      	bne.n	8004044 <_printf_i+0x144>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	07df      	lsls	r7, r3, #31
 8004030:	d508      	bpl.n	8004044 <_printf_i+0x144>
 8004032:	6923      	ldr	r3, [r4, #16]
 8004034:	6861      	ldr	r1, [r4, #4]
 8004036:	4299      	cmp	r1, r3
 8004038:	bfde      	ittt	le
 800403a:	2330      	movle	r3, #48	@ 0x30
 800403c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004040:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004044:	1b92      	subs	r2, r2, r6
 8004046:	6122      	str	r2, [r4, #16]
 8004048:	f8cd a000 	str.w	sl, [sp]
 800404c:	464b      	mov	r3, r9
 800404e:	aa03      	add	r2, sp, #12
 8004050:	4621      	mov	r1, r4
 8004052:	4640      	mov	r0, r8
 8004054:	f7ff fee6 	bl	8003e24 <_printf_common>
 8004058:	3001      	adds	r0, #1
 800405a:	d14a      	bne.n	80040f2 <_printf_i+0x1f2>
 800405c:	f04f 30ff 	mov.w	r0, #4294967295
 8004060:	b004      	add	sp, #16
 8004062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	f043 0320 	orr.w	r3, r3, #32
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	4833      	ldr	r0, [pc, #204]	@ (800413c <_printf_i+0x23c>)
 8004070:	2778      	movs	r7, #120	@ 0x78
 8004072:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	6831      	ldr	r1, [r6, #0]
 800407a:	061f      	lsls	r7, r3, #24
 800407c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004080:	d402      	bmi.n	8004088 <_printf_i+0x188>
 8004082:	065f      	lsls	r7, r3, #25
 8004084:	bf48      	it	mi
 8004086:	b2ad      	uxthmi	r5, r5
 8004088:	6031      	str	r1, [r6, #0]
 800408a:	07d9      	lsls	r1, r3, #31
 800408c:	bf44      	itt	mi
 800408e:	f043 0320 	orrmi.w	r3, r3, #32
 8004092:	6023      	strmi	r3, [r4, #0]
 8004094:	b11d      	cbz	r5, 800409e <_printf_i+0x19e>
 8004096:	2310      	movs	r3, #16
 8004098:	e7ac      	b.n	8003ff4 <_printf_i+0xf4>
 800409a:	4827      	ldr	r0, [pc, #156]	@ (8004138 <_printf_i+0x238>)
 800409c:	e7e9      	b.n	8004072 <_printf_i+0x172>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	f023 0320 	bic.w	r3, r3, #32
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	e7f6      	b.n	8004096 <_printf_i+0x196>
 80040a8:	4616      	mov	r6, r2
 80040aa:	e7bd      	b.n	8004028 <_printf_i+0x128>
 80040ac:	6833      	ldr	r3, [r6, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	6961      	ldr	r1, [r4, #20]
 80040b2:	1d18      	adds	r0, r3, #4
 80040b4:	6030      	str	r0, [r6, #0]
 80040b6:	062e      	lsls	r6, r5, #24
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	d501      	bpl.n	80040c0 <_printf_i+0x1c0>
 80040bc:	6019      	str	r1, [r3, #0]
 80040be:	e002      	b.n	80040c6 <_printf_i+0x1c6>
 80040c0:	0668      	lsls	r0, r5, #25
 80040c2:	d5fb      	bpl.n	80040bc <_printf_i+0x1bc>
 80040c4:	8019      	strh	r1, [r3, #0]
 80040c6:	2300      	movs	r3, #0
 80040c8:	6123      	str	r3, [r4, #16]
 80040ca:	4616      	mov	r6, r2
 80040cc:	e7bc      	b.n	8004048 <_printf_i+0x148>
 80040ce:	6833      	ldr	r3, [r6, #0]
 80040d0:	1d1a      	adds	r2, r3, #4
 80040d2:	6032      	str	r2, [r6, #0]
 80040d4:	681e      	ldr	r6, [r3, #0]
 80040d6:	6862      	ldr	r2, [r4, #4]
 80040d8:	2100      	movs	r1, #0
 80040da:	4630      	mov	r0, r6
 80040dc:	f7fc f898 	bl	8000210 <memchr>
 80040e0:	b108      	cbz	r0, 80040e6 <_printf_i+0x1e6>
 80040e2:	1b80      	subs	r0, r0, r6
 80040e4:	6060      	str	r0, [r4, #4]
 80040e6:	6863      	ldr	r3, [r4, #4]
 80040e8:	6123      	str	r3, [r4, #16]
 80040ea:	2300      	movs	r3, #0
 80040ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040f0:	e7aa      	b.n	8004048 <_printf_i+0x148>
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	4632      	mov	r2, r6
 80040f6:	4649      	mov	r1, r9
 80040f8:	4640      	mov	r0, r8
 80040fa:	47d0      	blx	sl
 80040fc:	3001      	adds	r0, #1
 80040fe:	d0ad      	beq.n	800405c <_printf_i+0x15c>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	079b      	lsls	r3, r3, #30
 8004104:	d413      	bmi.n	800412e <_printf_i+0x22e>
 8004106:	68e0      	ldr	r0, [r4, #12]
 8004108:	9b03      	ldr	r3, [sp, #12]
 800410a:	4298      	cmp	r0, r3
 800410c:	bfb8      	it	lt
 800410e:	4618      	movlt	r0, r3
 8004110:	e7a6      	b.n	8004060 <_printf_i+0x160>
 8004112:	2301      	movs	r3, #1
 8004114:	4632      	mov	r2, r6
 8004116:	4649      	mov	r1, r9
 8004118:	4640      	mov	r0, r8
 800411a:	47d0      	blx	sl
 800411c:	3001      	adds	r0, #1
 800411e:	d09d      	beq.n	800405c <_printf_i+0x15c>
 8004120:	3501      	adds	r5, #1
 8004122:	68e3      	ldr	r3, [r4, #12]
 8004124:	9903      	ldr	r1, [sp, #12]
 8004126:	1a5b      	subs	r3, r3, r1
 8004128:	42ab      	cmp	r3, r5
 800412a:	dcf2      	bgt.n	8004112 <_printf_i+0x212>
 800412c:	e7eb      	b.n	8004106 <_printf_i+0x206>
 800412e:	2500      	movs	r5, #0
 8004130:	f104 0619 	add.w	r6, r4, #25
 8004134:	e7f5      	b.n	8004122 <_printf_i+0x222>
 8004136:	bf00      	nop
 8004138:	080045e1 	.word	0x080045e1
 800413c:	080045f2 	.word	0x080045f2

08004140 <__sflush_r>:
 8004140:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	0716      	lsls	r6, r2, #28
 800414a:	4605      	mov	r5, r0
 800414c:	460c      	mov	r4, r1
 800414e:	d454      	bmi.n	80041fa <__sflush_r+0xba>
 8004150:	684b      	ldr	r3, [r1, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	dc02      	bgt.n	800415c <__sflush_r+0x1c>
 8004156:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	dd48      	ble.n	80041ee <__sflush_r+0xae>
 800415c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800415e:	2e00      	cmp	r6, #0
 8004160:	d045      	beq.n	80041ee <__sflush_r+0xae>
 8004162:	2300      	movs	r3, #0
 8004164:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004168:	682f      	ldr	r7, [r5, #0]
 800416a:	6a21      	ldr	r1, [r4, #32]
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	d030      	beq.n	80041d2 <__sflush_r+0x92>
 8004170:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	0759      	lsls	r1, r3, #29
 8004176:	d505      	bpl.n	8004184 <__sflush_r+0x44>
 8004178:	6863      	ldr	r3, [r4, #4]
 800417a:	1ad2      	subs	r2, r2, r3
 800417c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800417e:	b10b      	cbz	r3, 8004184 <__sflush_r+0x44>
 8004180:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	2300      	movs	r3, #0
 8004186:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004188:	6a21      	ldr	r1, [r4, #32]
 800418a:	4628      	mov	r0, r5
 800418c:	47b0      	blx	r6
 800418e:	1c43      	adds	r3, r0, #1
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	d106      	bne.n	80041a2 <__sflush_r+0x62>
 8004194:	6829      	ldr	r1, [r5, #0]
 8004196:	291d      	cmp	r1, #29
 8004198:	d82b      	bhi.n	80041f2 <__sflush_r+0xb2>
 800419a:	4a2a      	ldr	r2, [pc, #168]	@ (8004244 <__sflush_r+0x104>)
 800419c:	410a      	asrs	r2, r1
 800419e:	07d6      	lsls	r6, r2, #31
 80041a0:	d427      	bmi.n	80041f2 <__sflush_r+0xb2>
 80041a2:	2200      	movs	r2, #0
 80041a4:	6062      	str	r2, [r4, #4]
 80041a6:	04d9      	lsls	r1, r3, #19
 80041a8:	6922      	ldr	r2, [r4, #16]
 80041aa:	6022      	str	r2, [r4, #0]
 80041ac:	d504      	bpl.n	80041b8 <__sflush_r+0x78>
 80041ae:	1c42      	adds	r2, r0, #1
 80041b0:	d101      	bne.n	80041b6 <__sflush_r+0x76>
 80041b2:	682b      	ldr	r3, [r5, #0]
 80041b4:	b903      	cbnz	r3, 80041b8 <__sflush_r+0x78>
 80041b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80041b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041ba:	602f      	str	r7, [r5, #0]
 80041bc:	b1b9      	cbz	r1, 80041ee <__sflush_r+0xae>
 80041be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041c2:	4299      	cmp	r1, r3
 80041c4:	d002      	beq.n	80041cc <__sflush_r+0x8c>
 80041c6:	4628      	mov	r0, r5
 80041c8:	f7ff fbf2 	bl	80039b0 <_free_r>
 80041cc:	2300      	movs	r3, #0
 80041ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80041d0:	e00d      	b.n	80041ee <__sflush_r+0xae>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4628      	mov	r0, r5
 80041d6:	47b0      	blx	r6
 80041d8:	4602      	mov	r2, r0
 80041da:	1c50      	adds	r0, r2, #1
 80041dc:	d1c9      	bne.n	8004172 <__sflush_r+0x32>
 80041de:	682b      	ldr	r3, [r5, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0c6      	beq.n	8004172 <__sflush_r+0x32>
 80041e4:	2b1d      	cmp	r3, #29
 80041e6:	d001      	beq.n	80041ec <__sflush_r+0xac>
 80041e8:	2b16      	cmp	r3, #22
 80041ea:	d11e      	bne.n	800422a <__sflush_r+0xea>
 80041ec:	602f      	str	r7, [r5, #0]
 80041ee:	2000      	movs	r0, #0
 80041f0:	e022      	b.n	8004238 <__sflush_r+0xf8>
 80041f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f6:	b21b      	sxth	r3, r3
 80041f8:	e01b      	b.n	8004232 <__sflush_r+0xf2>
 80041fa:	690f      	ldr	r7, [r1, #16]
 80041fc:	2f00      	cmp	r7, #0
 80041fe:	d0f6      	beq.n	80041ee <__sflush_r+0xae>
 8004200:	0793      	lsls	r3, r2, #30
 8004202:	680e      	ldr	r6, [r1, #0]
 8004204:	bf08      	it	eq
 8004206:	694b      	ldreq	r3, [r1, #20]
 8004208:	600f      	str	r7, [r1, #0]
 800420a:	bf18      	it	ne
 800420c:	2300      	movne	r3, #0
 800420e:	eba6 0807 	sub.w	r8, r6, r7
 8004212:	608b      	str	r3, [r1, #8]
 8004214:	f1b8 0f00 	cmp.w	r8, #0
 8004218:	dde9      	ble.n	80041ee <__sflush_r+0xae>
 800421a:	6a21      	ldr	r1, [r4, #32]
 800421c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800421e:	4643      	mov	r3, r8
 8004220:	463a      	mov	r2, r7
 8004222:	4628      	mov	r0, r5
 8004224:	47b0      	blx	r6
 8004226:	2800      	cmp	r0, #0
 8004228:	dc08      	bgt.n	800423c <__sflush_r+0xfc>
 800422a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800422e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004232:	81a3      	strh	r3, [r4, #12]
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423c:	4407      	add	r7, r0
 800423e:	eba8 0800 	sub.w	r8, r8, r0
 8004242:	e7e7      	b.n	8004214 <__sflush_r+0xd4>
 8004244:	dfbffffe 	.word	0xdfbffffe

08004248 <_fflush_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	690b      	ldr	r3, [r1, #16]
 800424c:	4605      	mov	r5, r0
 800424e:	460c      	mov	r4, r1
 8004250:	b913      	cbnz	r3, 8004258 <_fflush_r+0x10>
 8004252:	2500      	movs	r5, #0
 8004254:	4628      	mov	r0, r5
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	b118      	cbz	r0, 8004262 <_fflush_r+0x1a>
 800425a:	6a03      	ldr	r3, [r0, #32]
 800425c:	b90b      	cbnz	r3, 8004262 <_fflush_r+0x1a>
 800425e:	f7ff fa97 	bl	8003790 <__sinit>
 8004262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0f3      	beq.n	8004252 <_fflush_r+0xa>
 800426a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800426c:	07d0      	lsls	r0, r2, #31
 800426e:	d404      	bmi.n	800427a <_fflush_r+0x32>
 8004270:	0599      	lsls	r1, r3, #22
 8004272:	d402      	bmi.n	800427a <_fflush_r+0x32>
 8004274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004276:	f7ff fb98 	bl	80039aa <__retarget_lock_acquire_recursive>
 800427a:	4628      	mov	r0, r5
 800427c:	4621      	mov	r1, r4
 800427e:	f7ff ff5f 	bl	8004140 <__sflush_r>
 8004282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004284:	07da      	lsls	r2, r3, #31
 8004286:	4605      	mov	r5, r0
 8004288:	d4e4      	bmi.n	8004254 <_fflush_r+0xc>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	059b      	lsls	r3, r3, #22
 800428e:	d4e1      	bmi.n	8004254 <_fflush_r+0xc>
 8004290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004292:	f7ff fb8b 	bl	80039ac <__retarget_lock_release_recursive>
 8004296:	e7dd      	b.n	8004254 <_fflush_r+0xc>

08004298 <_putc_r>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	460d      	mov	r5, r1
 800429c:	4614      	mov	r4, r2
 800429e:	4606      	mov	r6, r0
 80042a0:	b118      	cbz	r0, 80042aa <_putc_r+0x12>
 80042a2:	6a03      	ldr	r3, [r0, #32]
 80042a4:	b90b      	cbnz	r3, 80042aa <_putc_r+0x12>
 80042a6:	f7ff fa73 	bl	8003790 <__sinit>
 80042aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ac:	07d8      	lsls	r0, r3, #31
 80042ae:	d405      	bmi.n	80042bc <_putc_r+0x24>
 80042b0:	89a3      	ldrh	r3, [r4, #12]
 80042b2:	0599      	lsls	r1, r3, #22
 80042b4:	d402      	bmi.n	80042bc <_putc_r+0x24>
 80042b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042b8:	f7ff fb77 	bl	80039aa <__retarget_lock_acquire_recursive>
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	3b01      	subs	r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	60a3      	str	r3, [r4, #8]
 80042c4:	da05      	bge.n	80042d2 <_putc_r+0x3a>
 80042c6:	69a2      	ldr	r2, [r4, #24]
 80042c8:	4293      	cmp	r3, r2
 80042ca:	db12      	blt.n	80042f2 <_putc_r+0x5a>
 80042cc:	b2eb      	uxtb	r3, r5
 80042ce:	2b0a      	cmp	r3, #10
 80042d0:	d00f      	beq.n	80042f2 <_putc_r+0x5a>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	6022      	str	r2, [r4, #0]
 80042d8:	701d      	strb	r5, [r3, #0]
 80042da:	b2ed      	uxtb	r5, r5
 80042dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042de:	07da      	lsls	r2, r3, #31
 80042e0:	d405      	bmi.n	80042ee <_putc_r+0x56>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	059b      	lsls	r3, r3, #22
 80042e6:	d402      	bmi.n	80042ee <_putc_r+0x56>
 80042e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ea:	f7ff fb5f 	bl	80039ac <__retarget_lock_release_recursive>
 80042ee:	4628      	mov	r0, r5
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	4629      	mov	r1, r5
 80042f4:	4622      	mov	r2, r4
 80042f6:	4630      	mov	r0, r6
 80042f8:	f000 f802 	bl	8004300 <__swbuf_r>
 80042fc:	4605      	mov	r5, r0
 80042fe:	e7ed      	b.n	80042dc <_putc_r+0x44>

08004300 <__swbuf_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	460e      	mov	r6, r1
 8004304:	4614      	mov	r4, r2
 8004306:	4605      	mov	r5, r0
 8004308:	b118      	cbz	r0, 8004312 <__swbuf_r+0x12>
 800430a:	6a03      	ldr	r3, [r0, #32]
 800430c:	b90b      	cbnz	r3, 8004312 <__swbuf_r+0x12>
 800430e:	f7ff fa3f 	bl	8003790 <__sinit>
 8004312:	69a3      	ldr	r3, [r4, #24]
 8004314:	60a3      	str	r3, [r4, #8]
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	071a      	lsls	r2, r3, #28
 800431a:	d501      	bpl.n	8004320 <__swbuf_r+0x20>
 800431c:	6923      	ldr	r3, [r4, #16]
 800431e:	b943      	cbnz	r3, 8004332 <__swbuf_r+0x32>
 8004320:	4621      	mov	r1, r4
 8004322:	4628      	mov	r0, r5
 8004324:	f000 f82a 	bl	800437c <__swsetup_r>
 8004328:	b118      	cbz	r0, 8004332 <__swbuf_r+0x32>
 800432a:	f04f 37ff 	mov.w	r7, #4294967295
 800432e:	4638      	mov	r0, r7
 8004330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	1a98      	subs	r0, r3, r2
 8004338:	6963      	ldr	r3, [r4, #20]
 800433a:	b2f6      	uxtb	r6, r6
 800433c:	4283      	cmp	r3, r0
 800433e:	4637      	mov	r7, r6
 8004340:	dc05      	bgt.n	800434e <__swbuf_r+0x4e>
 8004342:	4621      	mov	r1, r4
 8004344:	4628      	mov	r0, r5
 8004346:	f7ff ff7f 	bl	8004248 <_fflush_r>
 800434a:	2800      	cmp	r0, #0
 800434c:	d1ed      	bne.n	800432a <__swbuf_r+0x2a>
 800434e:	68a3      	ldr	r3, [r4, #8]
 8004350:	3b01      	subs	r3, #1
 8004352:	60a3      	str	r3, [r4, #8]
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	6022      	str	r2, [r4, #0]
 800435a:	701e      	strb	r6, [r3, #0]
 800435c:	6962      	ldr	r2, [r4, #20]
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	429a      	cmp	r2, r3
 8004362:	d004      	beq.n	800436e <__swbuf_r+0x6e>
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	07db      	lsls	r3, r3, #31
 8004368:	d5e1      	bpl.n	800432e <__swbuf_r+0x2e>
 800436a:	2e0a      	cmp	r6, #10
 800436c:	d1df      	bne.n	800432e <__swbuf_r+0x2e>
 800436e:	4621      	mov	r1, r4
 8004370:	4628      	mov	r0, r5
 8004372:	f7ff ff69 	bl	8004248 <_fflush_r>
 8004376:	2800      	cmp	r0, #0
 8004378:	d0d9      	beq.n	800432e <__swbuf_r+0x2e>
 800437a:	e7d6      	b.n	800432a <__swbuf_r+0x2a>

0800437c <__swsetup_r>:
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <__swsetup_r+0xa8>)
 8004380:	4605      	mov	r5, r0
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	460c      	mov	r4, r1
 8004386:	b118      	cbz	r0, 8004390 <__swsetup_r+0x14>
 8004388:	6a03      	ldr	r3, [r0, #32]
 800438a:	b90b      	cbnz	r3, 8004390 <__swsetup_r+0x14>
 800438c:	f7ff fa00 	bl	8003790 <__sinit>
 8004390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004394:	0719      	lsls	r1, r3, #28
 8004396:	d422      	bmi.n	80043de <__swsetup_r+0x62>
 8004398:	06da      	lsls	r2, r3, #27
 800439a:	d407      	bmi.n	80043ac <__swsetup_r+0x30>
 800439c:	2209      	movs	r2, #9
 800439e:	602a      	str	r2, [r5, #0]
 80043a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	f04f 30ff 	mov.w	r0, #4294967295
 80043aa:	e033      	b.n	8004414 <__swsetup_r+0x98>
 80043ac:	0758      	lsls	r0, r3, #29
 80043ae:	d512      	bpl.n	80043d6 <__swsetup_r+0x5a>
 80043b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043b2:	b141      	cbz	r1, 80043c6 <__swsetup_r+0x4a>
 80043b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043b8:	4299      	cmp	r1, r3
 80043ba:	d002      	beq.n	80043c2 <__swsetup_r+0x46>
 80043bc:	4628      	mov	r0, r5
 80043be:	f7ff faf7 	bl	80039b0 <_free_r>
 80043c2:	2300      	movs	r3, #0
 80043c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80043c6:	89a3      	ldrh	r3, [r4, #12]
 80043c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	2300      	movs	r3, #0
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	f043 0308 	orr.w	r3, r3, #8
 80043dc:	81a3      	strh	r3, [r4, #12]
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	b94b      	cbnz	r3, 80043f6 <__swsetup_r+0x7a>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ec:	d003      	beq.n	80043f6 <__swsetup_r+0x7a>
 80043ee:	4621      	mov	r1, r4
 80043f0:	4628      	mov	r0, r5
 80043f2:	f000 f84f 	bl	8004494 <__smakebuf_r>
 80043f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043fa:	f013 0201 	ands.w	r2, r3, #1
 80043fe:	d00a      	beq.n	8004416 <__swsetup_r+0x9a>
 8004400:	2200      	movs	r2, #0
 8004402:	60a2      	str	r2, [r4, #8]
 8004404:	6962      	ldr	r2, [r4, #20]
 8004406:	4252      	negs	r2, r2
 8004408:	61a2      	str	r2, [r4, #24]
 800440a:	6922      	ldr	r2, [r4, #16]
 800440c:	b942      	cbnz	r2, 8004420 <__swsetup_r+0xa4>
 800440e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004412:	d1c5      	bne.n	80043a0 <__swsetup_r+0x24>
 8004414:	bd38      	pop	{r3, r4, r5, pc}
 8004416:	0799      	lsls	r1, r3, #30
 8004418:	bf58      	it	pl
 800441a:	6962      	ldrpl	r2, [r4, #20]
 800441c:	60a2      	str	r2, [r4, #8]
 800441e:	e7f4      	b.n	800440a <__swsetup_r+0x8e>
 8004420:	2000      	movs	r0, #0
 8004422:	e7f7      	b.n	8004414 <__swsetup_r+0x98>
 8004424:	20000018 	.word	0x20000018

08004428 <_sbrk_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d06      	ldr	r5, [pc, #24]	@ (8004444 <_sbrk_r+0x1c>)
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc fcb4 	bl	8000da0 <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_sbrk_r+0x1a>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_sbrk_r+0x1a>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	20000270 	.word	0x20000270

08004448 <__swhatbuf_r>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	460c      	mov	r4, r1
 800444c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004450:	2900      	cmp	r1, #0
 8004452:	b096      	sub	sp, #88	@ 0x58
 8004454:	4615      	mov	r5, r2
 8004456:	461e      	mov	r6, r3
 8004458:	da0d      	bge.n	8004476 <__swhatbuf_r+0x2e>
 800445a:	89a3      	ldrh	r3, [r4, #12]
 800445c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004460:	f04f 0100 	mov.w	r1, #0
 8004464:	bf14      	ite	ne
 8004466:	2340      	movne	r3, #64	@ 0x40
 8004468:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800446c:	2000      	movs	r0, #0
 800446e:	6031      	str	r1, [r6, #0]
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	b016      	add	sp, #88	@ 0x58
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	466a      	mov	r2, sp
 8004478:	f000 f848 	bl	800450c <_fstat_r>
 800447c:	2800      	cmp	r0, #0
 800447e:	dbec      	blt.n	800445a <__swhatbuf_r+0x12>
 8004480:	9901      	ldr	r1, [sp, #4]
 8004482:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004486:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800448a:	4259      	negs	r1, r3
 800448c:	4159      	adcs	r1, r3
 800448e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004492:	e7eb      	b.n	800446c <__swhatbuf_r+0x24>

08004494 <__smakebuf_r>:
 8004494:	898b      	ldrh	r3, [r1, #12]
 8004496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004498:	079d      	lsls	r5, r3, #30
 800449a:	4606      	mov	r6, r0
 800449c:	460c      	mov	r4, r1
 800449e:	d507      	bpl.n	80044b0 <__smakebuf_r+0x1c>
 80044a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	2301      	movs	r3, #1
 80044aa:	6163      	str	r3, [r4, #20]
 80044ac:	b003      	add	sp, #12
 80044ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b0:	ab01      	add	r3, sp, #4
 80044b2:	466a      	mov	r2, sp
 80044b4:	f7ff ffc8 	bl	8004448 <__swhatbuf_r>
 80044b8:	9f00      	ldr	r7, [sp, #0]
 80044ba:	4605      	mov	r5, r0
 80044bc:	4639      	mov	r1, r7
 80044be:	4630      	mov	r0, r6
 80044c0:	f7ff fae2 	bl	8003a88 <_malloc_r>
 80044c4:	b948      	cbnz	r0, 80044da <__smakebuf_r+0x46>
 80044c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ca:	059a      	lsls	r2, r3, #22
 80044cc:	d4ee      	bmi.n	80044ac <__smakebuf_r+0x18>
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	e7e2      	b.n	80044a0 <__smakebuf_r+0xc>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	6020      	str	r0, [r4, #0]
 80044de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	9b01      	ldr	r3, [sp, #4]
 80044e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044ea:	b15b      	cbz	r3, 8004504 <__smakebuf_r+0x70>
 80044ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 f81d 	bl	8004530 <_isatty_r>
 80044f6:	b128      	cbz	r0, 8004504 <__smakebuf_r+0x70>
 80044f8:	89a3      	ldrh	r3, [r4, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	431d      	orrs	r5, r3
 8004508:	81a5      	strh	r5, [r4, #12]
 800450a:	e7cf      	b.n	80044ac <__smakebuf_r+0x18>

0800450c <_fstat_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4d07      	ldr	r5, [pc, #28]	@ (800452c <_fstat_r+0x20>)
 8004510:	2300      	movs	r3, #0
 8004512:	4604      	mov	r4, r0
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	602b      	str	r3, [r5, #0]
 800451a:	f7fc fc18 	bl	8000d4e <_fstat>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d102      	bne.n	8004528 <_fstat_r+0x1c>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	b103      	cbz	r3, 8004528 <_fstat_r+0x1c>
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	bd38      	pop	{r3, r4, r5, pc}
 800452a:	bf00      	nop
 800452c:	20000270 	.word	0x20000270

08004530 <_isatty_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4d06      	ldr	r5, [pc, #24]	@ (800454c <_isatty_r+0x1c>)
 8004534:	2300      	movs	r3, #0
 8004536:	4604      	mov	r4, r0
 8004538:	4608      	mov	r0, r1
 800453a:	602b      	str	r3, [r5, #0]
 800453c:	f7fc fc17 	bl	8000d6e <_isatty>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d102      	bne.n	800454a <_isatty_r+0x1a>
 8004544:	682b      	ldr	r3, [r5, #0]
 8004546:	b103      	cbz	r3, 800454a <_isatty_r+0x1a>
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	bd38      	pop	{r3, r4, r5, pc}
 800454c:	20000270 	.word	0x20000270

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
