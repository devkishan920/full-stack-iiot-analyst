
03.1.1_USART_Tx_Characters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080023a4  080023a4  000033a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023bc  080023bc  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  080023bc  080023bc  000033bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023c4  080023c4  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023c4  080023c4  000033c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023c8  080023c8  000033c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080023cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000018  080023e4  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080023e4  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bbb  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000148d  00000000  00000000  0000bc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201a5  00000000  00000000  0000dc41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c8c  00000000  00000000  0002dde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c48a4  00000000  00000000  00036a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb316  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a24  00000000  00000000  000fb35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000fcd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800238c 	.word	0x0800238c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	0800238c 	.word	0x0800238c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

uint8_t tx_buf[10] = "Hello 1\n";
//uint8_t tx_buf[] = "Hello World\n";

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  HAL_Init();
 80004f8:	f000 f9fe 	bl	80008f8 <HAL_Init>
  SystemClock_Config();
 80004fc:	f000 f814 	bl	8000528 <SystemClock_Config>
  MX_GPIO_Init();
 8000500:	f000 f8aa 	bl	8000658 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f87e 	bl	8000604 <MX_USART2_UART_Init>

  while (1)
  {
	  // Sending Data in Blocking Mode
	  HAL_UART_Transmit(&huart2, tx_buf, 12, 10); // Single variable can't be directly passed for transmission. Either a buffer or address of single variable can only be passed for transmission. And timeout is set to (10) msec.
 8000508:	230a      	movs	r3, #10
 800050a:	220c      	movs	r2, #12
 800050c:	4904      	ldr	r1, [pc, #16]	@ (8000520 <main+0x2c>)
 800050e:	4805      	ldr	r0, [pc, #20]	@ (8000524 <main+0x30>)
 8000510:	f001 fb54 	bl	8001bbc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000518:	f000 fa60 	bl	80009dc <HAL_Delay>
	  HAL_UART_Transmit(&huart2, tx_buf, 12, 10); // Single variable can't be directly passed for transmission. Either a buffer or address of single variable can only be passed for transmission. And timeout is set to (10) msec.
 800051c:	bf00      	nop
 800051e:	e7f3      	b.n	8000508 <main+0x14>
 8000520:	20000000 	.word	0x20000000
 8000524:	20000034 	.word	0x20000034

08000528 <SystemClock_Config>:
/**
  * @brief Syste2m Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	@ 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2234      	movs	r2, #52	@ 0x34
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fefc 	bl	8002334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b2a      	ldr	r3, [pc, #168]	@ (80005fc <SystemClock_Config+0xd4>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000554:	4a29      	ldr	r2, [pc, #164]	@ (80005fc <SystemClock_Config+0xd4>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	@ 0x40
 800055c:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <SystemClock_Config+0xd4>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <SystemClock_Config+0xd8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000574:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <SystemClock_Config+0xd8>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <SystemClock_Config+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800059c:	2310      	movs	r3, #16
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f812 	bl	80015e0 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005c2:	f000 f8b7 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fcb2 	bl	8000f4c <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ee:	f000 f8a1 	bl	8000734 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	@ 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800060a:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <MX_USART2_UART_Init+0x50>)
 800060c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060e:	4b10      	ldr	r3, [pc, #64]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800062a:	220c      	movs	r2, #12
 800062c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000634:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_USART2_UART_Init+0x4c>)
 800063c:	f001 fa6e 	bl	8001b1c <HAL_UART_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000646:	f000 f875 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000034 	.word	0x20000034
 8000654:	40004400 	.word	0x40004400

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a2c      	ldr	r2, [pc, #176]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a25      	ldr	r2, [pc, #148]	@ (8000728 <MX_GPIO_Init+0xd0>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b23      	ldr	r3, [pc, #140]	@ (8000728 <MX_GPIO_Init+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	4812      	ldr	r0, [pc, #72]	@ (800072c <MX_GPIO_Init+0xd4>)
 80006e4:	f000 fc18 	bl	8000f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	4619      	mov	r1, r3
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_GPIO_Init+0xd8>)
 8000700:	f000 fa76 	bl	8000bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000704:	2320      	movs	r3, #32
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_GPIO_Init+0xd4>)
 800071c:	f000 fa68 	bl	8000bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	40020800 	.word	0x40020800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	@ (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6453      	str	r3, [r2, #68]	@ 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	@ (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800077e:	2007      	movs	r0, #7
 8000780:	f000 fa02 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a19      	ldr	r2, [pc, #100]	@ (8000814 <HAL_UART_MspInit+0x84>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d12b      	bne.n	800080a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <HAL_UART_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <HAL_UART_MspInit+0x88>)
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_UART_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <HAL_UART_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a10      	ldr	r2, [pc, #64]	@ (8000818 <HAL_UART_MspInit+0x88>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_UART_MspInit+0x88>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ea:	230c      	movs	r3, #12
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fa:	2307      	movs	r3, #7
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <HAL_UART_MspInit+0x8c>)
 8000806:	f000 f9f3 	bl	8000bf0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800080a:	bf00      	nop
 800080c:	3728      	adds	r7, #40	@ 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <NMI_Handler+0x4>

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <UsageFault_Handler+0x4>

08000848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000876:	f000 f891 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <SystemInit+0x20>)
 8000886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088a:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <SystemInit+0x20>)
 800088c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a8:	f7ff ffea 	bl	8000880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ae:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b4:	e002      	b.n	80008bc <LoopCopyDataInit>

080008b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ba:	3304      	adds	r3, #4

080008bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c0:	d3f9      	bcc.n	80008b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	@ (80008ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c4:	4c0a      	ldr	r4, [pc, #40]	@ (80008f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c8:	e001      	b.n	80008ce <LoopFillZerobss>

080008ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008cc:	3204      	adds	r2, #4

080008ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d0:	d3fb      	bcc.n	80008ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008d2:	f001 fd37 	bl	8002344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d6:	f7ff fe0d 	bl	80004f4 <main>
  bx  lr    
 80008da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80008e8:	080023cc 	.word	0x080023cc
  ldr r2, =_sbss
 80008ec:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80008f0:	20000080 	.word	0x20000080

080008f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC_IRQHandler>
	...

080008f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <HAL_Init+0x40>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <HAL_Init+0x40>)
 8000902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_Init+0x40>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000914:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a07      	ldr	r2, [pc, #28]	@ (8000938 <HAL_Init+0x40>)
 800091a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f931 	bl	8000b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f808 	bl	800093c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800092c:	f7ff ff08 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000930:	2300      	movs	r3, #0
}
 8000932:	4618      	mov	r0, r3
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023c00 	.word	0x40023c00

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x54>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <HAL_InitTick+0x58>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000952:	fbb3 f3f1 	udiv	r3, r3, r1
 8000956:	fbb2 f3f3 	udiv	r3, r2, r3
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f93b 	bl	8000bd6 <HAL_SYSTICK_Config>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e00e      	b.n	8000988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b0f      	cmp	r3, #15
 800096e:	d80a      	bhi.n	8000986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000970:	2200      	movs	r2, #0
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f000 f911 	bl	8000b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800097c:	4a06      	ldr	r2, [pc, #24]	@ (8000998 <HAL_InitTick+0x5c>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20000014 	.word	0x20000014
 8000998:	20000010 	.word	0x20000010

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	@ (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000014 	.word	0x20000014
 80009c0:	2000007c 	.word	0x2000007c

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000007c 	.word	0x2000007c

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000014 	.word	0x20000014

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	@ (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	@ (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	@ 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	@ 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b54:	d301      	bcc.n	8000b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00f      	b.n	8000b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <SysTick_Config+0x40>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b62:	210f      	movs	r1, #15
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f7ff ff8e 	bl	8000a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <SysTick_Config+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b72:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SysTick_Config+0x40>)
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	e000e010 	.word	0xe000e010

08000b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff47 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb0:	f7ff ff5c 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	6978      	ldr	r0, [r7, #20]
 8000bbc:	f7ff ff8e 	bl	8000adc <NVIC_EncodePriority>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff5d 	bl	8000a88 <__NVIC_SetPriority>
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffb0 	bl	8000b44 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e165      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f040 8154 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d005      	beq.n	8000c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d130      	bne.n	8000ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4013      	ands	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	091b      	lsrs	r3, r3, #4
 8000c8e:	f003 0201 	and.w	r2, r3, #1
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d017      	beq.n	8000ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d123      	bne.n	8000d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	69b9      	ldr	r1, [r7, #24]
 8000d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0203 	and.w	r2, r3, #3
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80ae 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ef0 <HAL_GPIO_Init+0x300>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8000ef0 <HAL_GPIO_Init+0x300>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef0 <HAL_GPIO_Init+0x300>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d92:	4a58      	ldr	r2, [pc, #352]	@ (8000ef4 <HAL_GPIO_Init+0x304>)
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef8 <HAL_GPIO_Init+0x308>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d025      	beq.n	8000e0a <HAL_GPIO_Init+0x21a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8000efc <HAL_GPIO_Init+0x30c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01f      	beq.n	8000e06 <HAL_GPIO_Init+0x216>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f00 <HAL_GPIO_Init+0x310>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x212>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000f04 <HAL_GPIO_Init+0x314>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x20e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8000f08 <HAL_GPIO_Init+0x318>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x20a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4a      	ldr	r2, [pc, #296]	@ (8000f0c <HAL_GPIO_Init+0x31c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x206>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a49      	ldr	r2, [pc, #292]	@ (8000f10 <HAL_GPIO_Init+0x320>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x202>
 8000dee:	2306      	movs	r3, #6
 8000df0:	e00c      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000df2:	2307      	movs	r3, #7
 8000df4:	e00a      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000df6:	2305      	movs	r3, #5
 8000df8:	e008      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e004      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000e02:	2302      	movs	r3, #2
 8000e04:	e002      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000e06:	2301      	movs	r3, #1
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x21c>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	69fa      	ldr	r2, [r7, #28]
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	0092      	lsls	r2, r2, #2
 8000e14:	4093      	lsls	r3, r2
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e1c:	4935      	ldr	r1, [pc, #212]	@ (8000ef4 <HAL_GPIO_Init+0x304>)
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	089b      	lsrs	r3, r3, #2
 8000e22:	3302      	adds	r3, #2
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e4e:	4a31      	ldr	r2, [pc, #196]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e54:	4b2f      	ldr	r3, [pc, #188]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e78:	4a26      	ldr	r2, [pc, #152]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ecc:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <HAL_GPIO_Init+0x324>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	2b0f      	cmp	r3, #15
 8000edc:	f67f ae96 	bls.w	8000c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40021400 	.word	0x40021400
 8000f10:	40021800 	.word	0x40021800
 8000f14:	40013c00 	.word	0x40013c00

08000f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
 8000f24:	4613      	mov	r3, r2
 8000f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f2e:	887a      	ldrh	r2, [r7, #2]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f34:	e003      	b.n	8000f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	041a      	lsls	r2, r3, #16
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e0cc      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f60:	4b68      	ldr	r3, [pc, #416]	@ (8001104 <HAL_RCC_ClockConfig+0x1b8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d90c      	bls.n	8000f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f6e:	4b65      	ldr	r3, [pc, #404]	@ (8001104 <HAL_RCC_ClockConfig+0x1b8>)
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f76:	4b63      	ldr	r3, [pc, #396]	@ (8001104 <HAL_RCC_ClockConfig+0x1b8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d001      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0b8      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d020      	beq.n	8000fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fa0:	4b59      	ldr	r3, [pc, #356]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4a58      	ldr	r2, [pc, #352]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fb8:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fc4:	4b50      	ldr	r3, [pc, #320]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	494d      	ldr	r1, [pc, #308]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d044      	beq.n	800106c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d107      	bne.n	8000ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	4b47      	ldr	r3, [pc, #284]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d119      	bne.n	800102a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e07f      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d003      	beq.n	800100a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001006:	2b03      	cmp	r3, #3
 8001008:	d107      	bne.n	800101a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800100a:	4b3f      	ldr	r3, [pc, #252]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e06f      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e067      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800102a:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f023 0203 	bic.w	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	4934      	ldr	r1, [pc, #208]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 8001038:	4313      	orrs	r3, r2
 800103a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800103c:	f7ff fcc2 	bl	80009c4 <HAL_GetTick>
 8001040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001042:	e00a      	b.n	800105a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001044:	f7ff fcbe 	bl	80009c4 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001052:	4293      	cmp	r3, r2
 8001054:	d901      	bls.n	800105a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e04f      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800105a:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 020c 	and.w	r2, r3, #12
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	429a      	cmp	r2, r3
 800106a:	d1eb      	bne.n	8001044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <HAL_RCC_ClockConfig+0x1b8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d20c      	bcs.n	8001094 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_RCC_ClockConfig+0x1b8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e032      	b.n	80010fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010a0:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4916      	ldr	r1, [pc, #88]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d009      	beq.n	80010d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	490e      	ldr	r1, [pc, #56]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010d2:	f000 f855 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 80010d6:	4602      	mov	r2, r0
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	490a      	ldr	r1, [pc, #40]	@ (800110c <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	5ccb      	ldrb	r3, [r1, r3]
 80010e6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ea:	4a09      	ldr	r2, [pc, #36]	@ (8001110 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_RCC_ClockConfig+0x1c8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fc22 	bl	800093c <HAL_InitTick>

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00
 8001108:	40023800 	.word	0x40023800
 800110c:	080023a4 	.word	0x080023a4
 8001110:	2000000c 	.word	0x2000000c
 8001114:	20000010 	.word	0x20000010

08001118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <HAL_RCC_GetHCLKFreq+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	2000000c 	.word	0x2000000c

08001130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001134:	f7ff fff0 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 8001138:	4602      	mov	r2, r0
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	0a9b      	lsrs	r3, r3, #10
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	4903      	ldr	r1, [pc, #12]	@ (8001154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001146:	5ccb      	ldrb	r3, [r1, r3]
 8001148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40023800 	.word	0x40023800
 8001154:	080023b4 	.word	0x080023b4

08001158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800115c:	f7ff ffdc 	bl	8001118 <HAL_RCC_GetHCLKFreq>
 8001160:	4602      	mov	r2, r0
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	0b5b      	lsrs	r3, r3, #13
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	4903      	ldr	r1, [pc, #12]	@ (800117c <HAL_RCC_GetPCLK2Freq+0x24>)
 800116e:	5ccb      	ldrb	r3, [r1, r3]
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800
 800117c:	080023b4 	.word	0x080023b4

08001180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001184:	b0ae      	sub	sp, #184	@ 0xb8
 8001186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011a6:	4bcb      	ldr	r3, [pc, #812]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b0c      	cmp	r3, #12
 80011b0:	f200 8206 	bhi.w	80015c0 <HAL_RCC_GetSysClockFreq+0x440>
 80011b4:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011f1 	.word	0x080011f1
 80011c0:	080015c1 	.word	0x080015c1
 80011c4:	080015c1 	.word	0x080015c1
 80011c8:	080015c1 	.word	0x080015c1
 80011cc:	080011f9 	.word	0x080011f9
 80011d0:	080015c1 	.word	0x080015c1
 80011d4:	080015c1 	.word	0x080015c1
 80011d8:	080015c1 	.word	0x080015c1
 80011dc:	08001201 	.word	0x08001201
 80011e0:	080015c1 	.word	0x080015c1
 80011e4:	080015c1 	.word	0x080015c1
 80011e8:	080015c1 	.word	0x080015c1
 80011ec:	080013f1 	.word	0x080013f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011f0:	4bb9      	ldr	r3, [pc, #740]	@ (80014d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80011f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80011f6:	e1e7      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011f8:	4bb8      	ldr	r3, [pc, #736]	@ (80014dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80011fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80011fe:	e1e3      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001200:	4bb4      	ldr	r3, [pc, #720]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800120c:	4bb1      	ldr	r3, [pc, #708]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d071      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001218:	4bae      	ldr	r3, [pc, #696]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	099b      	lsrs	r3, r3, #6
 800121e:	2200      	movs	r2, #0
 8001220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001224:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800122c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800123a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800123e:	4622      	mov	r2, r4
 8001240:	462b      	mov	r3, r5
 8001242:	f04f 0000 	mov.w	r0, #0
 8001246:	f04f 0100 	mov.w	r1, #0
 800124a:	0159      	lsls	r1, r3, #5
 800124c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001250:	0150      	lsls	r0, r2, #5
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4621      	mov	r1, r4
 8001258:	1a51      	subs	r1, r2, r1
 800125a:	6439      	str	r1, [r7, #64]	@ 0x40
 800125c:	4629      	mov	r1, r5
 800125e:	eb63 0301 	sbc.w	r3, r3, r1
 8001262:	647b      	str	r3, [r7, #68]	@ 0x44
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001270:	4649      	mov	r1, r9
 8001272:	018b      	lsls	r3, r1, #6
 8001274:	4641      	mov	r1, r8
 8001276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800127a:	4641      	mov	r1, r8
 800127c:	018a      	lsls	r2, r1, #6
 800127e:	4641      	mov	r1, r8
 8001280:	1a51      	subs	r1, r2, r1
 8001282:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001284:	4649      	mov	r1, r9
 8001286:	eb63 0301 	sbc.w	r3, r3, r1
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001298:	4649      	mov	r1, r9
 800129a:	00cb      	lsls	r3, r1, #3
 800129c:	4641      	mov	r1, r8
 800129e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012a2:	4641      	mov	r1, r8
 80012a4:	00ca      	lsls	r2, r1, #3
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	4622      	mov	r2, r4
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80012b2:	462b      	mov	r3, r5
 80012b4:	460a      	mov	r2, r1
 80012b6:	eb42 0303 	adc.w	r3, r2, r3
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80012c8:	4629      	mov	r1, r5
 80012ca:	024b      	lsls	r3, r1, #9
 80012cc:	4621      	mov	r1, r4
 80012ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012d2:	4621      	mov	r1, r4
 80012d4:	024a      	lsls	r2, r1, #9
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012de:	2200      	movs	r2, #0
 80012e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80012e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80012e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80012ec:	f7fe ff8a 	bl	8000204 <__aeabi_uldivmod>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4613      	mov	r3, r2
 80012f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012fa:	e067      	b.n	80013cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012fc:	4b75      	ldr	r3, [pc, #468]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	2200      	movs	r2, #0
 8001304:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001308:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800130c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001314:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001316:	2300      	movs	r3, #0
 8001318:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800131a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800131e:	4622      	mov	r2, r4
 8001320:	462b      	mov	r3, r5
 8001322:	f04f 0000 	mov.w	r0, #0
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	0159      	lsls	r1, r3, #5
 800132c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001330:	0150      	lsls	r0, r2, #5
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4621      	mov	r1, r4
 8001338:	1a51      	subs	r1, r2, r1
 800133a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800133c:	4629      	mov	r1, r5
 800133e:	eb63 0301 	sbc.w	r3, r3, r1
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001350:	4649      	mov	r1, r9
 8001352:	018b      	lsls	r3, r1, #6
 8001354:	4641      	mov	r1, r8
 8001356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800135a:	4641      	mov	r1, r8
 800135c:	018a      	lsls	r2, r1, #6
 800135e:	4641      	mov	r1, r8
 8001360:	ebb2 0a01 	subs.w	sl, r2, r1
 8001364:	4649      	mov	r1, r9
 8001366:	eb63 0b01 	sbc.w	fp, r3, r1
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001376:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800137a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800137e:	4692      	mov	sl, r2
 8001380:	469b      	mov	fp, r3
 8001382:	4623      	mov	r3, r4
 8001384:	eb1a 0303 	adds.w	r3, sl, r3
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	462b      	mov	r3, r5
 800138c:	eb4b 0303 	adc.w	r3, fp, r3
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800139e:	4629      	mov	r1, r5
 80013a0:	028b      	lsls	r3, r1, #10
 80013a2:	4621      	mov	r1, r4
 80013a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013a8:	4621      	mov	r1, r4
 80013aa:	028a      	lsls	r2, r1, #10
 80013ac:	4610      	mov	r0, r2
 80013ae:	4619      	mov	r1, r3
 80013b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013b4:	2200      	movs	r2, #0
 80013b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80013b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80013ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80013be:	f7fe ff21 	bl	8000204 <__aeabi_uldivmod>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4613      	mov	r3, r2
 80013c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80013cc:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	0c1b      	lsrs	r3, r3, #16
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	3301      	adds	r3, #1
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80013de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80013e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013ee:	e0eb      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013f0:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013fc:	4b35      	ldr	r3, [pc, #212]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d06b      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001408:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	2200      	movs	r2, #0
 8001410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001412:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800141a:	663b      	str	r3, [r7, #96]	@ 0x60
 800141c:	2300      	movs	r3, #0
 800141e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001420:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001424:	4622      	mov	r2, r4
 8001426:	462b      	mov	r3, r5
 8001428:	f04f 0000 	mov.w	r0, #0
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	0159      	lsls	r1, r3, #5
 8001432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001436:	0150      	lsls	r0, r2, #5
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4621      	mov	r1, r4
 800143e:	1a51      	subs	r1, r2, r1
 8001440:	61b9      	str	r1, [r7, #24]
 8001442:	4629      	mov	r1, r5
 8001444:	eb63 0301 	sbc.w	r3, r3, r1
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001456:	4659      	mov	r1, fp
 8001458:	018b      	lsls	r3, r1, #6
 800145a:	4651      	mov	r1, sl
 800145c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001460:	4651      	mov	r1, sl
 8001462:	018a      	lsls	r2, r1, #6
 8001464:	4651      	mov	r1, sl
 8001466:	ebb2 0801 	subs.w	r8, r2, r1
 800146a:	4659      	mov	r1, fp
 800146c:	eb63 0901 	sbc.w	r9, r3, r1
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800147c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001480:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001484:	4690      	mov	r8, r2
 8001486:	4699      	mov	r9, r3
 8001488:	4623      	mov	r3, r4
 800148a:	eb18 0303 	adds.w	r3, r8, r3
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	462b      	mov	r3, r5
 8001492:	eb49 0303 	adc.w	r3, r9, r3
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014a4:	4629      	mov	r1, r5
 80014a6:	024b      	lsls	r3, r1, #9
 80014a8:	4621      	mov	r1, r4
 80014aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014ae:	4621      	mov	r1, r4
 80014b0:	024a      	lsls	r2, r1, #9
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014ba:	2200      	movs	r2, #0
 80014bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80014c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014c4:	f7fe fe9e 	bl	8000204 <__aeabi_uldivmod>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4613      	mov	r3, r2
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014d2:	e065      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x420>
 80014d4:	40023800 	.word	0x40023800
 80014d8:	00f42400 	.word	0x00f42400
 80014dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e0:	4b3d      	ldr	r3, [pc, #244]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	2200      	movs	r2, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	4611      	mov	r1, r2
 80014ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80014f2:	2300      	movs	r3, #0
 80014f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80014f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80014fa:	4642      	mov	r2, r8
 80014fc:	464b      	mov	r3, r9
 80014fe:	f04f 0000 	mov.w	r0, #0
 8001502:	f04f 0100 	mov.w	r1, #0
 8001506:	0159      	lsls	r1, r3, #5
 8001508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800150c:	0150      	lsls	r0, r2, #5
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4641      	mov	r1, r8
 8001514:	1a51      	subs	r1, r2, r1
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	4649      	mov	r1, r9
 800151a:	eb63 0301 	sbc.w	r3, r3, r1
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800152c:	4659      	mov	r1, fp
 800152e:	018b      	lsls	r3, r1, #6
 8001530:	4651      	mov	r1, sl
 8001532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001536:	4651      	mov	r1, sl
 8001538:	018a      	lsls	r2, r1, #6
 800153a:	4651      	mov	r1, sl
 800153c:	1a54      	subs	r4, r2, r1
 800153e:	4659      	mov	r1, fp
 8001540:	eb63 0501 	sbc.w	r5, r3, r1
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	00eb      	lsls	r3, r5, #3
 800154e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001552:	00e2      	lsls	r2, r4, #3
 8001554:	4614      	mov	r4, r2
 8001556:	461d      	mov	r5, r3
 8001558:	4643      	mov	r3, r8
 800155a:	18e3      	adds	r3, r4, r3
 800155c:	603b      	str	r3, [r7, #0]
 800155e:	464b      	mov	r3, r9
 8001560:	eb45 0303 	adc.w	r3, r5, r3
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001572:	4629      	mov	r1, r5
 8001574:	028b      	lsls	r3, r1, #10
 8001576:	4621      	mov	r1, r4
 8001578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800157c:	4621      	mov	r1, r4
 800157e:	028a      	lsls	r2, r1, #10
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001588:	2200      	movs	r2, #0
 800158a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800158c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800158e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001592:	f7fe fe37 	bl	8000204 <__aeabi_uldivmod>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4613      	mov	r3, r2
 800159c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	0f1b      	lsrs	r3, r3, #28
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80015ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015be:	e003      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80015c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	37b8      	adds	r7, #184	@ 0xb8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	00f42400 	.word	0x00f42400

080015e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e28d      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8083 	beq.w	8001706 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001600:	4b94      	ldr	r3, [pc, #592]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d019      	beq.n	8001640 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800160c:	4b91      	ldr	r3, [pc, #580]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 030c 	and.w	r3, r3, #12
        || \
 8001614:	2b08      	cmp	r3, #8
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001618:	4b8e      	ldr	r3, [pc, #568]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001624:	d00c      	beq.n	8001640 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b8b      	ldr	r3, [pc, #556]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d112      	bne.n	8001658 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001632:	4b88      	ldr	r3, [pc, #544]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800163a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800163e:	d10b      	bne.n	8001658 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	4b84      	ldr	r3, [pc, #528]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d05b      	beq.n	8001704 <HAL_RCC_OscConfig+0x124>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d157      	bne.n	8001704 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e25a      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001660:	d106      	bne.n	8001670 <HAL_RCC_OscConfig+0x90>
 8001662:	4b7c      	ldr	r3, [pc, #496]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a7b      	ldr	r2, [pc, #492]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	e01d      	b.n	80016ac <HAL_RCC_OscConfig+0xcc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0xb4>
 800167a:	4b76      	ldr	r3, [pc, #472]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a75      	ldr	r2, [pc, #468]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b73      	ldr	r3, [pc, #460]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a72      	ldr	r2, [pc, #456]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0xcc>
 8001694:	4b6f      	ldr	r3, [pc, #444]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6e      	ldr	r2, [pc, #440]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800169a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a6b      	ldr	r2, [pc, #428]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f986 	bl	80009c4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f982 	bl	80009c4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e21f      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b61      	ldr	r3, [pc, #388]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0xdc>
 80016da:	e014      	b.n	8001706 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff f972 	bl	80009c4 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff f96e 	bl	80009c4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	@ 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e20b      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	4b57      	ldr	r3, [pc, #348]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x104>
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06f      	beq.n	80017f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001712:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d017      	beq.n	800174e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800171e:	4b4d      	ldr	r3, [pc, #308]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
        || \
 8001726:	2b08      	cmp	r3, #8
 8001728:	d105      	bne.n	8001736 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800172a:	4b4a      	ldr	r3, [pc, #296]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00b      	beq.n	800174e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d11c      	bne.n	800177c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d116      	bne.n	800177c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	4b41      	ldr	r3, [pc, #260]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x186>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e1d3      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b3b      	ldr	r3, [pc, #236]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4937      	ldr	r1, [pc, #220]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177a:	e03a      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <HAL_RCC_OscConfig+0x278>)
 8001786:	2201      	movs	r2, #1
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff f91b 	bl	80009c4 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff f917 	bl	80009c4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e1b4      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4925      	ldr	r1, [pc, #148]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e015      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c6:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x278>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f8fa 	bl	80009c4 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d4:	f7ff f8f6 	bl	80009c4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e193      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d016      	beq.n	8001834 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <HAL_RCC_OscConfig+0x27c>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff f8da 	bl	80009c4 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff f8d6 	bl	80009c4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e173      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 8001828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x234>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <HAL_RCC_OscConfig+0x27c>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183a:	f7ff f8c3 	bl	80009c4 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff f8bf 	bl	80009c4 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e15c      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
 8001854:	40023800 	.word	0x40023800
 8001858:	42470000 	.word	0x42470000
 800185c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b8a      	ldr	r3, [pc, #552]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8097 	beq.w	80019a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b83      	ldr	r3, [pc, #524]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	4a7e      	ldr	r2, [pc, #504]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	@ 0x40
 800189a:	4b7c      	ldr	r3, [pc, #496]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b79      	ldr	r3, [pc, #484]	@ (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d118      	bne.n	80018e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b76      	ldr	r3, [pc, #472]	@ (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a75      	ldr	r2, [pc, #468]	@ (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c2:	f7ff f87f 	bl	80009c4 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ca:	f7ff f87b 	bl	80009c4 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e118      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a90 <HAL_RCC_OscConfig+0x4b0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x31e>
 80018f0:	4b66      	ldr	r3, [pc, #408]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f4:	4a65      	ldr	r2, [pc, #404]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x358>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x340>
 8001906:	4b61      	ldr	r3, [pc, #388]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800190a:	4a60      	ldr	r2, [pc, #384]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70
 8001912:	4b5e      	ldr	r3, [pc, #376]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001916:	4a5d      	ldr	r2, [pc, #372]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6713      	str	r3, [r2, #112]	@ 0x70
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0x358>
 8001920:	4b5a      	ldr	r3, [pc, #360]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	4a59      	ldr	r2, [pc, #356]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001926:	f023 0301 	bic.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	@ 0x70
 800192c:	4b57      	ldr	r3, [pc, #348]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a56      	ldr	r2, [pc, #344]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001932:	f023 0304 	bic.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d015      	beq.n	800196c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7ff f840 	bl	80009c4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7ff f83c 	bl	80009c4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0d7      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0ee      	beq.n	8001948 <HAL_RCC_OscConfig+0x368>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f82a 	bl	80009c4 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f826 	bl	80009c4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0c1      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	4b40      	ldr	r3, [pc, #256]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1ee      	bne.n	8001974 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	4a3a      	ldr	r2, [pc, #232]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80ad 	beq.w	8001b0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019b2:	4b36      	ldr	r3, [pc, #216]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b08      	cmp	r3, #8
 80019bc:	d060      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d145      	bne.n	8001a52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b33      	ldr	r3, [pc, #204]	@ (8001a94 <HAL_RCC_OscConfig+0x4b4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7fe fffa 	bl	80009c4 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7fe fff6 	bl	80009c4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e093      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	019b      	lsls	r3, r3, #6
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	041b      	lsls	r3, r3, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	071b      	lsls	r3, r3, #28
 8001a1e:	491b      	ldr	r1, [pc, #108]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <HAL_RCC_OscConfig+0x4b4>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7fe ffcb 	bl	80009c4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7fe ffc7 	bl	80009c4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e064      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x452>
 8001a50:	e05c      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_RCC_OscConfig+0x4b4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7fe ffb4 	bl	80009c4 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7fe ffb0 	bl	80009c4 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e04d      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x480>
 8001a7e:	e045      	b.n	8001b0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e040      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000
 8001a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a98:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <HAL_RCC_OscConfig+0x538>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d030      	beq.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d129      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d122      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ac8:	4013      	ands	r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d119      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ade:	085b      	lsrs	r3, r3, #1
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d10f      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e042      	b.n	8001bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe fe24 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2224      	movs	r2, #36	@ 0x24
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f973 	bl	8001e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695a      	ldr	r2, [r3, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d175      	bne.n	8001cc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_UART_Transmit+0x2c>
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e06e      	b.n	8001cca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2221      	movs	r2, #33	@ 0x21
 8001bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bfa:	f7fe fee3 	bl	80009c4 <HAL_GetTick>
 8001bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	88fa      	ldrh	r2, [r7, #6]
 8001c0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c14:	d108      	bne.n	8001c28 <HAL_UART_Transmit+0x6c>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d104      	bne.n	8001c28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	e003      	b.n	8001c30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c30:	e02e      	b.n	8001c90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f848 	bl	8001cd2 <UART_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e03a      	b.n	8001cca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10b      	bne.n	8001c72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	e007      	b.n	8001c82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1cb      	bne.n	8001c32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2140      	movs	r1, #64	@ 0x40
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f814 	bl	8001cd2 <UART_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e006      	b.n	8001cca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e000      	b.n	8001cca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001cc8:	2302      	movs	r3, #2
  }
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce2:	e03b      	b.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cea:	d037      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cec:	f7fe fe6a 	bl	80009c4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	6a3a      	ldr	r2, [r7, #32]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d302      	bcc.n	8001d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e03a      	b.n	8001d7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d023      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b80      	cmp	r3, #128	@ 0x80
 8001d18:	d020      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b40      	cmp	r3, #64	@ 0x40
 8001d1e:	d01d      	beq.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d116      	bne.n	8001d5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f81d 	bl	8001d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00f      	b.n	8001d7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	4013      	ands	r3, r2
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d0b4      	beq.n	8001ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b095      	sub	sp, #84	@ 0x54
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	330c      	adds	r3, #12
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d96:	e853 3f00 	ldrex	r3, [r3]
 8001d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	330c      	adds	r3, #12
 8001daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dac:	643a      	str	r2, [r7, #64]	@ 0x40
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001db4:	e841 2300 	strex	r3, r2, [r1]
 8001db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e5      	bne.n	8001d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3314      	adds	r3, #20
 8001dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	e853 3f00 	ldrex	r3, [r3]
 8001dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3314      	adds	r3, #20
 8001dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001de8:	e841 2300 	strex	r3, r2, [r1]
 8001dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1e5      	bne.n	8001dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d119      	bne.n	8001e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	330c      	adds	r3, #12
 8001e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	e853 3f00 	ldrex	r3, [r3]
 8001e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f023 0310 	bic.w	r3, r3, #16
 8001e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e1c:	61ba      	str	r2, [r7, #24]
 8001e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e20:	6979      	ldr	r1, [r7, #20]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	e841 2300 	strex	r3, r2, [r1]
 8001e28:	613b      	str	r3, [r7, #16]
   return(result);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1e5      	bne.n	8001dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e3e:	bf00      	nop
 8001e40:	3754      	adds	r7, #84	@ 0x54
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e50:	b0c0      	sub	sp, #256	@ 0x100
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e68:	68d9      	ldr	r1, [r3, #12]
 8001e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	ea40 0301 	orr.w	r3, r0, r1
 8001e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ea4:	f021 010c 	bic.w	r1, r1, #12
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001eb2:	430b      	orrs	r3, r1
 8001eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec6:	6999      	ldr	r1, [r3, #24]
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	ea40 0301 	orr.w	r3, r0, r1
 8001ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b8f      	ldr	r3, [pc, #572]	@ (8002118 <UART_SetConfig+0x2cc>)
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d005      	beq.n	8001eec <UART_SetConfig+0xa0>
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800211c <UART_SetConfig+0x2d0>)
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d104      	bne.n	8001ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001eec:	f7ff f934 	bl	8001158 <HAL_RCC_GetPCLK2Freq>
 8001ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ef4:	e003      	b.n	8001efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ef6:	f7ff f91b 	bl	8001130 <HAL_RCC_GetPCLK1Freq>
 8001efa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f08:	f040 810c 	bne.w	8002124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f10:	2200      	movs	r2, #0
 8001f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f1e:	4622      	mov	r2, r4
 8001f20:	462b      	mov	r3, r5
 8001f22:	1891      	adds	r1, r2, r2
 8001f24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f26:	415b      	adcs	r3, r3
 8001f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f2e:	4621      	mov	r1, r4
 8001f30:	eb12 0801 	adds.w	r8, r2, r1
 8001f34:	4629      	mov	r1, r5
 8001f36:	eb43 0901 	adc.w	r9, r3, r1
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4e:	4690      	mov	r8, r2
 8001f50:	4699      	mov	r9, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	eb18 0303 	adds.w	r3, r8, r3
 8001f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f5c:	462b      	mov	r3, r5
 8001f5e:	eb49 0303 	adc.w	r3, r9, r3
 8001f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	18db      	adds	r3, r3, r3
 8001f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f80:	4613      	mov	r3, r2
 8001f82:	eb42 0303 	adc.w	r3, r2, r3
 8001f86:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f90:	f7fe f938 	bl	8000204 <__aeabi_uldivmod>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4b61      	ldr	r3, [pc, #388]	@ (8002120 <UART_SetConfig+0x2d4>)
 8001f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	011c      	lsls	r4, r3, #4
 8001fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001fb4:	4642      	mov	r2, r8
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	1891      	adds	r1, r2, r2
 8001fba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fbc:	415b      	adcs	r3, r3
 8001fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fc4:	4641      	mov	r1, r8
 8001fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8001fca:	4649      	mov	r1, r9
 8001fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fe4:	4692      	mov	sl, r2
 8001fe6:	469b      	mov	fp, r3
 8001fe8:	4643      	mov	r3, r8
 8001fea:	eb1a 0303 	adds.w	r3, sl, r3
 8001fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ff2:	464b      	mov	r3, r9
 8001ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002008:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800200c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002010:	460b      	mov	r3, r1
 8002012:	18db      	adds	r3, r3, r3
 8002014:	643b      	str	r3, [r7, #64]	@ 0x40
 8002016:	4613      	mov	r3, r2
 8002018:	eb42 0303 	adc.w	r3, r2, r3
 800201c:	647b      	str	r3, [r7, #68]	@ 0x44
 800201e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002026:	f7fe f8ed 	bl	8000204 <__aeabi_uldivmod>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4611      	mov	r1, r2
 8002030:	4b3b      	ldr	r3, [pc, #236]	@ (8002120 <UART_SetConfig+0x2d4>)
 8002032:	fba3 2301 	umull	r2, r3, r3, r1
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2264      	movs	r2, #100	@ 0x64
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	1acb      	subs	r3, r1, r3
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002046:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <UART_SetConfig+0x2d4>)
 8002048:	fba3 2302 	umull	r2, r3, r3, r2
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002054:	441c      	add	r4, r3
 8002056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800205a:	2200      	movs	r2, #0
 800205c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002060:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002068:	4642      	mov	r2, r8
 800206a:	464b      	mov	r3, r9
 800206c:	1891      	adds	r1, r2, r2
 800206e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002070:	415b      	adcs	r3, r3
 8002072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002078:	4641      	mov	r1, r8
 800207a:	1851      	adds	r1, r2, r1
 800207c:	6339      	str	r1, [r7, #48]	@ 0x30
 800207e:	4649      	mov	r1, r9
 8002080:	414b      	adcs	r3, r1
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002090:	4659      	mov	r1, fp
 8002092:	00cb      	lsls	r3, r1, #3
 8002094:	4651      	mov	r1, sl
 8002096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800209a:	4651      	mov	r1, sl
 800209c:	00ca      	lsls	r2, r1, #3
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	4642      	mov	r2, r8
 80020a6:	189b      	adds	r3, r3, r2
 80020a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020ac:	464b      	mov	r3, r9
 80020ae:	460a      	mov	r2, r1
 80020b0:	eb42 0303 	adc.w	r3, r2, r3
 80020b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80020c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80020cc:	460b      	mov	r3, r1
 80020ce:	18db      	adds	r3, r3, r3
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020d2:	4613      	mov	r3, r2
 80020d4:	eb42 0303 	adc.w	r3, r2, r3
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80020e2:	f7fe f88f 	bl	8000204 <__aeabi_uldivmod>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <UART_SetConfig+0x2d4>)
 80020ec:	fba3 1302 	umull	r1, r3, r3, r2
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	2164      	movs	r1, #100	@ 0x64
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	3332      	adds	r3, #50	@ 0x32
 80020fe:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <UART_SetConfig+0x2d4>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	095b      	lsrs	r3, r3, #5
 8002106:	f003 0207 	and.w	r2, r3, #7
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4422      	add	r2, r4
 8002112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002114:	e106      	b.n	8002324 <UART_SetConfig+0x4d8>
 8002116:	bf00      	nop
 8002118:	40011000 	.word	0x40011000
 800211c:	40011400 	.word	0x40011400
 8002120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002128:	2200      	movs	r2, #0
 800212a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800212e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002136:	4642      	mov	r2, r8
 8002138:	464b      	mov	r3, r9
 800213a:	1891      	adds	r1, r2, r2
 800213c:	6239      	str	r1, [r7, #32]
 800213e:	415b      	adcs	r3, r3
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
 8002142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002146:	4641      	mov	r1, r8
 8002148:	1854      	adds	r4, r2, r1
 800214a:	4649      	mov	r1, r9
 800214c:	eb43 0501 	adc.w	r5, r3, r1
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	00eb      	lsls	r3, r5, #3
 800215a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800215e:	00e2      	lsls	r2, r4, #3
 8002160:	4614      	mov	r4, r2
 8002162:	461d      	mov	r5, r3
 8002164:	4643      	mov	r3, r8
 8002166:	18e3      	adds	r3, r4, r3
 8002168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800216c:	464b      	mov	r3, r9
 800216e:	eb45 0303 	adc.w	r3, r5, r3
 8002172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002182:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002192:	4629      	mov	r1, r5
 8002194:	008b      	lsls	r3, r1, #2
 8002196:	4621      	mov	r1, r4
 8002198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800219c:	4621      	mov	r1, r4
 800219e:	008a      	lsls	r2, r1, #2
 80021a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80021a4:	f7fe f82e 	bl	8000204 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4b60      	ldr	r3, [pc, #384]	@ (8002330 <UART_SetConfig+0x4e4>)
 80021ae:	fba3 2302 	umull	r2, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	011c      	lsls	r4, r3, #4
 80021b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80021c8:	4642      	mov	r2, r8
 80021ca:	464b      	mov	r3, r9
 80021cc:	1891      	adds	r1, r2, r2
 80021ce:	61b9      	str	r1, [r7, #24]
 80021d0:	415b      	adcs	r3, r3
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d8:	4641      	mov	r1, r8
 80021da:	1851      	adds	r1, r2, r1
 80021dc:	6139      	str	r1, [r7, #16]
 80021de:	4649      	mov	r1, r9
 80021e0:	414b      	adcs	r3, r1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021f0:	4659      	mov	r1, fp
 80021f2:	00cb      	lsls	r3, r1, #3
 80021f4:	4651      	mov	r1, sl
 80021f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021fa:	4651      	mov	r1, sl
 80021fc:	00ca      	lsls	r2, r1, #3
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	4603      	mov	r3, r0
 8002204:	4642      	mov	r2, r8
 8002206:	189b      	adds	r3, r3, r2
 8002208:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800220c:	464b      	mov	r3, r9
 800220e:	460a      	mov	r2, r1
 8002210:	eb42 0303 	adc.w	r3, r2, r3
 8002214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002222:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002230:	4649      	mov	r1, r9
 8002232:	008b      	lsls	r3, r1, #2
 8002234:	4641      	mov	r1, r8
 8002236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800223a:	4641      	mov	r1, r8
 800223c:	008a      	lsls	r2, r1, #2
 800223e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002242:	f7fd ffdf 	bl	8000204 <__aeabi_uldivmod>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4611      	mov	r1, r2
 800224c:	4b38      	ldr	r3, [pc, #224]	@ (8002330 <UART_SetConfig+0x4e4>)
 800224e:	fba3 2301 	umull	r2, r3, r3, r1
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2264      	movs	r2, #100	@ 0x64
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	1acb      	subs	r3, r1, r3
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	3332      	adds	r3, #50	@ 0x32
 8002260:	4a33      	ldr	r2, [pc, #204]	@ (8002330 <UART_SetConfig+0x4e4>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800226c:	441c      	add	r4, r3
 800226e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002272:	2200      	movs	r2, #0
 8002274:	673b      	str	r3, [r7, #112]	@ 0x70
 8002276:	677a      	str	r2, [r7, #116]	@ 0x74
 8002278:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	1891      	adds	r1, r2, r2
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	415b      	adcs	r3, r3
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	4641      	mov	r1, r8
 800228e:	1851      	adds	r1, r2, r1
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	4649      	mov	r1, r9
 8002294:	414b      	adcs	r3, r1
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022a4:	4659      	mov	r1, fp
 80022a6:	00cb      	lsls	r3, r1, #3
 80022a8:	4651      	mov	r1, sl
 80022aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ae:	4651      	mov	r1, sl
 80022b0:	00ca      	lsls	r2, r1, #3
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	4642      	mov	r2, r8
 80022ba:	189b      	adds	r3, r3, r2
 80022bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022be:	464b      	mov	r3, r9
 80022c0:	460a      	mov	r2, r1
 80022c2:	eb42 0303 	adc.w	r3, r2, r3
 80022c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80022d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80022e0:	4649      	mov	r1, r9
 80022e2:	008b      	lsls	r3, r1, #2
 80022e4:	4641      	mov	r1, r8
 80022e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ea:	4641      	mov	r1, r8
 80022ec:	008a      	lsls	r2, r1, #2
 80022ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022f2:	f7fd ff87 	bl	8000204 <__aeabi_uldivmod>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <UART_SetConfig+0x4e4>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	2164      	movs	r1, #100	@ 0x64
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	3332      	adds	r3, #50	@ 0x32
 800230e:	4a08      	ldr	r2, [pc, #32]	@ (8002330 <UART_SetConfig+0x4e4>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	f003 020f 	and.w	r2, r3, #15
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4422      	add	r2, r4
 8002322:	609a      	str	r2, [r3, #8]
}
 8002324:	bf00      	nop
 8002326:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800232a:	46bd      	mov	sp, r7
 800232c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002330:	51eb851f 	.word	0x51eb851f

08002334 <memset>:
 8002334:	4402      	add	r2, r0
 8002336:	4603      	mov	r3, r0
 8002338:	4293      	cmp	r3, r2
 800233a:	d100      	bne.n	800233e <memset+0xa>
 800233c:	4770      	bx	lr
 800233e:	f803 1b01 	strb.w	r1, [r3], #1
 8002342:	e7f9      	b.n	8002338 <memset+0x4>

08002344 <__libc_init_array>:
 8002344:	b570      	push	{r4, r5, r6, lr}
 8002346:	4d0d      	ldr	r5, [pc, #52]	@ (800237c <__libc_init_array+0x38>)
 8002348:	4c0d      	ldr	r4, [pc, #52]	@ (8002380 <__libc_init_array+0x3c>)
 800234a:	1b64      	subs	r4, r4, r5
 800234c:	10a4      	asrs	r4, r4, #2
 800234e:	2600      	movs	r6, #0
 8002350:	42a6      	cmp	r6, r4
 8002352:	d109      	bne.n	8002368 <__libc_init_array+0x24>
 8002354:	4d0b      	ldr	r5, [pc, #44]	@ (8002384 <__libc_init_array+0x40>)
 8002356:	4c0c      	ldr	r4, [pc, #48]	@ (8002388 <__libc_init_array+0x44>)
 8002358:	f000 f818 	bl	800238c <_init>
 800235c:	1b64      	subs	r4, r4, r5
 800235e:	10a4      	asrs	r4, r4, #2
 8002360:	2600      	movs	r6, #0
 8002362:	42a6      	cmp	r6, r4
 8002364:	d105      	bne.n	8002372 <__libc_init_array+0x2e>
 8002366:	bd70      	pop	{r4, r5, r6, pc}
 8002368:	f855 3b04 	ldr.w	r3, [r5], #4
 800236c:	4798      	blx	r3
 800236e:	3601      	adds	r6, #1
 8002370:	e7ee      	b.n	8002350 <__libc_init_array+0xc>
 8002372:	f855 3b04 	ldr.w	r3, [r5], #4
 8002376:	4798      	blx	r3
 8002378:	3601      	adds	r6, #1
 800237a:	e7f2      	b.n	8002362 <__libc_init_array+0x1e>
 800237c:	080023c4 	.word	0x080023c4
 8002380:	080023c4 	.word	0x080023c4
 8002384:	080023c4 	.word	0x080023c4
 8002388:	080023c8 	.word	0x080023c8

0800238c <_init>:
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238e:	bf00      	nop
 8002390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002392:	bc08      	pop	{r3}
 8002394:	469e      	mov	lr, r3
 8002396:	4770      	bx	lr

08002398 <_fini>:
 8002398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239a:	bf00      	nop
 800239c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239e:	bc08      	pop	{r3}
 80023a0:	469e      	mov	lr, r3
 80023a2:	4770      	bx	lr
