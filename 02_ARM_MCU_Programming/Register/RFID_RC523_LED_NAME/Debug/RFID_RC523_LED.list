
RFID_RC523_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002060  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002200  08002200  00003200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800229c  0800229c  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  0800229c  0800229c  0000329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022a4  080022a4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a4  080022a4  000032a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022a8  080022a8  000032a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080022ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000005c  08002308  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08002308  000041e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020c1  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a2c  00000000  00000000  0000614d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000290  00000000  00000000  00006b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001c5  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002089  00000000  00000000  00006fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004390  00000000  00000000  0000905e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084292  00000000  00000000  0000d3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00091680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011e0  00000000  00000000  000916c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000928a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080021e8 	.word	0x080021e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080021e8 	.word	0x080021e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t *serNum);

void spi_cs_rfid_write(bool state)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
    if (state)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d006      	beq.n	800029e <spi_cs_rfid_write+0x1e>
    {
        GPIOB->ODR |= (1UL << 0);
 8000290:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <spi_cs_rfid_write+0x38>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <spi_cs_rfid_write+0x38>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6153      	str	r3, [r2, #20]
    }
    else
    {
        GPIOB->ODR &= ~(1UL << 0);
    }
}
 800029c:	e005      	b.n	80002aa <spi_cs_rfid_write+0x2a>
        GPIOB->ODR &= ~(1UL << 0);
 800029e:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <spi_cs_rfid_write+0x38>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <spi_cs_rfid_write+0x38>)
 80002a4:	f023 0301 	bic.w	r3, r3, #1
 80002a8:	6153      	str	r3, [r2, #20]
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40020400 	.word	0x40020400

080002bc <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
    spi_cs_rfid_write(0);
 80002c6:	2000      	movs	r0, #0
 80002c8:	f7ff ffda 	bl	8000280 <spi_cs_rfid_write>
    reg = ((reg << 1) & 0x7E) | 0x80;
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	b25b      	sxtb	r3, r3
 80002d2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80002d6:	b25b      	sxtb	r3, r3
 80002d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002dc:	b25b      	sxtb	r3, r3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	71fb      	strb	r3, [r7, #7]
    SPI_Transmit(&reg, 1);
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	2101      	movs	r1, #1
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fbf2 	bl	8000ad0 <SPI_Transmit>
    uint8_t dataRd = 0;
 80002ec:	2300      	movs	r3, #0
 80002ee:	73fb      	strb	r3, [r7, #15]
    SPI_Receive(&dataRd, 1);
 80002f0:	f107 030f 	add.w	r3, r7, #15
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fc72 	bl	8000be0 <SPI_Receive>
    spi_cs_rfid_write(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ffbf 	bl	8000280 <spi_cs_rfid_write>
    return dataRd;
 8000302:	7bfb      	ldrb	r3, [r7, #15]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	460a      	mov	r2, r1
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	4613      	mov	r3, r2
 800031a:	71bb      	strb	r3, [r7, #6]
    spi_cs_rfid_write(0);
 800031c:	2000      	movs	r0, #0
 800031e:	f7ff ffaf 	bl	8000280 <spi_cs_rfid_write>
    uint8_t txData[2] = {0x7E & (reg << 1), data8};
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800032c:	b2db      	uxtb	r3, r3
 800032e:	733b      	strb	r3, [r7, #12]
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	737b      	strb	r3, [r7, #13]
    SPI_Transmit(txData, 2);
 8000334:	f107 030c 	add.w	r3, r7, #12
 8000338:	2102      	movs	r1, #2
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fbc8 	bl	8000ad0 <SPI_Transmit>
    spi_cs_rfid_write(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f7ff ff9d 	bl	8000280 <spi_cs_rfid_write>
}
 8000346:	bf00      	nop
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	af00      	add	r7, sp, #0
 8000354:	4603      	mov	r3, r0
 8000356:	460a      	mov	r2, r1
 8000358:	71fb      	strb	r3, [r7, #7]
 800035a:	4613      	mov	r3, r2
 800035c:	71bb      	strb	r3, [r7, #6]
    rc522_regWrite8(reg, rc522_regRead8(reg) | mask);
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffab 	bl	80002bc <rc522_regRead8>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	79bb      	ldrb	r3, [r7, #6]
 800036c:	4313      	orrs	r3, r2
 800036e:	b2da      	uxtb	r2, r3
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ffc9 	bl	800030c <rc522_regWrite8>
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b082      	sub	sp, #8
 8000386:	af00      	add	r7, sp, #0
 8000388:	4603      	mov	r3, r0
 800038a:	460a      	mov	r2, r1
 800038c:	71fb      	strb	r3, [r7, #7]
 800038e:	4613      	mov	r3, r2
 8000390:	71bb      	strb	r3, [r7, #6]
    rc522_regWrite8(reg, rc522_regRead8(reg) & (~mask));
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff91 	bl	80002bc <rc522_regRead8>
 800039a:	4603      	mov	r3, r0
 800039c:	b25a      	sxtb	r2, r3
 800039e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80003a2:	43db      	mvns	r3, r3
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	4013      	ands	r3, r2
 80003a8:	b25b      	sxtb	r3, r3
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4611      	mov	r1, r2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ffab 	bl	800030c <rc522_regWrite8>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	af00      	add	r7, sp, #0
    rc522_regWrite8(0x01, 0x0F);
 80003c2:	210f      	movs	r1, #15
 80003c4:	2001      	movs	r0, #1
 80003c6:	f7ff ffa1 	bl	800030c <rc522_regWrite8>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
    uint8_t temp;

    temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 80003d4:	2014      	movs	r0, #20
 80003d6:	f7ff ff71 	bl	80002bc <rc522_regRead8>
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03))
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	f003 0303 	and.w	r3, r3, #3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d103      	bne.n	80003f0 <rc522_antennaON+0x22>
    {
        rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 80003e8:	2103      	movs	r1, #3
 80003ea:	2014      	movs	r0, #20
 80003ec:	f7ff ffaf 	bl	800034e <rc522_setBit>
    }
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b084      	sub	sp, #16
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    bool status = false;
 8000400:	2300      	movs	r3, #0
 8000402:	73fb      	strb	r3, [r7, #15]
    // Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	2026      	movs	r0, #38	@ 0x26
 8000408:	f000 f811 	bl	800042e <rc522_request>
 800040c:	4603      	mov	r3, r0
 800040e:	73fb      	strb	r3, [r7, #15]
    if (status == true)
 8000410:	7bfb      	ldrb	r3, [r7, #15]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d004      	beq.n	8000420 <rc522_checkCard+0x28>
    {
        // Card detected
        // Anti-collision, return card serial number 4 bytes
        status = rc522_antiColl(id);
 8000416:	6878      	ldr	r0, [r7, #4]
 8000418:	f000 f91e 	bl	8000658 <rc522_antiColl>
 800041c:	4603      	mov	r3, r0
 800041e:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt(); // Command card into hibernation
 8000420:	f000 f957 	bl	80006d2 <rc522_halt>

    return status;
 8000424:	7bfb      	ldrb	r3, [r7, #15]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b086      	sub	sp, #24
 8000432:	af02      	add	r7, sp, #8
 8000434:	4603      	mov	r3, r0
 8000436:	6039      	str	r1, [r7, #0]
 8000438:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800043a:	2300      	movs	r3, #0
 800043c:	73fb      	strb	r3, [r7, #15]
    uint16_t backBits;
    rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 800043e:	2107      	movs	r1, #7
 8000440:	200d      	movs	r0, #13
 8000442:	f7ff ff63 	bl	800030c <rc522_regWrite8>
    tagType[0] = reqMode;
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	701a      	strb	r2, [r3, #0]
    status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2201      	movs	r2, #1
 8000456:	6839      	ldr	r1, [r7, #0]
 8000458:	200c      	movs	r0, #12
 800045a:	f000 f813 	bl	8000484 <rc522_toCard>
 800045e:	4603      	mov	r3, r0
 8000460:	73fb      	strb	r3, [r7, #15]
    if ((status != true) || (backBits != 0x10))
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	f083 0301 	eor.w	r3, r3, #1
 8000468:	b2db      	uxtb	r3, r3
 800046a:	2b00      	cmp	r3, #0
 800046c:	d102      	bne.n	8000474 <rc522_request+0x46>
 800046e:	89bb      	ldrh	r3, [r7, #12]
 8000470:	2b10      	cmp	r3, #16
 8000472:	d001      	beq.n	8000478 <rc522_request+0x4a>
    {
        status = false;
 8000474:	2300      	movs	r3, #0
 8000476:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 8000478:	7bfb      	ldrb	r3, [r7, #15]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <rc522_toCard>:
    uint8_t command,
    uint8_t *sendData,
    uint8_t sendLen,
    uint8_t *backData,
    uint16_t *backLen)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af00      	add	r7, sp, #0
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	4603      	mov	r3, r0
 8000490:	73fb      	strb	r3, [r7, #15]
 8000492:	4613      	mov	r3, r2
 8000494:	73bb      	strb	r3, [r7, #14]
    bool status = false;
 8000496:	2300      	movs	r3, #0
 8000498:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 800049a:	2300      	movs	r3, #0
 800049c:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 800049e:	2300      	movs	r3, #0
 80004a0:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command)
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b0c      	cmp	r3, #12
 80004a6:	d006      	beq.n	80004b6 <rc522_toCard+0x32>
 80004a8:	2b0e      	cmp	r3, #14
 80004aa:	d109      	bne.n	80004c0 <rc522_toCard+0x3c>
    {
    case PCD_AUTHENT:
    {
        irqEn = 0x12;
 80004ac:	2312      	movs	r3, #18
 80004ae:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 80004b0:	2310      	movs	r3, #16
 80004b2:	777b      	strb	r3, [r7, #29]
        break;
 80004b4:	e005      	b.n	80004c2 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE:
    {
        irqEn = 0x77;
 80004b6:	2377      	movs	r3, #119	@ 0x77
 80004b8:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 80004ba:	2330      	movs	r3, #48	@ 0x30
 80004bc:	777b      	strb	r3, [r7, #29]
        break;
 80004be:	e000      	b.n	80004c2 <rc522_toCard+0x3e>
    }
    default:
        break;
 80004c0:	bf00      	nop
    }

    rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80004c2:	7fbb      	ldrb	r3, [r7, #30]
 80004c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	2002      	movs	r0, #2
 80004ce:	f7ff ff1d 	bl	800030c <rc522_regWrite8>
    rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 80004d2:	2180      	movs	r1, #128	@ 0x80
 80004d4:	2004      	movs	r0, #4
 80004d6:	f7ff ff54 	bl	8000382 <rc522_clearBit>
    rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	200a      	movs	r0, #10
 80004de:	f7ff ff36 	bl	800034e <rc522_setBit>

    rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2001      	movs	r0, #1
 80004e6:	f7ff ff11 	bl	800030c <rc522_regWrite8>

    // Writing data to the FIFO
    for (i = 0; i < sendLen; i++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	837b      	strh	r3, [r7, #26]
 80004ee:	e00a      	b.n	8000506 <rc522_toCard+0x82>
    {
        rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 80004f0:	8b7b      	ldrh	r3, [r7, #26]
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	4413      	add	r3, r2
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	2009      	movs	r0, #9
 80004fc:	f7ff ff06 	bl	800030c <rc522_regWrite8>
    for (i = 0; i < sendLen; i++)
 8000500:	8b7b      	ldrh	r3, [r7, #26]
 8000502:	3301      	adds	r3, #1
 8000504:	837b      	strh	r3, [r7, #26]
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	b29b      	uxth	r3, r3
 800050a:	8b7a      	ldrh	r2, [r7, #26]
 800050c:	429a      	cmp	r2, r3
 800050e:	d3ef      	bcc.n	80004f0 <rc522_toCard+0x6c>
    }

    // Execute the command
    rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8000510:	7bfb      	ldrb	r3, [r7, #15]
 8000512:	4619      	mov	r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	f7ff fef9 	bl	800030c <rc522_regWrite8>
    if (command == PCD_TRANSCEIVE)
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	2b0c      	cmp	r3, #12
 800051e:	d103      	bne.n	8000528 <rc522_toCard+0xa4>
    {
        rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80); // StartSend=1,transmission of data starts
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	200d      	movs	r0, #13
 8000524:	f7ff ff13 	bl	800034e <rc522_setBit>
    }

    // Waiting to receive data to complete
    i = 100; // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000528:	2364      	movs	r3, #100	@ 0x64
 800052a:	837b      	strh	r3, [r7, #26]
    do
    {
        // CommIrqReg[7..0]
        // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 800052c:	2004      	movs	r0, #4
 800052e:	f7ff fec5 	bl	80002bc <rc522_regRead8>
 8000532:	4603      	mov	r3, r0
 8000534:	773b      	strb	r3, [r7, #28]
        i--;
 8000536:	8b7b      	ldrh	r3, [r7, #26]
 8000538:	3b01      	subs	r3, #1
 800053a:	837b      	strh	r3, [r7, #26]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800053c:	8b7b      	ldrh	r3, [r7, #26]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00a      	beq.n	8000558 <rc522_toCard+0xd4>
 8000542:	7f3b      	ldrb	r3, [r7, #28]
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d105      	bne.n	8000558 <rc522_toCard+0xd4>
 800054c:	7f3a      	ldrb	r2, [r7, #28]
 800054e:	7f7b      	ldrb	r3, [r7, #29]
 8000550:	4013      	ands	r3, r2
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0e9      	beq.n	800052c <rc522_toCard+0xa8>

    rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80); // StartSend=0
 8000558:	2180      	movs	r1, #128	@ 0x80
 800055a:	200d      	movs	r0, #13
 800055c:	f7ff ff11 	bl	8000382 <rc522_clearBit>

    if (i != 0)
 8000560:	8b7b      	ldrh	r3, [r7, #26]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d06d      	beq.n	8000642 <rc522_toCard+0x1be>
    {
        if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B))
 8000566:	2006      	movs	r0, #6
 8000568:	f7ff fea8 	bl	80002bc <rc522_regRead8>
 800056c:	4603      	mov	r3, r0
 800056e:	f003 031b 	and.w	r3, r3, #27
 8000572:	2b00      	cmp	r3, #0
 8000574:	d160      	bne.n	8000638 <rc522_toCard+0x1b4>
        {
            status = true;
 8000576:	2301      	movs	r3, #1
 8000578:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800057a:	7f3a      	ldrb	r2, [r7, #28]
 800057c:	7fbb      	ldrb	r3, [r7, #30]
 800057e:	4013      	ands	r3, r2
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <rc522_toCard+0x10a>
            {
                status = false;
 800058a:	2300      	movs	r3, #0
 800058c:	77fb      	strb	r3, [r7, #31]
            }

            if (command == PCD_TRANSCEIVE)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b0c      	cmp	r3, #12
 8000592:	d156      	bne.n	8000642 <rc522_toCard+0x1be>
            {
                n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8000594:	200a      	movs	r0, #10
 8000596:	f7ff fe91 	bl	80002bc <rc522_regRead8>
 800059a:	4603      	mov	r3, r0
 800059c:	773b      	strb	r3, [r7, #28]
                uint8_t l = n;
 800059e:	7f3b      	ldrb	r3, [r7, #28]
 80005a0:	767b      	strb	r3, [r7, #25]
                lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 80005a2:	200c      	movs	r0, #12
 80005a4:	f7ff fe8a 	bl	80002bc <rc522_regRead8>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	763b      	strb	r3, [r7, #24]
                if (lastBits)
 80005b0:	7e3b      	ldrb	r3, [r7, #24]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <rc522_toCard+0x14a>
                {
                    *backLen = (n - 1) * 8 + lastBits;
 80005b6:	7f3b      	ldrb	r3, [r7, #28]
 80005b8:	3b01      	subs	r3, #1
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	b29a      	uxth	r2, r3
 80005c0:	7e3b      	ldrb	r3, [r7, #24]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4413      	add	r3, r2
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	e005      	b.n	80005da <rc522_toCard+0x156>
                }
                else
                {
                    *backLen = n * 8;
 80005ce:	7f3b      	ldrb	r3, [r7, #28]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d8:	801a      	strh	r2, [r3, #0]
                }

                if (n == 0)
 80005da:	7f3b      	ldrb	r3, [r7, #28]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d101      	bne.n	80005e4 <rc522_toCard+0x160>
                {
                    n = 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	773b      	strb	r3, [r7, #28]
                }
                if (n > MFRC522_MAX_LEN)
 80005e4:	7f3b      	ldrb	r3, [r7, #28]
 80005e6:	2b10      	cmp	r3, #16
 80005e8:	d901      	bls.n	80005ee <rc522_toCard+0x16a>
                {
                    n = MFRC522_MAX_LEN;
 80005ea:	2310      	movs	r3, #16
 80005ec:	773b      	strb	r3, [r7, #28]
                }

                // Reading the received data in FIFO
                for (i = 0; i < n; i++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	837b      	strh	r3, [r7, #26]
 80005f2:	e014      	b.n	800061e <rc522_toCard+0x19a>
                {
                    uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 80005f4:	2009      	movs	r0, #9
 80005f6:	f7ff fe61 	bl	80002bc <rc522_regRead8>
 80005fa:	4603      	mov	r3, r0
 80005fc:	75fb      	strb	r3, [r7, #23]
                    if (l == 4)
 80005fe:	7e7b      	ldrb	r3, [r7, #25]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d104      	bne.n	800060e <rc522_toCard+0x18a>
                        printf("%02x ", d);
 8000604:	7dfb      	ldrb	r3, [r7, #23]
 8000606:	4619      	mov	r1, r3
 8000608:	4810      	ldr	r0, [pc, #64]	@ (800064c <rc522_toCard+0x1c8>)
 800060a:	f000 fd0f 	bl	800102c <iprintf>
                    backData[i] = d;
 800060e:	8b7b      	ldrh	r3, [r7, #26]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	7dfa      	ldrb	r2, [r7, #23]
 8000616:	701a      	strb	r2, [r3, #0]
                for (i = 0; i < n; i++)
 8000618:	8b7b      	ldrh	r3, [r7, #26]
 800061a:	3301      	adds	r3, #1
 800061c:	837b      	strh	r3, [r7, #26]
 800061e:	7f3b      	ldrb	r3, [r7, #28]
 8000620:	b29b      	uxth	r3, r3
 8000622:	8b7a      	ldrh	r2, [r7, #26]
 8000624:	429a      	cmp	r2, r3
 8000626:	d3e5      	bcc.n	80005f4 <rc522_toCard+0x170>
                }
                if (l == 4)
 8000628:	7e7b      	ldrb	r3, [r7, #25]
 800062a:	2b04      	cmp	r3, #4
 800062c:	d102      	bne.n	8000634 <rc522_toCard+0x1b0>
                    printf("\r\n");
 800062e:	4808      	ldr	r0, [pc, #32]	@ (8000650 <rc522_toCard+0x1cc>)
 8000630:	f000 fd6c 	bl	800110c <puts>
                return status;
 8000634:	7ffb      	ldrb	r3, [r7, #31]
 8000636:	e005      	b.n	8000644 <rc522_toCard+0x1c0>
            }
        }
        else
        {
            printf("error\r\n");
 8000638:	4806      	ldr	r0, [pc, #24]	@ (8000654 <rc522_toCard+0x1d0>)
 800063a:	f000 fd67 	bl	800110c <puts>
            status = false;
 800063e:	2300      	movs	r3, #0
 8000640:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 8000642:	7ffb      	ldrb	r3, [r7, #31]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	08002200 	.word	0x08002200
 8000650:	08002208 	.word	0x08002208
 8000654:	0800220c 	.word	0x0800220c

08000658 <rc522_antiColl>:

bool rc522_antiColl(uint8_t *serNum)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af02      	add	r7, sp, #8
 800065e:	6078      	str	r0, [r7, #4]
    bool status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;
    // for (i = 0; i < 4; i++)
    //    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);

    rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00); // TxLastBists = BitFramingReg[2..0]
 8000664:	2100      	movs	r1, #0
 8000666:	200d      	movs	r0, #13
 8000668:	f7ff fe50 	bl	800030c <rc522_regWrite8>

    serNum[0] = PICC_ANTICOLL;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2293      	movs	r2, #147	@ 0x93
 8000670:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	2220      	movs	r2, #32
 8000678:	701a      	strb	r2, [r3, #0]
    status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800067a:	f107 030a 	add.w	r3, r7, #10
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2202      	movs	r2, #2
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	200c      	movs	r0, #12
 8000688:	f7ff fefc 	bl	8000484 <rc522_toCard>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]

    // for (i = 0; i < 4; i++)
    //      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

    if (status == true)
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d018      	beq.n	80006c8 <rc522_antiColl+0x70>
    {
        // Check card serial number
        for (i = 0; i < 4; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	73bb      	strb	r3, [r7, #14]
 800069a:	e009      	b.n	80006b0 <rc522_antiColl+0x58>
        {
            serNumCheck ^= serNum[i];
 800069c:	7bbb      	ldrb	r3, [r7, #14]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	7b7b      	ldrb	r3, [r7, #13]
 80006a6:	4053      	eors	r3, r2
 80006a8:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++)
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	3301      	adds	r3, #1
 80006ae:	73bb      	strb	r3, [r7, #14]
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d9f2      	bls.n	800069c <rc522_antiColl+0x44>
        }
        if (serNumCheck != serNum[i])
 80006b6:	7bbb      	ldrb	r3, [r7, #14]
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	7b7a      	ldrb	r2, [r7, #13]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d001      	beq.n	80006c8 <rc522_antiColl+0x70>
        {
            status = false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <rc522_halt>:

void rc522_halt(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af02      	add	r7, sp, #8
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_HALT;
 80006d8:	2350      	movs	r3, #80	@ 0x50
 80006da:	703b      	strb	r3, [r7, #0]
    buff[1] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	707b      	strb	r3, [r7, #1]
    rc522_calculateCRC(buff, 2, &buff[2]);
 80006e0:	463b      	mov	r3, r7
 80006e2:	1c9a      	adds	r2, r3, #2
 80006e4:	463b      	mov	r3, r7
 80006e6:	2102      	movs	r1, #2
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f80d 	bl	8000708 <rc522_calculateCRC>

    rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80006ee:	463a      	mov	r2, r7
 80006f0:	4639      	mov	r1, r7
 80006f2:	1dbb      	adds	r3, r7, #6
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	4613      	mov	r3, r2
 80006f8:	2204      	movs	r2, #4
 80006fa:	200c      	movs	r0, #12
 80006fc:	f7ff fec2 	bl	8000484 <rc522_toCard>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	460b      	mov	r3, r1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	72fb      	strb	r3, [r7, #11]
    uint8_t i, n;

    rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);  // CRCIrq = 0
 8000716:	2104      	movs	r1, #4
 8000718:	2005      	movs	r0, #5
 800071a:	f7ff fe32 	bl	8000382 <rc522_clearBit>
    rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80); // Clear the FIFO pointer
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	200a      	movs	r0, #10
 8000722:	f7ff fe14 	bl	800034e <rc522_setBit>
    // Write_MFRC522(CommandReg, PCD_IDLE);

    // Writing data to the FIFO
    for (i = 0; i < len; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	75fb      	strb	r3, [r7, #23]
 800072a:	e00a      	b.n	8000742 <rc522_calculateCRC+0x3a>
    {
        rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata + i));
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	2009      	movs	r0, #9
 8000738:	f7ff fde8 	bl	800030c <rc522_regWrite8>
    for (i = 0; i < len; i++)
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	3301      	adds	r3, #1
 8000740:	75fb      	strb	r3, [r7, #23]
 8000742:	7dfa      	ldrb	r2, [r7, #23]
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	429a      	cmp	r2, r3
 8000748:	d3f0      	bcc.n	800072c <rc522_calculateCRC+0x24>
    }
    rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800074a:	2103      	movs	r1, #3
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff fddd 	bl	800030c <rc522_regWrite8>

    // Wait CRC calculation is complete
    i = 0xFF;
 8000752:	23ff      	movs	r3, #255	@ 0xff
 8000754:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8000756:	2005      	movs	r0, #5
 8000758:	f7ff fdb0 	bl	80002bc <rc522_regRead8>
 800075c:	4603      	mov	r3, r0
 800075e:	75bb      	strb	r3, [r7, #22]
        i--;
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	3b01      	subs	r3, #1
 8000764:	75fb      	strb	r3, [r7, #23]
    } while ((i != 0) && !(n & 0x04)); // CRCIrq = 1
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d004      	beq.n	8000776 <rc522_calculateCRC+0x6e>
 800076c:	7dbb      	ldrb	r3, [r7, #22]
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	2b00      	cmp	r3, #0
 8000774:	d0ef      	beq.n	8000756 <rc522_calculateCRC+0x4e>

    // Read CRC calculation result
    pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8000776:	2022      	movs	r0, #34	@ 0x22
 8000778:	f7ff fda0 	bl	80002bc <rc522_regRead8>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	701a      	strb	r2, [r3, #0]
    pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	1c5c      	adds	r4, r3, #1
 8000788:	2021      	movs	r0, #33	@ 0x21
 800078a:	f7ff fd97 	bl	80002bc <rc522_regRead8>
 800078e:	4603      	mov	r3, r0
 8000790:	7023      	strb	r3, [r4, #0]
}
 8000792:	bf00      	nop
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd90      	pop	{r4, r7, pc}
	...

0800079c <rc522_init>:
    }
    return true;
}

void rc522_init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
     * STM32 ->RFID
     * SPI  -> SPI
     * PA8  ->RST
     * PB0  ->CS
     * */
    SPI_Init();
 80007a2:	f000 f95b 	bl	8000a5c <SPI_Init>
    GPIOA->MODER |= GPIO_MODER_MODE8_0;
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <rc522_init+0xc0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <rc522_init+0xc0>)
 80007ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007b0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODE8_1;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <rc522_init+0xc0>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a29      	ldr	r2, [pc, #164]	@ (800085c <rc522_init+0xc0>)
 80007b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007bc:	6013      	str	r3, [r2, #0]

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80007be:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <rc522_init+0xc4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a27      	ldr	r2, [pc, #156]	@ (8000860 <rc522_init+0xc4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOB->MODER |= GPIO_MODER_MODE0_0;
 80007ca:	4b26      	ldr	r3, [pc, #152]	@ (8000864 <rc522_init+0xc8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a25      	ldr	r2, [pc, #148]	@ (8000864 <rc522_init+0xc8>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODE0_1;
 80007d6:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <rc522_init+0xc8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <rc522_init+0xc8>)
 80007dc:	f023 0302 	bic.w	r3, r3, #2
 80007e0:	6013      	str	r3, [r2, #0]
    GPIOA->BSRR = GPIO_BSRR_BR8;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <rc522_init+0xc0>)
 80007e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007e8:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 100000; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e002      	b.n	80007f6 <rc522_init+0x5a>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000868 <rc522_init+0xcc>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	ddf8      	ble.n	80007f0 <rc522_init+0x54>
        ;
    GPIOA->BSRR = GPIO_BSRR_BS8;
 80007fe:	4b17      	ldr	r3, [pc, #92]	@ (800085c <rc522_init+0xc0>)
 8000800:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000804:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 100000; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	e002      	b.n	8000812 <rc522_init+0x76>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4a14      	ldr	r2, [pc, #80]	@ (8000868 <rc522_init+0xcc>)
 8000816:	4293      	cmp	r3, r2
 8000818:	ddf8      	ble.n	800080c <rc522_init+0x70>
        ;
    rc522_reset();
 800081a:	f7ff fdd0 	bl	80003be <rc522_reset>

    rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 800081e:	2180      	movs	r1, #128	@ 0x80
 8000820:	202a      	movs	r0, #42	@ 0x2a
 8000822:	f7ff fd73 	bl	800030c <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000826:	21a9      	movs	r1, #169	@ 0xa9
 8000828:	202b      	movs	r0, #43	@ 0x2b
 800082a:	f7ff fd6f 	bl	800030c <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 800082e:	21e8      	movs	r1, #232	@ 0xe8
 8000830:	202d      	movs	r0, #45	@ 0x2d
 8000832:	f7ff fd6b 	bl	800030c <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000836:	2103      	movs	r1, #3
 8000838:	202c      	movs	r0, #44	@ 0x2c
 800083a:	f7ff fd67 	bl	800030c <rc522_regWrite8>

    rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 800083e:	2140      	movs	r1, #64	@ 0x40
 8000840:	2015      	movs	r0, #21
 8000842:	f7ff fd63 	bl	800030c <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000846:	213d      	movs	r1, #61	@ 0x3d
 8000848:	2011      	movs	r0, #17
 800084a:	f7ff fd5f 	bl	800030c <rc522_regWrite8>

    rc522_antennaON(); // Open the antenna
 800084e:	f7ff fdbe 	bl	80003ce <rc522_antennaON>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40020000 	.word	0x40020000
 8000860:	40023800 	.word	0x40023800
 8000864:	40020400 	.word	0x40020400
 8000868:	0001869f 	.word	0x0001869f

0800086c <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header


volatile uint32_t ms,rms;
void systick_init_ms(uint32_t freq)
	{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000874:	b672      	cpsid	i
}
 8000876:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <systick_init_ms+0x38>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	099b      	lsrs	r3, r3, #6
 8000882:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <systick_init_ms+0x3c>)
 8000884:	3b01      	subs	r3, #1
 8000886:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <systick_init_ms+0x3c>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <systick_init_ms+0x3c>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000894:	b662      	cpsie	i
}
 8000896:	bf00      	nop
	__enable_irq();	
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	10624dd3 	.word	0x10624dd3
 80008a8:	e000e010 	.word	0xe000e010

080008ac <millis>:

uint32_t millis(void)
	{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <millis+0x24>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <millis+0x28>)
 80008ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008bc:	b662      	cpsie	i
}
 80008be:	bf00      	nop
	__enable_irq();
	return rms;
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <millis+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
	}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000078 	.word	0x20000078
 80008d4:	2000007c 	.word	0x2000007c

080008d8 <SysTick_Handler>:

void SysTick_Handler(void){
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
//GPIOA->ODR^=GPIO_ODR_OD5;
ms++;
 80008dc:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <SysTick_Handler+0x18>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a03      	ldr	r2, [pc, #12]	@ (80008f0 <SysTick_Handler+0x18>)
 80008e4:	6013      	str	r3, [r2, #0]
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	20000078 	.word	0x20000078

080008f4 <delay>:

void delay(uint32_t ms)
	{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	uint32_t start=millis();
 80008fc:	f7ff ffd6 	bl	80008ac <millis>
 8000900:	60f8      	str	r0, [r7, #12]

	do{;}while(millis()-start<ms);
 8000902:	f7ff ffd3 	bl	80008ac <millis>
 8000906:	4602      	mov	r2, r0
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d8f7      	bhi.n	8000902 <delay+0xe>


	}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <main>:

uint8_t rfid_id[4];
char data[20];

int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af02      	add	r7, sp, #8
  RCC->AHB1ENR |= (1<<0);
 8000922:	4b48      	ldr	r3, [pc, #288]	@ (8000a44 <main+0x128>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a47      	ldr	r2, [pc, #284]	@ (8000a44 <main+0x128>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
  GPIOA->MODER &= ~(0x3 << (2*4));
 800092e:	4b46      	ldr	r3, [pc, #280]	@ (8000a48 <main+0x12c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a45      	ldr	r2, [pc, #276]	@ (8000a48 <main+0x12c>)
 8000934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000938:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (2*4));
 800093a:	4b43      	ldr	r3, [pc, #268]	@ (8000a48 <main+0x12c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a42      	ldr	r2, [pc, #264]	@ (8000a48 <main+0x12c>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000944:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~(0x3 << (2*1));
 8000946:	4b40      	ldr	r3, [pc, #256]	@ (8000a48 <main+0x12c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a48 <main+0x12c>)
 800094c:	f023 030c 	bic.w	r3, r3, #12
 8000950:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1 << (2*1));
 8000952:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <main+0x12c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a3c      	ldr	r2, [pc, #240]	@ (8000a48 <main+0x12c>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6013      	str	r3, [r2, #0]

//     SysClockConfig();
    systick_init_ms(16000000);
 800095e:	483b      	ldr	r0, [pc, #236]	@ (8000a4c <main+0x130>)
 8000960:	f7ff ff84 	bl	800086c <systick_init_ms>
    rc522_init();
 8000964:	f7ff ff1a 	bl	800079c <rc522_init>
//    lcd_send_string("TESTING RFID!");
//    setCursor(3, 1);
//    lcd_send_string("with STM32F4");
    while (1)
    {
        if (rc522_checkCard(rfid_id))
 8000968:	4839      	ldr	r0, [pc, #228]	@ (8000a50 <main+0x134>)
 800096a:	f7ff fd45 	bl	80003f8 <rc522_checkCard>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d016      	beq.n	80009a2 <main+0x86>
//            lcd_clear();
//            //	char data[20];
//            setCursor(0, 0);
//            lcd_send_string("RFID code is");
//            setCursor(0, 1);
            sprintf(data, "0x%x 0x%x 0x%x 0x%x", rfid_id[0], rfid_id[1], rfid_id[2], rfid_id[3]);
 8000974:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <main+0x134>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	4b35      	ldr	r3, [pc, #212]	@ (8000a50 <main+0x134>)
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	4618      	mov	r0, r3
 8000980:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <main+0x134>)
 8000982:	789b      	ldrb	r3, [r3, #2]
 8000984:	461a      	mov	r2, r3
 8000986:	4b32      	ldr	r3, [pc, #200]	@ (8000a50 <main+0x134>)
 8000988:	78db      	ldrb	r3, [r3, #3]
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	9200      	str	r2, [sp, #0]
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	4930      	ldr	r1, [pc, #192]	@ (8000a54 <main+0x138>)
 8000994:	4830      	ldr	r0, [pc, #192]	@ (8000a58 <main+0x13c>)
 8000996:	f000 fbc1 	bl	800111c <siprintf>
//            lcd_send_string(data);
            delay(1000);
 800099a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800099e:	f7ff ffa9 	bl	80008f4 <delay>
        }
        for(int i=0; i<20; i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	e009      	b.n	80009bc <main+0xa0>
          {
            printf("%c",data[i]);
 80009a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a58 <main+0x13c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fb4d 	bl	8001050 <putchar>
        for(int i=0; i<20; i++)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	3301      	adds	r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b13      	cmp	r3, #19
 80009c0:	ddf2      	ble.n	80009a8 <main+0x8c>
          }
        delay(100);
 80009c2:	2064      	movs	r0, #100	@ 0x64
 80009c4:	f7ff ff96 	bl	80008f4 <delay>
        printf("\n");
 80009c8:	200a      	movs	r0, #10
 80009ca:	f000 fb41 	bl	8001050 <putchar>

        // Check if the RFID ID matches the specified ID
                if (rfid_id[0] == 0xc3 && rfid_id[1] == 0x95 && rfid_id[2] == 0x2d && rfid_id[3] == 0xda)
 80009ce:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <main+0x134>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2bc3      	cmp	r3, #195	@ 0xc3
 80009d4:	d112      	bne.n	80009fc <main+0xe0>
 80009d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <main+0x134>)
 80009d8:	785b      	ldrb	r3, [r3, #1]
 80009da:	2b95      	cmp	r3, #149	@ 0x95
 80009dc:	d10e      	bne.n	80009fc <main+0xe0>
 80009de:	4b1c      	ldr	r3, [pc, #112]	@ (8000a50 <main+0x134>)
 80009e0:	789b      	ldrb	r3, [r3, #2]
 80009e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80009e4:	d10a      	bne.n	80009fc <main+0xe0>
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <main+0x134>)
 80009e8:	78db      	ldrb	r3, [r3, #3]
 80009ea:	2bda      	cmp	r3, #218	@ 0xda
 80009ec:	d106      	bne.n	80009fc <main+0xe0>
                {
                    // Turn on the LED
                    GPIOA->ODR |= (1<<4);
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <main+0x12c>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <main+0x12c>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6153      	str	r3, [r2, #20]
 80009fa:	e005      	b.n	8000a08 <main+0xec>
                }
                else
                {
                    // Turn off the LED
                    GPIOA->ODR &= ~(1<<4);
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <main+0x12c>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <main+0x12c>)
 8000a02:	f023 0310 	bic.w	r3, r3, #16
 8000a06:	6153      	str	r3, [r2, #20]
                }

                if (rfid_id[0] == 0x77 && rfid_id[1] == 0xb8 && rfid_id[2] == 0x1c && rfid_id[3] == 0x2f)
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <main+0x134>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b77      	cmp	r3, #119	@ 0x77
 8000a0e:	d112      	bne.n	8000a36 <main+0x11a>
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <main+0x134>)
 8000a12:	785b      	ldrb	r3, [r3, #1]
 8000a14:	2bb8      	cmp	r3, #184	@ 0xb8
 8000a16:	d10e      	bne.n	8000a36 <main+0x11a>
 8000a18:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <main+0x134>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	2b1c      	cmp	r3, #28
 8000a1e:	d10a      	bne.n	8000a36 <main+0x11a>
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <main+0x134>)
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	2b2f      	cmp	r3, #47	@ 0x2f
 8000a26:	d106      	bne.n	8000a36 <main+0x11a>
                {
                    // Turn on the LED
                    GPIOA->ODR |= (1<<1);
 8000a28:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <main+0x12c>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <main+0x12c>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	6153      	str	r3, [r2, #20]
 8000a34:	e005      	b.n	8000a42 <main+0x126>
                }
                else
                {
                    // Turn off the LED
                    GPIOA->ODR &= ~(1<<1);
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <main+0x12c>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a03      	ldr	r2, [pc, #12]	@ (8000a48 <main+0x12c>)
 8000a3c:	f023 0302 	bic.w	r3, r3, #2
 8000a40:	6153      	str	r3, [r2, #20]
        if (rc522_checkCard(rfid_id))
 8000a42:	e791      	b.n	8000968 <main+0x4c>
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	00f42400 	.word	0x00f42400
 8000a50:	20000080 	.word	0x20000080
 8000a54:	08002214 	.word	0x08002214
 8000a58:	20000084 	.word	0x20000084

08000a5c <SPI_Init>:
#include "stdint.h"
#include "delay.h"
#include "stdio.h"

void SPI_Init(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
    #define AF5 0x05
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // enable clock forn gpio a
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <SPI_Init+0x68>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <SPI_Init+0x68>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;  // enable clock for spi1
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <SPI_Init+0x68>)
 8000a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <SPI_Init+0x68>)
 8000a72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a76:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a7e:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000a82:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0);
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a8a:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000a8e:	6013      	str	r3, [r2, #0]

    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a96:	f443 437c 	orr.w	r3, r3, #64512	@ 0xfc00
 8000a9a:	6093      	str	r3, [r2, #8]

    GPIOA->AFR[0] |= (AF5 << 20) | (AF5 << 24) | (AF5 << 28);
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <SPI_Init+0x6c>)
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <SPI_Init+0x6c>)
 8000aa2:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000aa6:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000aaa:	6213      	str	r3, [r2, #32]

    SPI1->CR2 = 0;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <SPI_Init+0x70>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
    SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_MSTR | SPI_CR1_BR_2 | SPI_CR1_SSI | SPI_CR1_SPE;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SPI_Init+0x70>)
 8000ab4:	f44f 7259 	mov.w	r2, #868	@ 0x364
 8000ab8:	601a      	str	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40013000 	.word	0x40013000

08000ad0 <SPI_Transmit>:

int8_t SPI_Transmit(uint8_t *data, uint32_t size)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]

    uint32_t i = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	74fb      	strb	r3, [r7, #19]
    uint32_t start = millis();
 8000ae2:	f7ff fee3 	bl	80008ac <millis>
 8000ae6:	60f8      	str	r0, [r7, #12]
    temp = SPI1->DR;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	74fb      	strb	r3, [r7, #19]
    temp = SPI1->SR;
 8000aee:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	74fb      	strb	r3, [r7, #19]
    while (i < size)
 8000af4:	e031      	b.n	8000b5a <SPI_Transmit+0x8a>
    {
        while (!((SPI1->SR) & SPI_SR_TXE))
        {
            if (millis() - start > 1000)
 8000af6:	f7ff fed9 	bl	80008ac <millis>
 8000afa:	4602      	mov	r2, r0
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b04:	d905      	bls.n	8000b12 <SPI_Transmit+0x42>
            {
                printf("TXE timed out\r\n");
 8000b06:	4832      	ldr	r0, [pc, #200]	@ (8000bd0 <SPI_Transmit+0x100>)
 8000b08:	f000 fb00 	bl	800110c <puts>
                return -1;
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	e058      	b.n	8000bc4 <SPI_Transmit+0xf4>
        while (!((SPI1->SR) & SPI_SR_TXE))
 8000b12:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0eb      	beq.n	8000af6 <SPI_Transmit+0x26>
            }
        } // wait to transmision buffer to be emplty
        SPI1->DR = data[i];
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	4413      	add	r3, r2
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000b28:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_BSY))
 8000b2a:	e00d      	b.n	8000b48 <SPI_Transmit+0x78>
        {
            if (millis() - start > 1000)
 8000b2c:	f7ff febe 	bl	80008ac <millis>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b3a:	d905      	bls.n	8000b48 <SPI_Transmit+0x78>
            {
                printf("BSY timed out\r\n");
 8000b3c:	4825      	ldr	r0, [pc, #148]	@ (8000bd4 <SPI_Transmit+0x104>)
 8000b3e:	f000 fae5 	bl	800110c <puts>
                return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
 8000b46:	e03d      	b.n	8000bc4 <SPI_Transmit+0xf4>
        while (!(SPI1->SR & SPI_SR_BSY))
 8000b48:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0eb      	beq.n	8000b2c <SPI_Transmit+0x5c>
            }
        }
        i++;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3301      	adds	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    while (i < size)
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d3d7      	bcc.n	8000b12 <SPI_Transmit+0x42>
    }
    while (!((SPI1->SR) & SPI_SR_TXE))
 8000b62:	e00d      	b.n	8000b80 <SPI_Transmit+0xb0>
    {
        if (millis() - start > 1000)
 8000b64:	f7ff fea2 	bl	80008ac <millis>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b72:	d905      	bls.n	8000b80 <SPI_Transmit+0xb0>
        {
            printf("TXE2 time dout\r\n");
 8000b74:	4818      	ldr	r0, [pc, #96]	@ (8000bd8 <SPI_Transmit+0x108>)
 8000b76:	f000 fac9 	bl	800110c <puts>
            return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7e:	e021      	b.n	8000bc4 <SPI_Transmit+0xf4>
    while (!((SPI1->SR) & SPI_SR_TXE))
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0eb      	beq.n	8000b64 <SPI_Transmit+0x94>
        }
    }
    while ((SPI1->SR) & SPI_SR_BSY)
 8000b8c:	e00d      	b.n	8000baa <SPI_Transmit+0xda>
    {
        if (millis() - start > 1000)
 8000b8e:	f7ff fe8d 	bl	80008ac <millis>
 8000b92:	4602      	mov	r2, r0
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b9c:	d905      	bls.n	8000baa <SPI_Transmit+0xda>
        {
            printf("BSY2 timed out\r\n");
 8000b9e:	480f      	ldr	r0, [pc, #60]	@ (8000bdc <SPI_Transmit+0x10c>)
 8000ba0:	f000 fab4 	bl	800110c <puts>
            return -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	e00c      	b.n	8000bc4 <SPI_Transmit+0xf4>
    while ((SPI1->SR) & SPI_SR_BSY)
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1eb      	bne.n	8000b8e <SPI_Transmit+0xbe>
        }
    }
    temp = SPI1->DR;
 8000bb6:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	74fb      	strb	r3, [r7, #19]
    temp = SPI1->SR;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	@ (8000bcc <SPI_Transmit+0xfc>)
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	74fb      	strb	r3, [r7, #19]
    return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40013000 	.word	0x40013000
 8000bd0:	08002228 	.word	0x08002228
 8000bd4:	08002238 	.word	0x08002238
 8000bd8:	08002248 	.word	0x08002248
 8000bdc:	08002258 	.word	0x08002258

08000be0 <SPI_Receive>:

int8_t SPI_Receive(uint8_t *data, uint32_t size)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    while (size)
 8000bea:	e020      	b.n	8000c2e <SPI_Receive+0x4e>
    {
        uint32_t start = millis();
 8000bec:	f7ff fe5e 	bl	80008ac <millis>
 8000bf0:	60f8      	str	r0, [r7, #12]
        SPI1->DR = 0;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	@ (8000c40 <SPI_Receive+0x60>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_RXNE))
 8000bf8:	e009      	b.n	8000c0e <SPI_Receive+0x2e>
        {
            if (millis() - start > 200)
 8000bfa:	f7ff fe57 	bl	80008ac <millis>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	2bc8      	cmp	r3, #200	@ 0xc8
 8000c06:	d902      	bls.n	8000c0e <SPI_Receive+0x2e>
            {
                return -1;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	e013      	b.n	8000c36 <SPI_Receive+0x56>
        while (!(SPI1->SR & SPI_SR_RXNE))
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <SPI_Receive+0x60>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0ef      	beq.n	8000bfa <SPI_Receive+0x1a>
            }
        }
        *data++ = (SPI1->DR);
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <SPI_Receive+0x60>)
 8000c1c:	68d9      	ldr	r1, [r3, #12]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	b2ca      	uxtb	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
        size--;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	603b      	str	r3, [r7, #0]
    while (size)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1db      	bne.n	8000bec <SPI_Receive+0xc>
    }
    return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40013000 	.word	0x40013000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <ITM_SendChar>:
// ITM Register Addresses
#define ITM_STIMULUS_PORT0 *((volatile uint32_t *)0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t *)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
    DEMCR |= (1 << 24); // Enable TRACENA
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <ITM_SendChar+0x48>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <ITM_SendChar+0x48>)
 8000ca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cac:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1 << 0); // Enable Stimulus Port 0
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <ITM_SendChar+0x4c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ce4 <ITM_SendChar+0x4c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6013      	str	r3, [r2, #0]

    while (!(ITM_STIMULUS_PORT0 & 1))
 8000cba:	bf00      	nop
 8000cbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f8      	beq.n	8000cbc <ITM_SendChar+0x24>
        ; // read FIFO Status in bit[0]

    ITM_STIMULUS_PORT0 = ch;
 8000cca:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	6013      	str	r3, [r2, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000edfc 	.word	0xe000edfc
 8000ce4:	e0000e00 	.word	0xe0000e00

08000ce8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
  }

  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
  {
//    __io_putchar(*ptr++);
      ITM_SendChar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ffab 	bl	8000c98 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
  }
  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	@ (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	@ (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f000 fad8 	bl	80013a8 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20020000 	.word	0x20020000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000098 	.word	0x20000098
 8000e2c:	200001e8 	.word	0x200001e8

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	@ (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5a:	490e      	ldr	r1, [pc, #56]	@ (8000e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e70:	4c0b      	ldr	r4, [pc, #44]	@ (8000ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff ffd7 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f000 fa97 	bl	80013b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fd49 	bl	800091c <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e98:	080022ac 	.word	0x080022ac
  ldr r2, =_sbss
 8000e9c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ea0:	200001e8 	.word	0x200001e8

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <std>:
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	b510      	push	{r4, lr}
 8000eac:	4604      	mov	r4, r0
 8000eae:	e9c0 3300 	strd	r3, r3, [r0]
 8000eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000eb6:	6083      	str	r3, [r0, #8]
 8000eb8:	8181      	strh	r1, [r0, #12]
 8000eba:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ebc:	81c2      	strh	r2, [r0, #14]
 8000ebe:	6183      	str	r3, [r0, #24]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	2208      	movs	r2, #8
 8000ec4:	305c      	adds	r0, #92	@ 0x5c
 8000ec6:	f000 fa21 	bl	800130c <memset>
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <std+0x58>)
 8000ecc:	6263      	str	r3, [r4, #36]	@ 0x24
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <std+0x5c>)
 8000ed0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <std+0x60>)
 8000ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <std+0x64>)
 8000ed8:	6323      	str	r3, [r4, #48]	@ 0x30
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <std+0x68>)
 8000edc:	6224      	str	r4, [r4, #32]
 8000ede:	429c      	cmp	r4, r3
 8000ee0:	d006      	beq.n	8000ef0 <std+0x48>
 8000ee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ee6:	4294      	cmp	r4, r2
 8000ee8:	d002      	beq.n	8000ef0 <std+0x48>
 8000eea:	33d0      	adds	r3, #208	@ 0xd0
 8000eec:	429c      	cmp	r4, r3
 8000eee:	d105      	bne.n	8000efc <std+0x54>
 8000ef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ef8:	f000 ba80 	b.w	80013fc <__retarget_lock_init_recursive>
 8000efc:	bd10      	pop	{r4, pc}
 8000efe:	bf00      	nop
 8000f00:	0800115d 	.word	0x0800115d
 8000f04:	0800117f 	.word	0x0800117f
 8000f08:	080011b7 	.word	0x080011b7
 8000f0c:	080011db 	.word	0x080011db
 8000f10:	2000009c 	.word	0x2000009c

08000f14 <stdio_exit_handler>:
 8000f14:	4a02      	ldr	r2, [pc, #8]	@ (8000f20 <stdio_exit_handler+0xc>)
 8000f16:	4903      	ldr	r1, [pc, #12]	@ (8000f24 <stdio_exit_handler+0x10>)
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <stdio_exit_handler+0x14>)
 8000f1a:	f000 b869 	b.w	8000ff0 <_fwalk_sglue>
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	08001f4d 	.word	0x08001f4d
 8000f28:	20000010 	.word	0x20000010

08000f2c <cleanup_stdio>:
 8000f2c:	6841      	ldr	r1, [r0, #4]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <cleanup_stdio+0x34>)
 8000f30:	4299      	cmp	r1, r3
 8000f32:	b510      	push	{r4, lr}
 8000f34:	4604      	mov	r4, r0
 8000f36:	d001      	beq.n	8000f3c <cleanup_stdio+0x10>
 8000f38:	f001 f808 	bl	8001f4c <_fflush_r>
 8000f3c:	68a1      	ldr	r1, [r4, #8]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <cleanup_stdio+0x38>)
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d002      	beq.n	8000f4a <cleanup_stdio+0x1e>
 8000f44:	4620      	mov	r0, r4
 8000f46:	f001 f801 	bl	8001f4c <_fflush_r>
 8000f4a:	68e1      	ldr	r1, [r4, #12]
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <cleanup_stdio+0x3c>)
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d004      	beq.n	8000f5c <cleanup_stdio+0x30>
 8000f52:	4620      	mov	r0, r4
 8000f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f58:	f000 bff8 	b.w	8001f4c <_fflush_r>
 8000f5c:	bd10      	pop	{r4, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000009c 	.word	0x2000009c
 8000f64:	20000104 	.word	0x20000104
 8000f68:	2000016c 	.word	0x2000016c

08000f6c <global_stdio_init.part.0>:
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <global_stdio_init.part.0+0x30>)
 8000f70:	4c0b      	ldr	r4, [pc, #44]	@ (8000fa0 <global_stdio_init.part.0+0x34>)
 8000f72:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <global_stdio_init.part.0+0x38>)
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	4620      	mov	r0, r4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	f7ff ff94 	bl	8000ea8 <std>
 8000f80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f84:	2201      	movs	r2, #1
 8000f86:	2109      	movs	r1, #9
 8000f88:	f7ff ff8e 	bl	8000ea8 <std>
 8000f8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f90:	2202      	movs	r2, #2
 8000f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f96:	2112      	movs	r1, #18
 8000f98:	f7ff bf86 	b.w	8000ea8 <std>
 8000f9c:	200001d4 	.word	0x200001d4
 8000fa0:	2000009c 	.word	0x2000009c
 8000fa4:	08000f15 	.word	0x08000f15

08000fa8 <__sfp_lock_acquire>:
 8000fa8:	4801      	ldr	r0, [pc, #4]	@ (8000fb0 <__sfp_lock_acquire+0x8>)
 8000faa:	f000 ba28 	b.w	80013fe <__retarget_lock_acquire_recursive>
 8000fae:	bf00      	nop
 8000fb0:	200001dd 	.word	0x200001dd

08000fb4 <__sfp_lock_release>:
 8000fb4:	4801      	ldr	r0, [pc, #4]	@ (8000fbc <__sfp_lock_release+0x8>)
 8000fb6:	f000 ba23 	b.w	8001400 <__retarget_lock_release_recursive>
 8000fba:	bf00      	nop
 8000fbc:	200001dd 	.word	0x200001dd

08000fc0 <__sinit>:
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	f7ff fff0 	bl	8000fa8 <__sfp_lock_acquire>
 8000fc8:	6a23      	ldr	r3, [r4, #32]
 8000fca:	b11b      	cbz	r3, 8000fd4 <__sinit+0x14>
 8000fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fd0:	f7ff bff0 	b.w	8000fb4 <__sfp_lock_release>
 8000fd4:	4b04      	ldr	r3, [pc, #16]	@ (8000fe8 <__sinit+0x28>)
 8000fd6:	6223      	str	r3, [r4, #32]
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <__sinit+0x2c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f5      	bne.n	8000fcc <__sinit+0xc>
 8000fe0:	f7ff ffc4 	bl	8000f6c <global_stdio_init.part.0>
 8000fe4:	e7f2      	b.n	8000fcc <__sinit+0xc>
 8000fe6:	bf00      	nop
 8000fe8:	08000f2d 	.word	0x08000f2d
 8000fec:	200001d4 	.word	0x200001d4

08000ff0 <_fwalk_sglue>:
 8000ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ff4:	4607      	mov	r7, r0
 8000ff6:	4688      	mov	r8, r1
 8000ff8:	4614      	mov	r4, r2
 8000ffa:	2600      	movs	r6, #0
 8000ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001000:	f1b9 0901 	subs.w	r9, r9, #1
 8001004:	d505      	bpl.n	8001012 <_fwalk_sglue+0x22>
 8001006:	6824      	ldr	r4, [r4, #0]
 8001008:	2c00      	cmp	r4, #0
 800100a:	d1f7      	bne.n	8000ffc <_fwalk_sglue+0xc>
 800100c:	4630      	mov	r0, r6
 800100e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001012:	89ab      	ldrh	r3, [r5, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d907      	bls.n	8001028 <_fwalk_sglue+0x38>
 8001018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800101c:	3301      	adds	r3, #1
 800101e:	d003      	beq.n	8001028 <_fwalk_sglue+0x38>
 8001020:	4629      	mov	r1, r5
 8001022:	4638      	mov	r0, r7
 8001024:	47c0      	blx	r8
 8001026:	4306      	orrs	r6, r0
 8001028:	3568      	adds	r5, #104	@ 0x68
 800102a:	e7e9      	b.n	8001000 <_fwalk_sglue+0x10>

0800102c <iprintf>:
 800102c:	b40f      	push	{r0, r1, r2, r3}
 800102e:	b507      	push	{r0, r1, r2, lr}
 8001030:	4906      	ldr	r1, [pc, #24]	@ (800104c <iprintf+0x20>)
 8001032:	ab04      	add	r3, sp, #16
 8001034:	6808      	ldr	r0, [r1, #0]
 8001036:	f853 2b04 	ldr.w	r2, [r3], #4
 800103a:	6881      	ldr	r1, [r0, #8]
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f000 fc5b 	bl	80018f8 <_vfiprintf_r>
 8001042:	b003      	add	sp, #12
 8001044:	f85d eb04 	ldr.w	lr, [sp], #4
 8001048:	b004      	add	sp, #16
 800104a:	4770      	bx	lr
 800104c:	2000000c 	.word	0x2000000c

08001050 <putchar>:
 8001050:	4b02      	ldr	r3, [pc, #8]	@ (800105c <putchar+0xc>)
 8001052:	4601      	mov	r1, r0
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	6882      	ldr	r2, [r0, #8]
 8001058:	f001 b802 	b.w	8002060 <_putc_r>
 800105c:	2000000c 	.word	0x2000000c

08001060 <_puts_r>:
 8001060:	6a03      	ldr	r3, [r0, #32]
 8001062:	b570      	push	{r4, r5, r6, lr}
 8001064:	6884      	ldr	r4, [r0, #8]
 8001066:	4605      	mov	r5, r0
 8001068:	460e      	mov	r6, r1
 800106a:	b90b      	cbnz	r3, 8001070 <_puts_r+0x10>
 800106c:	f7ff ffa8 	bl	8000fc0 <__sinit>
 8001070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001072:	07db      	lsls	r3, r3, #31
 8001074:	d405      	bmi.n	8001082 <_puts_r+0x22>
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	0598      	lsls	r0, r3, #22
 800107a:	d402      	bmi.n	8001082 <_puts_r+0x22>
 800107c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800107e:	f000 f9be 	bl	80013fe <__retarget_lock_acquire_recursive>
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	0719      	lsls	r1, r3, #28
 8001086:	d502      	bpl.n	800108e <_puts_r+0x2e>
 8001088:	6923      	ldr	r3, [r4, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d135      	bne.n	80010fa <_puts_r+0x9a>
 800108e:	4621      	mov	r1, r4
 8001090:	4628      	mov	r0, r5
 8001092:	f000 f8e5 	bl	8001260 <__swsetup_r>
 8001096:	b380      	cbz	r0, 80010fa <_puts_r+0x9a>
 8001098:	f04f 35ff 	mov.w	r5, #4294967295
 800109c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800109e:	07da      	lsls	r2, r3, #31
 80010a0:	d405      	bmi.n	80010ae <_puts_r+0x4e>
 80010a2:	89a3      	ldrh	r3, [r4, #12]
 80010a4:	059b      	lsls	r3, r3, #22
 80010a6:	d402      	bmi.n	80010ae <_puts_r+0x4e>
 80010a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80010aa:	f000 f9a9 	bl	8001400 <__retarget_lock_release_recursive>
 80010ae:	4628      	mov	r0, r5
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	da04      	bge.n	80010c0 <_puts_r+0x60>
 80010b6:	69a2      	ldr	r2, [r4, #24]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	dc17      	bgt.n	80010ec <_puts_r+0x8c>
 80010bc:	290a      	cmp	r1, #10
 80010be:	d015      	beq.n	80010ec <_puts_r+0x8c>
 80010c0:	6823      	ldr	r3, [r4, #0]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	6022      	str	r2, [r4, #0]
 80010c6:	7019      	strb	r1, [r3, #0]
 80010c8:	68a3      	ldr	r3, [r4, #8]
 80010ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010ce:	3b01      	subs	r3, #1
 80010d0:	60a3      	str	r3, [r4, #8]
 80010d2:	2900      	cmp	r1, #0
 80010d4:	d1ed      	bne.n	80010b2 <_puts_r+0x52>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da11      	bge.n	80010fe <_puts_r+0x9e>
 80010da:	4622      	mov	r2, r4
 80010dc:	210a      	movs	r1, #10
 80010de:	4628      	mov	r0, r5
 80010e0:	f000 f87f 	bl	80011e2 <__swbuf_r>
 80010e4:	3001      	adds	r0, #1
 80010e6:	d0d7      	beq.n	8001098 <_puts_r+0x38>
 80010e8:	250a      	movs	r5, #10
 80010ea:	e7d7      	b.n	800109c <_puts_r+0x3c>
 80010ec:	4622      	mov	r2, r4
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 f877 	bl	80011e2 <__swbuf_r>
 80010f4:	3001      	adds	r0, #1
 80010f6:	d1e7      	bne.n	80010c8 <_puts_r+0x68>
 80010f8:	e7ce      	b.n	8001098 <_puts_r+0x38>
 80010fa:	3e01      	subs	r6, #1
 80010fc:	e7e4      	b.n	80010c8 <_puts_r+0x68>
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	6022      	str	r2, [r4, #0]
 8001104:	220a      	movs	r2, #10
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e7ee      	b.n	80010e8 <_puts_r+0x88>
	...

0800110c <puts>:
 800110c:	4b02      	ldr	r3, [pc, #8]	@ (8001118 <puts+0xc>)
 800110e:	4601      	mov	r1, r0
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f7ff bfa5 	b.w	8001060 <_puts_r>
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c

0800111c <siprintf>:
 800111c:	b40e      	push	{r1, r2, r3}
 800111e:	b500      	push	{lr}
 8001120:	b09c      	sub	sp, #112	@ 0x70
 8001122:	ab1d      	add	r3, sp, #116	@ 0x74
 8001124:	9002      	str	r0, [sp, #8]
 8001126:	9006      	str	r0, [sp, #24]
 8001128:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <siprintf+0x38>)
 800112e:	9107      	str	r1, [sp, #28]
 8001130:	9104      	str	r1, [sp, #16]
 8001132:	4909      	ldr	r1, [pc, #36]	@ (8001158 <siprintf+0x3c>)
 8001134:	f853 2b04 	ldr.w	r2, [r3], #4
 8001138:	9105      	str	r1, [sp, #20]
 800113a:	6800      	ldr	r0, [r0, #0]
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	a902      	add	r1, sp, #8
 8001140:	f000 fab4 	bl	80016ac <_svfiprintf_r>
 8001144:	9b02      	ldr	r3, [sp, #8]
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	b01c      	add	sp, #112	@ 0x70
 800114c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001150:	b003      	add	sp, #12
 8001152:	4770      	bx	lr
 8001154:	2000000c 	.word	0x2000000c
 8001158:	ffff0208 	.word	0xffff0208

0800115c <__sread>:
 800115c:	b510      	push	{r4, lr}
 800115e:	460c      	mov	r4, r1
 8001160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001164:	f000 f8fc 	bl	8001360 <_read_r>
 8001168:	2800      	cmp	r0, #0
 800116a:	bfab      	itete	ge
 800116c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800116e:	89a3      	ldrhlt	r3, [r4, #12]
 8001170:	181b      	addge	r3, r3, r0
 8001172:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001176:	bfac      	ite	ge
 8001178:	6563      	strge	r3, [r4, #84]	@ 0x54
 800117a:	81a3      	strhlt	r3, [r4, #12]
 800117c:	bd10      	pop	{r4, pc}

0800117e <__swrite>:
 800117e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001182:	461f      	mov	r7, r3
 8001184:	898b      	ldrh	r3, [r1, #12]
 8001186:	05db      	lsls	r3, r3, #23
 8001188:	4605      	mov	r5, r0
 800118a:	460c      	mov	r4, r1
 800118c:	4616      	mov	r6, r2
 800118e:	d505      	bpl.n	800119c <__swrite+0x1e>
 8001190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001194:	2302      	movs	r3, #2
 8001196:	2200      	movs	r2, #0
 8001198:	f000 f8d0 	bl	800133c <_lseek_r>
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011a6:	81a3      	strh	r3, [r4, #12]
 80011a8:	4632      	mov	r2, r6
 80011aa:	463b      	mov	r3, r7
 80011ac:	4628      	mov	r0, r5
 80011ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011b2:	f000 b8e7 	b.w	8001384 <_write_r>

080011b6 <__sseek>:
 80011b6:	b510      	push	{r4, lr}
 80011b8:	460c      	mov	r4, r1
 80011ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011be:	f000 f8bd 	bl	800133c <_lseek_r>
 80011c2:	1c43      	adds	r3, r0, #1
 80011c4:	89a3      	ldrh	r3, [r4, #12]
 80011c6:	bf15      	itete	ne
 80011c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80011ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80011ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80011d2:	81a3      	strheq	r3, [r4, #12]
 80011d4:	bf18      	it	ne
 80011d6:	81a3      	strhne	r3, [r4, #12]
 80011d8:	bd10      	pop	{r4, pc}

080011da <__sclose>:
 80011da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011de:	f000 b89d 	b.w	800131c <_close_r>

080011e2 <__swbuf_r>:
 80011e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e4:	460e      	mov	r6, r1
 80011e6:	4614      	mov	r4, r2
 80011e8:	4605      	mov	r5, r0
 80011ea:	b118      	cbz	r0, 80011f4 <__swbuf_r+0x12>
 80011ec:	6a03      	ldr	r3, [r0, #32]
 80011ee:	b90b      	cbnz	r3, 80011f4 <__swbuf_r+0x12>
 80011f0:	f7ff fee6 	bl	8000fc0 <__sinit>
 80011f4:	69a3      	ldr	r3, [r4, #24]
 80011f6:	60a3      	str	r3, [r4, #8]
 80011f8:	89a3      	ldrh	r3, [r4, #12]
 80011fa:	071a      	lsls	r2, r3, #28
 80011fc:	d501      	bpl.n	8001202 <__swbuf_r+0x20>
 80011fe:	6923      	ldr	r3, [r4, #16]
 8001200:	b943      	cbnz	r3, 8001214 <__swbuf_r+0x32>
 8001202:	4621      	mov	r1, r4
 8001204:	4628      	mov	r0, r5
 8001206:	f000 f82b 	bl	8001260 <__swsetup_r>
 800120a:	b118      	cbz	r0, 8001214 <__swbuf_r+0x32>
 800120c:	f04f 37ff 	mov.w	r7, #4294967295
 8001210:	4638      	mov	r0, r7
 8001212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	6922      	ldr	r2, [r4, #16]
 8001218:	1a98      	subs	r0, r3, r2
 800121a:	6963      	ldr	r3, [r4, #20]
 800121c:	b2f6      	uxtb	r6, r6
 800121e:	4283      	cmp	r3, r0
 8001220:	4637      	mov	r7, r6
 8001222:	dc05      	bgt.n	8001230 <__swbuf_r+0x4e>
 8001224:	4621      	mov	r1, r4
 8001226:	4628      	mov	r0, r5
 8001228:	f000 fe90 	bl	8001f4c <_fflush_r>
 800122c:	2800      	cmp	r0, #0
 800122e:	d1ed      	bne.n	800120c <__swbuf_r+0x2a>
 8001230:	68a3      	ldr	r3, [r4, #8]
 8001232:	3b01      	subs	r3, #1
 8001234:	60a3      	str	r3, [r4, #8]
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	6022      	str	r2, [r4, #0]
 800123c:	701e      	strb	r6, [r3, #0]
 800123e:	6962      	ldr	r2, [r4, #20]
 8001240:	1c43      	adds	r3, r0, #1
 8001242:	429a      	cmp	r2, r3
 8001244:	d004      	beq.n	8001250 <__swbuf_r+0x6e>
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	07db      	lsls	r3, r3, #31
 800124a:	d5e1      	bpl.n	8001210 <__swbuf_r+0x2e>
 800124c:	2e0a      	cmp	r6, #10
 800124e:	d1df      	bne.n	8001210 <__swbuf_r+0x2e>
 8001250:	4621      	mov	r1, r4
 8001252:	4628      	mov	r0, r5
 8001254:	f000 fe7a 	bl	8001f4c <_fflush_r>
 8001258:	2800      	cmp	r0, #0
 800125a:	d0d9      	beq.n	8001210 <__swbuf_r+0x2e>
 800125c:	e7d6      	b.n	800120c <__swbuf_r+0x2a>
	...

08001260 <__swsetup_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <__swsetup_r+0xa8>)
 8001264:	4605      	mov	r5, r0
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	460c      	mov	r4, r1
 800126a:	b118      	cbz	r0, 8001274 <__swsetup_r+0x14>
 800126c:	6a03      	ldr	r3, [r0, #32]
 800126e:	b90b      	cbnz	r3, 8001274 <__swsetup_r+0x14>
 8001270:	f7ff fea6 	bl	8000fc0 <__sinit>
 8001274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001278:	0719      	lsls	r1, r3, #28
 800127a:	d422      	bmi.n	80012c2 <__swsetup_r+0x62>
 800127c:	06da      	lsls	r2, r3, #27
 800127e:	d407      	bmi.n	8001290 <__swsetup_r+0x30>
 8001280:	2209      	movs	r2, #9
 8001282:	602a      	str	r2, [r5, #0]
 8001284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	e033      	b.n	80012f8 <__swsetup_r+0x98>
 8001290:	0758      	lsls	r0, r3, #29
 8001292:	d512      	bpl.n	80012ba <__swsetup_r+0x5a>
 8001294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001296:	b141      	cbz	r1, 80012aa <__swsetup_r+0x4a>
 8001298:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800129c:	4299      	cmp	r1, r3
 800129e:	d002      	beq.n	80012a6 <__swsetup_r+0x46>
 80012a0:	4628      	mov	r0, r5
 80012a2:	f000 f8af 	bl	8001404 <_free_r>
 80012a6:	2300      	movs	r3, #0
 80012a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80012aa:	89a3      	ldrh	r3, [r4, #12]
 80012ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012b0:	81a3      	strh	r3, [r4, #12]
 80012b2:	2300      	movs	r3, #0
 80012b4:	6063      	str	r3, [r4, #4]
 80012b6:	6923      	ldr	r3, [r4, #16]
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	89a3      	ldrh	r3, [r4, #12]
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	81a3      	strh	r3, [r4, #12]
 80012c2:	6923      	ldr	r3, [r4, #16]
 80012c4:	b94b      	cbnz	r3, 80012da <__swsetup_r+0x7a>
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80012cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d0:	d003      	beq.n	80012da <__swsetup_r+0x7a>
 80012d2:	4621      	mov	r1, r4
 80012d4:	4628      	mov	r0, r5
 80012d6:	f000 fe87 	bl	8001fe8 <__smakebuf_r>
 80012da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012de:	f013 0201 	ands.w	r2, r3, #1
 80012e2:	d00a      	beq.n	80012fa <__swsetup_r+0x9a>
 80012e4:	2200      	movs	r2, #0
 80012e6:	60a2      	str	r2, [r4, #8]
 80012e8:	6962      	ldr	r2, [r4, #20]
 80012ea:	4252      	negs	r2, r2
 80012ec:	61a2      	str	r2, [r4, #24]
 80012ee:	6922      	ldr	r2, [r4, #16]
 80012f0:	b942      	cbnz	r2, 8001304 <__swsetup_r+0xa4>
 80012f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012f6:	d1c5      	bne.n	8001284 <__swsetup_r+0x24>
 80012f8:	bd38      	pop	{r3, r4, r5, pc}
 80012fa:	0799      	lsls	r1, r3, #30
 80012fc:	bf58      	it	pl
 80012fe:	6962      	ldrpl	r2, [r4, #20]
 8001300:	60a2      	str	r2, [r4, #8]
 8001302:	e7f4      	b.n	80012ee <__swsetup_r+0x8e>
 8001304:	2000      	movs	r0, #0
 8001306:	e7f7      	b.n	80012f8 <__swsetup_r+0x98>
 8001308:	2000000c 	.word	0x2000000c

0800130c <memset>:
 800130c:	4402      	add	r2, r0
 800130e:	4603      	mov	r3, r0
 8001310:	4293      	cmp	r3, r2
 8001312:	d100      	bne.n	8001316 <memset+0xa>
 8001314:	4770      	bx	lr
 8001316:	f803 1b01 	strb.w	r1, [r3], #1
 800131a:	e7f9      	b.n	8001310 <memset+0x4>

0800131c <_close_r>:
 800131c:	b538      	push	{r3, r4, r5, lr}
 800131e:	4d06      	ldr	r5, [pc, #24]	@ (8001338 <_close_r+0x1c>)
 8001320:	2300      	movs	r3, #0
 8001322:	4604      	mov	r4, r0
 8001324:	4608      	mov	r0, r1
 8001326:	602b      	str	r3, [r5, #0]
 8001328:	f7ff fd17 	bl	8000d5a <_close>
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	d102      	bne.n	8001336 <_close_r+0x1a>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	b103      	cbz	r3, 8001336 <_close_r+0x1a>
 8001334:	6023      	str	r3, [r4, #0]
 8001336:	bd38      	pop	{r3, r4, r5, pc}
 8001338:	200001d8 	.word	0x200001d8

0800133c <_lseek_r>:
 800133c:	b538      	push	{r3, r4, r5, lr}
 800133e:	4d07      	ldr	r5, [pc, #28]	@ (800135c <_lseek_r+0x20>)
 8001340:	4604      	mov	r4, r0
 8001342:	4608      	mov	r0, r1
 8001344:	4611      	mov	r1, r2
 8001346:	2200      	movs	r2, #0
 8001348:	602a      	str	r2, [r5, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	f7ff fd2c 	bl	8000da8 <_lseek>
 8001350:	1c43      	adds	r3, r0, #1
 8001352:	d102      	bne.n	800135a <_lseek_r+0x1e>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	b103      	cbz	r3, 800135a <_lseek_r+0x1e>
 8001358:	6023      	str	r3, [r4, #0]
 800135a:	bd38      	pop	{r3, r4, r5, pc}
 800135c:	200001d8 	.word	0x200001d8

08001360 <_read_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d07      	ldr	r5, [pc, #28]	@ (8001380 <_read_r+0x20>)
 8001364:	4604      	mov	r4, r0
 8001366:	4608      	mov	r0, r1
 8001368:	4611      	mov	r1, r2
 800136a:	2200      	movs	r2, #0
 800136c:	602a      	str	r2, [r5, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	f7ff fcba 	bl	8000ce8 <_read>
 8001374:	1c43      	adds	r3, r0, #1
 8001376:	d102      	bne.n	800137e <_read_r+0x1e>
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	b103      	cbz	r3, 800137e <_read_r+0x1e>
 800137c:	6023      	str	r3, [r4, #0]
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	200001d8 	.word	0x200001d8

08001384 <_write_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4d07      	ldr	r5, [pc, #28]	@ (80013a4 <_write_r+0x20>)
 8001388:	4604      	mov	r4, r0
 800138a:	4608      	mov	r0, r1
 800138c:	4611      	mov	r1, r2
 800138e:	2200      	movs	r2, #0
 8001390:	602a      	str	r2, [r5, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	f7ff fcc5 	bl	8000d22 <_write>
 8001398:	1c43      	adds	r3, r0, #1
 800139a:	d102      	bne.n	80013a2 <_write_r+0x1e>
 800139c:	682b      	ldr	r3, [r5, #0]
 800139e:	b103      	cbz	r3, 80013a2 <_write_r+0x1e>
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	bd38      	pop	{r3, r4, r5, pc}
 80013a4:	200001d8 	.word	0x200001d8

080013a8 <__errno>:
 80013a8:	4b01      	ldr	r3, [pc, #4]	@ (80013b0 <__errno+0x8>)
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000000c 	.word	0x2000000c

080013b4 <__libc_init_array>:
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	4d0d      	ldr	r5, [pc, #52]	@ (80013ec <__libc_init_array+0x38>)
 80013b8:	4c0d      	ldr	r4, [pc, #52]	@ (80013f0 <__libc_init_array+0x3c>)
 80013ba:	1b64      	subs	r4, r4, r5
 80013bc:	10a4      	asrs	r4, r4, #2
 80013be:	2600      	movs	r6, #0
 80013c0:	42a6      	cmp	r6, r4
 80013c2:	d109      	bne.n	80013d8 <__libc_init_array+0x24>
 80013c4:	4d0b      	ldr	r5, [pc, #44]	@ (80013f4 <__libc_init_array+0x40>)
 80013c6:	4c0c      	ldr	r4, [pc, #48]	@ (80013f8 <__libc_init_array+0x44>)
 80013c8:	f000 ff0e 	bl	80021e8 <_init>
 80013cc:	1b64      	subs	r4, r4, r5
 80013ce:	10a4      	asrs	r4, r4, #2
 80013d0:	2600      	movs	r6, #0
 80013d2:	42a6      	cmp	r6, r4
 80013d4:	d105      	bne.n	80013e2 <__libc_init_array+0x2e>
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
 80013d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80013dc:	4798      	blx	r3
 80013de:	3601      	adds	r6, #1
 80013e0:	e7ee      	b.n	80013c0 <__libc_init_array+0xc>
 80013e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013e6:	4798      	blx	r3
 80013e8:	3601      	adds	r6, #1
 80013ea:	e7f2      	b.n	80013d2 <__libc_init_array+0x1e>
 80013ec:	080022a4 	.word	0x080022a4
 80013f0:	080022a4 	.word	0x080022a4
 80013f4:	080022a4 	.word	0x080022a4
 80013f8:	080022a8 	.word	0x080022a8

080013fc <__retarget_lock_init_recursive>:
 80013fc:	4770      	bx	lr

080013fe <__retarget_lock_acquire_recursive>:
 80013fe:	4770      	bx	lr

08001400 <__retarget_lock_release_recursive>:
 8001400:	4770      	bx	lr
	...

08001404 <_free_r>:
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4605      	mov	r5, r0
 8001408:	2900      	cmp	r1, #0
 800140a:	d041      	beq.n	8001490 <_free_r+0x8c>
 800140c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001410:	1f0c      	subs	r4, r1, #4
 8001412:	2b00      	cmp	r3, #0
 8001414:	bfb8      	it	lt
 8001416:	18e4      	addlt	r4, r4, r3
 8001418:	f000 f8e0 	bl	80015dc <__malloc_lock>
 800141c:	4a1d      	ldr	r2, [pc, #116]	@ (8001494 <_free_r+0x90>)
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	b933      	cbnz	r3, 8001430 <_free_r+0x2c>
 8001422:	6063      	str	r3, [r4, #4]
 8001424:	6014      	str	r4, [r2, #0]
 8001426:	4628      	mov	r0, r5
 8001428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800142c:	f000 b8dc 	b.w	80015e8 <__malloc_unlock>
 8001430:	42a3      	cmp	r3, r4
 8001432:	d908      	bls.n	8001446 <_free_r+0x42>
 8001434:	6820      	ldr	r0, [r4, #0]
 8001436:	1821      	adds	r1, r4, r0
 8001438:	428b      	cmp	r3, r1
 800143a:	bf01      	itttt	eq
 800143c:	6819      	ldreq	r1, [r3, #0]
 800143e:	685b      	ldreq	r3, [r3, #4]
 8001440:	1809      	addeq	r1, r1, r0
 8001442:	6021      	streq	r1, [r4, #0]
 8001444:	e7ed      	b.n	8001422 <_free_r+0x1e>
 8001446:	461a      	mov	r2, r3
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	b10b      	cbz	r3, 8001450 <_free_r+0x4c>
 800144c:	42a3      	cmp	r3, r4
 800144e:	d9fa      	bls.n	8001446 <_free_r+0x42>
 8001450:	6811      	ldr	r1, [r2, #0]
 8001452:	1850      	adds	r0, r2, r1
 8001454:	42a0      	cmp	r0, r4
 8001456:	d10b      	bne.n	8001470 <_free_r+0x6c>
 8001458:	6820      	ldr	r0, [r4, #0]
 800145a:	4401      	add	r1, r0
 800145c:	1850      	adds	r0, r2, r1
 800145e:	4283      	cmp	r3, r0
 8001460:	6011      	str	r1, [r2, #0]
 8001462:	d1e0      	bne.n	8001426 <_free_r+0x22>
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	6053      	str	r3, [r2, #4]
 800146a:	4408      	add	r0, r1
 800146c:	6010      	str	r0, [r2, #0]
 800146e:	e7da      	b.n	8001426 <_free_r+0x22>
 8001470:	d902      	bls.n	8001478 <_free_r+0x74>
 8001472:	230c      	movs	r3, #12
 8001474:	602b      	str	r3, [r5, #0]
 8001476:	e7d6      	b.n	8001426 <_free_r+0x22>
 8001478:	6820      	ldr	r0, [r4, #0]
 800147a:	1821      	adds	r1, r4, r0
 800147c:	428b      	cmp	r3, r1
 800147e:	bf04      	itt	eq
 8001480:	6819      	ldreq	r1, [r3, #0]
 8001482:	685b      	ldreq	r3, [r3, #4]
 8001484:	6063      	str	r3, [r4, #4]
 8001486:	bf04      	itt	eq
 8001488:	1809      	addeq	r1, r1, r0
 800148a:	6021      	streq	r1, [r4, #0]
 800148c:	6054      	str	r4, [r2, #4]
 800148e:	e7ca      	b.n	8001426 <_free_r+0x22>
 8001490:	bd38      	pop	{r3, r4, r5, pc}
 8001492:	bf00      	nop
 8001494:	200001e4 	.word	0x200001e4

08001498 <sbrk_aligned>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	4e0f      	ldr	r6, [pc, #60]	@ (80014d8 <sbrk_aligned+0x40>)
 800149c:	460c      	mov	r4, r1
 800149e:	6831      	ldr	r1, [r6, #0]
 80014a0:	4605      	mov	r5, r0
 80014a2:	b911      	cbnz	r1, 80014aa <sbrk_aligned+0x12>
 80014a4:	f000 fe4c 	bl	8002140 <_sbrk_r>
 80014a8:	6030      	str	r0, [r6, #0]
 80014aa:	4621      	mov	r1, r4
 80014ac:	4628      	mov	r0, r5
 80014ae:	f000 fe47 	bl	8002140 <_sbrk_r>
 80014b2:	1c43      	adds	r3, r0, #1
 80014b4:	d103      	bne.n	80014be <sbrk_aligned+0x26>
 80014b6:	f04f 34ff 	mov.w	r4, #4294967295
 80014ba:	4620      	mov	r0, r4
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
 80014be:	1cc4      	adds	r4, r0, #3
 80014c0:	f024 0403 	bic.w	r4, r4, #3
 80014c4:	42a0      	cmp	r0, r4
 80014c6:	d0f8      	beq.n	80014ba <sbrk_aligned+0x22>
 80014c8:	1a21      	subs	r1, r4, r0
 80014ca:	4628      	mov	r0, r5
 80014cc:	f000 fe38 	bl	8002140 <_sbrk_r>
 80014d0:	3001      	adds	r0, #1
 80014d2:	d1f2      	bne.n	80014ba <sbrk_aligned+0x22>
 80014d4:	e7ef      	b.n	80014b6 <sbrk_aligned+0x1e>
 80014d6:	bf00      	nop
 80014d8:	200001e0 	.word	0x200001e0

080014dc <_malloc_r>:
 80014dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014e0:	1ccd      	adds	r5, r1, #3
 80014e2:	f025 0503 	bic.w	r5, r5, #3
 80014e6:	3508      	adds	r5, #8
 80014e8:	2d0c      	cmp	r5, #12
 80014ea:	bf38      	it	cc
 80014ec:	250c      	movcc	r5, #12
 80014ee:	2d00      	cmp	r5, #0
 80014f0:	4606      	mov	r6, r0
 80014f2:	db01      	blt.n	80014f8 <_malloc_r+0x1c>
 80014f4:	42a9      	cmp	r1, r5
 80014f6:	d904      	bls.n	8001502 <_malloc_r+0x26>
 80014f8:	230c      	movs	r3, #12
 80014fa:	6033      	str	r3, [r6, #0]
 80014fc:	2000      	movs	r0, #0
 80014fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80015d8 <_malloc_r+0xfc>
 8001506:	f000 f869 	bl	80015dc <__malloc_lock>
 800150a:	f8d8 3000 	ldr.w	r3, [r8]
 800150e:	461c      	mov	r4, r3
 8001510:	bb44      	cbnz	r4, 8001564 <_malloc_r+0x88>
 8001512:	4629      	mov	r1, r5
 8001514:	4630      	mov	r0, r6
 8001516:	f7ff ffbf 	bl	8001498 <sbrk_aligned>
 800151a:	1c43      	adds	r3, r0, #1
 800151c:	4604      	mov	r4, r0
 800151e:	d158      	bne.n	80015d2 <_malloc_r+0xf6>
 8001520:	f8d8 4000 	ldr.w	r4, [r8]
 8001524:	4627      	mov	r7, r4
 8001526:	2f00      	cmp	r7, #0
 8001528:	d143      	bne.n	80015b2 <_malloc_r+0xd6>
 800152a:	2c00      	cmp	r4, #0
 800152c:	d04b      	beq.n	80015c6 <_malloc_r+0xea>
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	4639      	mov	r1, r7
 8001532:	4630      	mov	r0, r6
 8001534:	eb04 0903 	add.w	r9, r4, r3
 8001538:	f000 fe02 	bl	8002140 <_sbrk_r>
 800153c:	4581      	cmp	r9, r0
 800153e:	d142      	bne.n	80015c6 <_malloc_r+0xea>
 8001540:	6821      	ldr	r1, [r4, #0]
 8001542:	1a6d      	subs	r5, r5, r1
 8001544:	4629      	mov	r1, r5
 8001546:	4630      	mov	r0, r6
 8001548:	f7ff ffa6 	bl	8001498 <sbrk_aligned>
 800154c:	3001      	adds	r0, #1
 800154e:	d03a      	beq.n	80015c6 <_malloc_r+0xea>
 8001550:	6823      	ldr	r3, [r4, #0]
 8001552:	442b      	add	r3, r5
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	f8d8 3000 	ldr.w	r3, [r8]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	bb62      	cbnz	r2, 80015b8 <_malloc_r+0xdc>
 800155e:	f8c8 7000 	str.w	r7, [r8]
 8001562:	e00f      	b.n	8001584 <_malloc_r+0xa8>
 8001564:	6822      	ldr	r2, [r4, #0]
 8001566:	1b52      	subs	r2, r2, r5
 8001568:	d420      	bmi.n	80015ac <_malloc_r+0xd0>
 800156a:	2a0b      	cmp	r2, #11
 800156c:	d917      	bls.n	800159e <_malloc_r+0xc2>
 800156e:	1961      	adds	r1, r4, r5
 8001570:	42a3      	cmp	r3, r4
 8001572:	6025      	str	r5, [r4, #0]
 8001574:	bf18      	it	ne
 8001576:	6059      	strne	r1, [r3, #4]
 8001578:	6863      	ldr	r3, [r4, #4]
 800157a:	bf08      	it	eq
 800157c:	f8c8 1000 	streq.w	r1, [r8]
 8001580:	5162      	str	r2, [r4, r5]
 8001582:	604b      	str	r3, [r1, #4]
 8001584:	4630      	mov	r0, r6
 8001586:	f000 f82f 	bl	80015e8 <__malloc_unlock>
 800158a:	f104 000b 	add.w	r0, r4, #11
 800158e:	1d23      	adds	r3, r4, #4
 8001590:	f020 0007 	bic.w	r0, r0, #7
 8001594:	1ac2      	subs	r2, r0, r3
 8001596:	bf1c      	itt	ne
 8001598:	1a1b      	subne	r3, r3, r0
 800159a:	50a3      	strne	r3, [r4, r2]
 800159c:	e7af      	b.n	80014fe <_malloc_r+0x22>
 800159e:	6862      	ldr	r2, [r4, #4]
 80015a0:	42a3      	cmp	r3, r4
 80015a2:	bf0c      	ite	eq
 80015a4:	f8c8 2000 	streq.w	r2, [r8]
 80015a8:	605a      	strne	r2, [r3, #4]
 80015aa:	e7eb      	b.n	8001584 <_malloc_r+0xa8>
 80015ac:	4623      	mov	r3, r4
 80015ae:	6864      	ldr	r4, [r4, #4]
 80015b0:	e7ae      	b.n	8001510 <_malloc_r+0x34>
 80015b2:	463c      	mov	r4, r7
 80015b4:	687f      	ldr	r7, [r7, #4]
 80015b6:	e7b6      	b.n	8001526 <_malloc_r+0x4a>
 80015b8:	461a      	mov	r2, r3
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	42a3      	cmp	r3, r4
 80015be:	d1fb      	bne.n	80015b8 <_malloc_r+0xdc>
 80015c0:	2300      	movs	r3, #0
 80015c2:	6053      	str	r3, [r2, #4]
 80015c4:	e7de      	b.n	8001584 <_malloc_r+0xa8>
 80015c6:	230c      	movs	r3, #12
 80015c8:	6033      	str	r3, [r6, #0]
 80015ca:	4630      	mov	r0, r6
 80015cc:	f000 f80c 	bl	80015e8 <__malloc_unlock>
 80015d0:	e794      	b.n	80014fc <_malloc_r+0x20>
 80015d2:	6005      	str	r5, [r0, #0]
 80015d4:	e7d6      	b.n	8001584 <_malloc_r+0xa8>
 80015d6:	bf00      	nop
 80015d8:	200001e4 	.word	0x200001e4

080015dc <__malloc_lock>:
 80015dc:	4801      	ldr	r0, [pc, #4]	@ (80015e4 <__malloc_lock+0x8>)
 80015de:	f7ff bf0e 	b.w	80013fe <__retarget_lock_acquire_recursive>
 80015e2:	bf00      	nop
 80015e4:	200001dc 	.word	0x200001dc

080015e8 <__malloc_unlock>:
 80015e8:	4801      	ldr	r0, [pc, #4]	@ (80015f0 <__malloc_unlock+0x8>)
 80015ea:	f7ff bf09 	b.w	8001400 <__retarget_lock_release_recursive>
 80015ee:	bf00      	nop
 80015f0:	200001dc 	.word	0x200001dc

080015f4 <__ssputs_r>:
 80015f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015f8:	688e      	ldr	r6, [r1, #8]
 80015fa:	461f      	mov	r7, r3
 80015fc:	42be      	cmp	r6, r7
 80015fe:	680b      	ldr	r3, [r1, #0]
 8001600:	4682      	mov	sl, r0
 8001602:	460c      	mov	r4, r1
 8001604:	4690      	mov	r8, r2
 8001606:	d82d      	bhi.n	8001664 <__ssputs_r+0x70>
 8001608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800160c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001610:	d026      	beq.n	8001660 <__ssputs_r+0x6c>
 8001612:	6965      	ldr	r5, [r4, #20]
 8001614:	6909      	ldr	r1, [r1, #16]
 8001616:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800161a:	eba3 0901 	sub.w	r9, r3, r1
 800161e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001622:	1c7b      	adds	r3, r7, #1
 8001624:	444b      	add	r3, r9
 8001626:	106d      	asrs	r5, r5, #1
 8001628:	429d      	cmp	r5, r3
 800162a:	bf38      	it	cc
 800162c:	461d      	movcc	r5, r3
 800162e:	0553      	lsls	r3, r2, #21
 8001630:	d527      	bpl.n	8001682 <__ssputs_r+0x8e>
 8001632:	4629      	mov	r1, r5
 8001634:	f7ff ff52 	bl	80014dc <_malloc_r>
 8001638:	4606      	mov	r6, r0
 800163a:	b360      	cbz	r0, 8001696 <__ssputs_r+0xa2>
 800163c:	6921      	ldr	r1, [r4, #16]
 800163e:	464a      	mov	r2, r9
 8001640:	f000 fd8e 	bl	8002160 <memcpy>
 8001644:	89a3      	ldrh	r3, [r4, #12]
 8001646:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800164a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164e:	81a3      	strh	r3, [r4, #12]
 8001650:	6126      	str	r6, [r4, #16]
 8001652:	6165      	str	r5, [r4, #20]
 8001654:	444e      	add	r6, r9
 8001656:	eba5 0509 	sub.w	r5, r5, r9
 800165a:	6026      	str	r6, [r4, #0]
 800165c:	60a5      	str	r5, [r4, #8]
 800165e:	463e      	mov	r6, r7
 8001660:	42be      	cmp	r6, r7
 8001662:	d900      	bls.n	8001666 <__ssputs_r+0x72>
 8001664:	463e      	mov	r6, r7
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	4632      	mov	r2, r6
 800166a:	4641      	mov	r1, r8
 800166c:	f000 fd2c 	bl	80020c8 <memmove>
 8001670:	68a3      	ldr	r3, [r4, #8]
 8001672:	1b9b      	subs	r3, r3, r6
 8001674:	60a3      	str	r3, [r4, #8]
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	4433      	add	r3, r6
 800167a:	6023      	str	r3, [r4, #0]
 800167c:	2000      	movs	r0, #0
 800167e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001682:	462a      	mov	r2, r5
 8001684:	f000 fd7a 	bl	800217c <_realloc_r>
 8001688:	4606      	mov	r6, r0
 800168a:	2800      	cmp	r0, #0
 800168c:	d1e0      	bne.n	8001650 <__ssputs_r+0x5c>
 800168e:	6921      	ldr	r1, [r4, #16]
 8001690:	4650      	mov	r0, sl
 8001692:	f7ff feb7 	bl	8001404 <_free_r>
 8001696:	230c      	movs	r3, #12
 8001698:	f8ca 3000 	str.w	r3, [sl]
 800169c:	89a3      	ldrh	r3, [r4, #12]
 800169e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	e7e9      	b.n	800167e <__ssputs_r+0x8a>
	...

080016ac <_svfiprintf_r>:
 80016ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016b0:	4698      	mov	r8, r3
 80016b2:	898b      	ldrh	r3, [r1, #12]
 80016b4:	061b      	lsls	r3, r3, #24
 80016b6:	b09d      	sub	sp, #116	@ 0x74
 80016b8:	4607      	mov	r7, r0
 80016ba:	460d      	mov	r5, r1
 80016bc:	4614      	mov	r4, r2
 80016be:	d510      	bpl.n	80016e2 <_svfiprintf_r+0x36>
 80016c0:	690b      	ldr	r3, [r1, #16]
 80016c2:	b973      	cbnz	r3, 80016e2 <_svfiprintf_r+0x36>
 80016c4:	2140      	movs	r1, #64	@ 0x40
 80016c6:	f7ff ff09 	bl	80014dc <_malloc_r>
 80016ca:	6028      	str	r0, [r5, #0]
 80016cc:	6128      	str	r0, [r5, #16]
 80016ce:	b930      	cbnz	r0, 80016de <_svfiprintf_r+0x32>
 80016d0:	230c      	movs	r3, #12
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	b01d      	add	sp, #116	@ 0x74
 80016da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016de:	2340      	movs	r3, #64	@ 0x40
 80016e0:	616b      	str	r3, [r5, #20]
 80016e2:	2300      	movs	r3, #0
 80016e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80016e6:	2320      	movs	r3, #32
 80016e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80016ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80016f0:	2330      	movs	r3, #48	@ 0x30
 80016f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001890 <_svfiprintf_r+0x1e4>
 80016f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80016fa:	f04f 0901 	mov.w	r9, #1
 80016fe:	4623      	mov	r3, r4
 8001700:	469a      	mov	sl, r3
 8001702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001706:	b10a      	cbz	r2, 800170c <_svfiprintf_r+0x60>
 8001708:	2a25      	cmp	r2, #37	@ 0x25
 800170a:	d1f9      	bne.n	8001700 <_svfiprintf_r+0x54>
 800170c:	ebba 0b04 	subs.w	fp, sl, r4
 8001710:	d00b      	beq.n	800172a <_svfiprintf_r+0x7e>
 8001712:	465b      	mov	r3, fp
 8001714:	4622      	mov	r2, r4
 8001716:	4629      	mov	r1, r5
 8001718:	4638      	mov	r0, r7
 800171a:	f7ff ff6b 	bl	80015f4 <__ssputs_r>
 800171e:	3001      	adds	r0, #1
 8001720:	f000 80a7 	beq.w	8001872 <_svfiprintf_r+0x1c6>
 8001724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001726:	445a      	add	r2, fp
 8001728:	9209      	str	r2, [sp, #36]	@ 0x24
 800172a:	f89a 3000 	ldrb.w	r3, [sl]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 809f 	beq.w	8001872 <_svfiprintf_r+0x1c6>
 8001734:	2300      	movs	r3, #0
 8001736:	f04f 32ff 	mov.w	r2, #4294967295
 800173a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800173e:	f10a 0a01 	add.w	sl, sl, #1
 8001742:	9304      	str	r3, [sp, #16]
 8001744:	9307      	str	r3, [sp, #28]
 8001746:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800174a:	931a      	str	r3, [sp, #104]	@ 0x68
 800174c:	4654      	mov	r4, sl
 800174e:	2205      	movs	r2, #5
 8001750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001754:	484e      	ldr	r0, [pc, #312]	@ (8001890 <_svfiprintf_r+0x1e4>)
 8001756:	f7fe fd43 	bl	80001e0 <memchr>
 800175a:	9a04      	ldr	r2, [sp, #16]
 800175c:	b9d8      	cbnz	r0, 8001796 <_svfiprintf_r+0xea>
 800175e:	06d0      	lsls	r0, r2, #27
 8001760:	bf44      	itt	mi
 8001762:	2320      	movmi	r3, #32
 8001764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001768:	0711      	lsls	r1, r2, #28
 800176a:	bf44      	itt	mi
 800176c:	232b      	movmi	r3, #43	@ 0x2b
 800176e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001772:	f89a 3000 	ldrb.w	r3, [sl]
 8001776:	2b2a      	cmp	r3, #42	@ 0x2a
 8001778:	d015      	beq.n	80017a6 <_svfiprintf_r+0xfa>
 800177a:	9a07      	ldr	r2, [sp, #28]
 800177c:	4654      	mov	r4, sl
 800177e:	2000      	movs	r0, #0
 8001780:	f04f 0c0a 	mov.w	ip, #10
 8001784:	4621      	mov	r1, r4
 8001786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800178a:	3b30      	subs	r3, #48	@ 0x30
 800178c:	2b09      	cmp	r3, #9
 800178e:	d94b      	bls.n	8001828 <_svfiprintf_r+0x17c>
 8001790:	b1b0      	cbz	r0, 80017c0 <_svfiprintf_r+0x114>
 8001792:	9207      	str	r2, [sp, #28]
 8001794:	e014      	b.n	80017c0 <_svfiprintf_r+0x114>
 8001796:	eba0 0308 	sub.w	r3, r0, r8
 800179a:	fa09 f303 	lsl.w	r3, r9, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	9304      	str	r3, [sp, #16]
 80017a2:	46a2      	mov	sl, r4
 80017a4:	e7d2      	b.n	800174c <_svfiprintf_r+0xa0>
 80017a6:	9b03      	ldr	r3, [sp, #12]
 80017a8:	1d19      	adds	r1, r3, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	9103      	str	r1, [sp, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bfbb      	ittet	lt
 80017b2:	425b      	neglt	r3, r3
 80017b4:	f042 0202 	orrlt.w	r2, r2, #2
 80017b8:	9307      	strge	r3, [sp, #28]
 80017ba:	9307      	strlt	r3, [sp, #28]
 80017bc:	bfb8      	it	lt
 80017be:	9204      	strlt	r2, [sp, #16]
 80017c0:	7823      	ldrb	r3, [r4, #0]
 80017c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80017c4:	d10a      	bne.n	80017dc <_svfiprintf_r+0x130>
 80017c6:	7863      	ldrb	r3, [r4, #1]
 80017c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80017ca:	d132      	bne.n	8001832 <_svfiprintf_r+0x186>
 80017cc:	9b03      	ldr	r3, [sp, #12]
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	9203      	str	r2, [sp, #12]
 80017d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80017d8:	3402      	adds	r4, #2
 80017da:	9305      	str	r3, [sp, #20]
 80017dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80018a0 <_svfiprintf_r+0x1f4>
 80017e0:	7821      	ldrb	r1, [r4, #0]
 80017e2:	2203      	movs	r2, #3
 80017e4:	4650      	mov	r0, sl
 80017e6:	f7fe fcfb 	bl	80001e0 <memchr>
 80017ea:	b138      	cbz	r0, 80017fc <_svfiprintf_r+0x150>
 80017ec:	9b04      	ldr	r3, [sp, #16]
 80017ee:	eba0 000a 	sub.w	r0, r0, sl
 80017f2:	2240      	movs	r2, #64	@ 0x40
 80017f4:	4082      	lsls	r2, r0
 80017f6:	4313      	orrs	r3, r2
 80017f8:	3401      	adds	r4, #1
 80017fa:	9304      	str	r3, [sp, #16]
 80017fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001800:	4824      	ldr	r0, [pc, #144]	@ (8001894 <_svfiprintf_r+0x1e8>)
 8001802:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001806:	2206      	movs	r2, #6
 8001808:	f7fe fcea 	bl	80001e0 <memchr>
 800180c:	2800      	cmp	r0, #0
 800180e:	d036      	beq.n	800187e <_svfiprintf_r+0x1d2>
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <_svfiprintf_r+0x1ec>)
 8001812:	bb1b      	cbnz	r3, 800185c <_svfiprintf_r+0x1b0>
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	3307      	adds	r3, #7
 8001818:	f023 0307 	bic.w	r3, r3, #7
 800181c:	3308      	adds	r3, #8
 800181e:	9303      	str	r3, [sp, #12]
 8001820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001822:	4433      	add	r3, r6
 8001824:	9309      	str	r3, [sp, #36]	@ 0x24
 8001826:	e76a      	b.n	80016fe <_svfiprintf_r+0x52>
 8001828:	fb0c 3202 	mla	r2, ip, r2, r3
 800182c:	460c      	mov	r4, r1
 800182e:	2001      	movs	r0, #1
 8001830:	e7a8      	b.n	8001784 <_svfiprintf_r+0xd8>
 8001832:	2300      	movs	r3, #0
 8001834:	3401      	adds	r4, #1
 8001836:	9305      	str	r3, [sp, #20]
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 0c0a 	mov.w	ip, #10
 800183e:	4620      	mov	r0, r4
 8001840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001844:	3a30      	subs	r2, #48	@ 0x30
 8001846:	2a09      	cmp	r2, #9
 8001848:	d903      	bls.n	8001852 <_svfiprintf_r+0x1a6>
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0c6      	beq.n	80017dc <_svfiprintf_r+0x130>
 800184e:	9105      	str	r1, [sp, #20]
 8001850:	e7c4      	b.n	80017dc <_svfiprintf_r+0x130>
 8001852:	fb0c 2101 	mla	r1, ip, r1, r2
 8001856:	4604      	mov	r4, r0
 8001858:	2301      	movs	r3, #1
 800185a:	e7f0      	b.n	800183e <_svfiprintf_r+0x192>
 800185c:	ab03      	add	r3, sp, #12
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	462a      	mov	r2, r5
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <_svfiprintf_r+0x1f0>)
 8001864:	a904      	add	r1, sp, #16
 8001866:	4638      	mov	r0, r7
 8001868:	f3af 8000 	nop.w
 800186c:	1c42      	adds	r2, r0, #1
 800186e:	4606      	mov	r6, r0
 8001870:	d1d6      	bne.n	8001820 <_svfiprintf_r+0x174>
 8001872:	89ab      	ldrh	r3, [r5, #12]
 8001874:	065b      	lsls	r3, r3, #25
 8001876:	f53f af2d 	bmi.w	80016d4 <_svfiprintf_r+0x28>
 800187a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800187c:	e72c      	b.n	80016d8 <_svfiprintf_r+0x2c>
 800187e:	ab03      	add	r3, sp, #12
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	462a      	mov	r2, r5
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <_svfiprintf_r+0x1f0>)
 8001886:	a904      	add	r1, sp, #16
 8001888:	4638      	mov	r0, r7
 800188a:	f000 f9bb 	bl	8001c04 <_printf_i>
 800188e:	e7ed      	b.n	800186c <_svfiprintf_r+0x1c0>
 8001890:	08002268 	.word	0x08002268
 8001894:	08002272 	.word	0x08002272
 8001898:	00000000 	.word	0x00000000
 800189c:	080015f5 	.word	0x080015f5
 80018a0:	0800226e 	.word	0x0800226e

080018a4 <__sfputc_r>:
 80018a4:	6893      	ldr	r3, [r2, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	b410      	push	{r4}
 80018ac:	6093      	str	r3, [r2, #8]
 80018ae:	da08      	bge.n	80018c2 <__sfputc_r+0x1e>
 80018b0:	6994      	ldr	r4, [r2, #24]
 80018b2:	42a3      	cmp	r3, r4
 80018b4:	db01      	blt.n	80018ba <__sfputc_r+0x16>
 80018b6:	290a      	cmp	r1, #10
 80018b8:	d103      	bne.n	80018c2 <__sfputc_r+0x1e>
 80018ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018be:	f7ff bc90 	b.w	80011e2 <__swbuf_r>
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	6010      	str	r0, [r2, #0]
 80018c8:	7019      	strb	r1, [r3, #0]
 80018ca:	4608      	mov	r0, r1
 80018cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <__sfputs_r>:
 80018d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d4:	4606      	mov	r6, r0
 80018d6:	460f      	mov	r7, r1
 80018d8:	4614      	mov	r4, r2
 80018da:	18d5      	adds	r5, r2, r3
 80018dc:	42ac      	cmp	r4, r5
 80018de:	d101      	bne.n	80018e4 <__sfputs_r+0x12>
 80018e0:	2000      	movs	r0, #0
 80018e2:	e007      	b.n	80018f4 <__sfputs_r+0x22>
 80018e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018e8:	463a      	mov	r2, r7
 80018ea:	4630      	mov	r0, r6
 80018ec:	f7ff ffda 	bl	80018a4 <__sfputc_r>
 80018f0:	1c43      	adds	r3, r0, #1
 80018f2:	d1f3      	bne.n	80018dc <__sfputs_r+0xa>
 80018f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018f8 <_vfiprintf_r>:
 80018f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018fc:	460d      	mov	r5, r1
 80018fe:	b09d      	sub	sp, #116	@ 0x74
 8001900:	4614      	mov	r4, r2
 8001902:	4698      	mov	r8, r3
 8001904:	4606      	mov	r6, r0
 8001906:	b118      	cbz	r0, 8001910 <_vfiprintf_r+0x18>
 8001908:	6a03      	ldr	r3, [r0, #32]
 800190a:	b90b      	cbnz	r3, 8001910 <_vfiprintf_r+0x18>
 800190c:	f7ff fb58 	bl	8000fc0 <__sinit>
 8001910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001912:	07d9      	lsls	r1, r3, #31
 8001914:	d405      	bmi.n	8001922 <_vfiprintf_r+0x2a>
 8001916:	89ab      	ldrh	r3, [r5, #12]
 8001918:	059a      	lsls	r2, r3, #22
 800191a:	d402      	bmi.n	8001922 <_vfiprintf_r+0x2a>
 800191c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800191e:	f7ff fd6e 	bl	80013fe <__retarget_lock_acquire_recursive>
 8001922:	89ab      	ldrh	r3, [r5, #12]
 8001924:	071b      	lsls	r3, r3, #28
 8001926:	d501      	bpl.n	800192c <_vfiprintf_r+0x34>
 8001928:	692b      	ldr	r3, [r5, #16]
 800192a:	b99b      	cbnz	r3, 8001954 <_vfiprintf_r+0x5c>
 800192c:	4629      	mov	r1, r5
 800192e:	4630      	mov	r0, r6
 8001930:	f7ff fc96 	bl	8001260 <__swsetup_r>
 8001934:	b170      	cbz	r0, 8001954 <_vfiprintf_r+0x5c>
 8001936:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001938:	07dc      	lsls	r4, r3, #31
 800193a:	d504      	bpl.n	8001946 <_vfiprintf_r+0x4e>
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	b01d      	add	sp, #116	@ 0x74
 8001942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001946:	89ab      	ldrh	r3, [r5, #12]
 8001948:	0598      	lsls	r0, r3, #22
 800194a:	d4f7      	bmi.n	800193c <_vfiprintf_r+0x44>
 800194c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800194e:	f7ff fd57 	bl	8001400 <__retarget_lock_release_recursive>
 8001952:	e7f3      	b.n	800193c <_vfiprintf_r+0x44>
 8001954:	2300      	movs	r3, #0
 8001956:	9309      	str	r3, [sp, #36]	@ 0x24
 8001958:	2320      	movs	r3, #32
 800195a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800195e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001962:	2330      	movs	r3, #48	@ 0x30
 8001964:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001b14 <_vfiprintf_r+0x21c>
 8001968:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800196c:	f04f 0901 	mov.w	r9, #1
 8001970:	4623      	mov	r3, r4
 8001972:	469a      	mov	sl, r3
 8001974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001978:	b10a      	cbz	r2, 800197e <_vfiprintf_r+0x86>
 800197a:	2a25      	cmp	r2, #37	@ 0x25
 800197c:	d1f9      	bne.n	8001972 <_vfiprintf_r+0x7a>
 800197e:	ebba 0b04 	subs.w	fp, sl, r4
 8001982:	d00b      	beq.n	800199c <_vfiprintf_r+0xa4>
 8001984:	465b      	mov	r3, fp
 8001986:	4622      	mov	r2, r4
 8001988:	4629      	mov	r1, r5
 800198a:	4630      	mov	r0, r6
 800198c:	f7ff ffa1 	bl	80018d2 <__sfputs_r>
 8001990:	3001      	adds	r0, #1
 8001992:	f000 80a7 	beq.w	8001ae4 <_vfiprintf_r+0x1ec>
 8001996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001998:	445a      	add	r2, fp
 800199a:	9209      	str	r2, [sp, #36]	@ 0x24
 800199c:	f89a 3000 	ldrb.w	r3, [sl]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 809f 	beq.w	8001ae4 <_vfiprintf_r+0x1ec>
 80019a6:	2300      	movs	r3, #0
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80019b0:	f10a 0a01 	add.w	sl, sl, #1
 80019b4:	9304      	str	r3, [sp, #16]
 80019b6:	9307      	str	r3, [sp, #28]
 80019b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80019bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80019be:	4654      	mov	r4, sl
 80019c0:	2205      	movs	r2, #5
 80019c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019c6:	4853      	ldr	r0, [pc, #332]	@ (8001b14 <_vfiprintf_r+0x21c>)
 80019c8:	f7fe fc0a 	bl	80001e0 <memchr>
 80019cc:	9a04      	ldr	r2, [sp, #16]
 80019ce:	b9d8      	cbnz	r0, 8001a08 <_vfiprintf_r+0x110>
 80019d0:	06d1      	lsls	r1, r2, #27
 80019d2:	bf44      	itt	mi
 80019d4:	2320      	movmi	r3, #32
 80019d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019da:	0713      	lsls	r3, r2, #28
 80019dc:	bf44      	itt	mi
 80019de:	232b      	movmi	r3, #43	@ 0x2b
 80019e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019e4:	f89a 3000 	ldrb.w	r3, [sl]
 80019e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80019ea:	d015      	beq.n	8001a18 <_vfiprintf_r+0x120>
 80019ec:	9a07      	ldr	r2, [sp, #28]
 80019ee:	4654      	mov	r4, sl
 80019f0:	2000      	movs	r0, #0
 80019f2:	f04f 0c0a 	mov.w	ip, #10
 80019f6:	4621      	mov	r1, r4
 80019f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019fc:	3b30      	subs	r3, #48	@ 0x30
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d94b      	bls.n	8001a9a <_vfiprintf_r+0x1a2>
 8001a02:	b1b0      	cbz	r0, 8001a32 <_vfiprintf_r+0x13a>
 8001a04:	9207      	str	r2, [sp, #28]
 8001a06:	e014      	b.n	8001a32 <_vfiprintf_r+0x13a>
 8001a08:	eba0 0308 	sub.w	r3, r0, r8
 8001a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	9304      	str	r3, [sp, #16]
 8001a14:	46a2      	mov	sl, r4
 8001a16:	e7d2      	b.n	80019be <_vfiprintf_r+0xc6>
 8001a18:	9b03      	ldr	r3, [sp, #12]
 8001a1a:	1d19      	adds	r1, r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	9103      	str	r1, [sp, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bfbb      	ittet	lt
 8001a24:	425b      	neglt	r3, r3
 8001a26:	f042 0202 	orrlt.w	r2, r2, #2
 8001a2a:	9307      	strge	r3, [sp, #28]
 8001a2c:	9307      	strlt	r3, [sp, #28]
 8001a2e:	bfb8      	it	lt
 8001a30:	9204      	strlt	r2, [sp, #16]
 8001a32:	7823      	ldrb	r3, [r4, #0]
 8001a34:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a36:	d10a      	bne.n	8001a4e <_vfiprintf_r+0x156>
 8001a38:	7863      	ldrb	r3, [r4, #1]
 8001a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a3c:	d132      	bne.n	8001aa4 <_vfiprintf_r+0x1ac>
 8001a3e:	9b03      	ldr	r3, [sp, #12]
 8001a40:	1d1a      	adds	r2, r3, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	9203      	str	r2, [sp, #12]
 8001a46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a4a:	3402      	adds	r4, #2
 8001a4c:	9305      	str	r3, [sp, #20]
 8001a4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001b24 <_vfiprintf_r+0x22c>
 8001a52:	7821      	ldrb	r1, [r4, #0]
 8001a54:	2203      	movs	r2, #3
 8001a56:	4650      	mov	r0, sl
 8001a58:	f7fe fbc2 	bl	80001e0 <memchr>
 8001a5c:	b138      	cbz	r0, 8001a6e <_vfiprintf_r+0x176>
 8001a5e:	9b04      	ldr	r3, [sp, #16]
 8001a60:	eba0 000a 	sub.w	r0, r0, sl
 8001a64:	2240      	movs	r2, #64	@ 0x40
 8001a66:	4082      	lsls	r2, r0
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	3401      	adds	r4, #1
 8001a6c:	9304      	str	r3, [sp, #16]
 8001a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a72:	4829      	ldr	r0, [pc, #164]	@ (8001b18 <_vfiprintf_r+0x220>)
 8001a74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a78:	2206      	movs	r2, #6
 8001a7a:	f7fe fbb1 	bl	80001e0 <memchr>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d03f      	beq.n	8001b02 <_vfiprintf_r+0x20a>
 8001a82:	4b26      	ldr	r3, [pc, #152]	@ (8001b1c <_vfiprintf_r+0x224>)
 8001a84:	bb1b      	cbnz	r3, 8001ace <_vfiprintf_r+0x1d6>
 8001a86:	9b03      	ldr	r3, [sp, #12]
 8001a88:	3307      	adds	r3, #7
 8001a8a:	f023 0307 	bic.w	r3, r3, #7
 8001a8e:	3308      	adds	r3, #8
 8001a90:	9303      	str	r3, [sp, #12]
 8001a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a94:	443b      	add	r3, r7
 8001a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a98:	e76a      	b.n	8001970 <_vfiprintf_r+0x78>
 8001a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	e7a8      	b.n	80019f6 <_vfiprintf_r+0xfe>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	3401      	adds	r4, #1
 8001aa8:	9305      	str	r3, [sp, #20]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0c0a 	mov.w	ip, #10
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ab6:	3a30      	subs	r2, #48	@ 0x30
 8001ab8:	2a09      	cmp	r2, #9
 8001aba:	d903      	bls.n	8001ac4 <_vfiprintf_r+0x1cc>
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0c6      	beq.n	8001a4e <_vfiprintf_r+0x156>
 8001ac0:	9105      	str	r1, [sp, #20]
 8001ac2:	e7c4      	b.n	8001a4e <_vfiprintf_r+0x156>
 8001ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ac8:	4604      	mov	r4, r0
 8001aca:	2301      	movs	r3, #1
 8001acc:	e7f0      	b.n	8001ab0 <_vfiprintf_r+0x1b8>
 8001ace:	ab03      	add	r3, sp, #12
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	462a      	mov	r2, r5
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <_vfiprintf_r+0x228>)
 8001ad6:	a904      	add	r1, sp, #16
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f3af 8000 	nop.w
 8001ade:	4607      	mov	r7, r0
 8001ae0:	1c78      	adds	r0, r7, #1
 8001ae2:	d1d6      	bne.n	8001a92 <_vfiprintf_r+0x19a>
 8001ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ae6:	07d9      	lsls	r1, r3, #31
 8001ae8:	d405      	bmi.n	8001af6 <_vfiprintf_r+0x1fe>
 8001aea:	89ab      	ldrh	r3, [r5, #12]
 8001aec:	059a      	lsls	r2, r3, #22
 8001aee:	d402      	bmi.n	8001af6 <_vfiprintf_r+0x1fe>
 8001af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001af2:	f7ff fc85 	bl	8001400 <__retarget_lock_release_recursive>
 8001af6:	89ab      	ldrh	r3, [r5, #12]
 8001af8:	065b      	lsls	r3, r3, #25
 8001afa:	f53f af1f 	bmi.w	800193c <_vfiprintf_r+0x44>
 8001afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b00:	e71e      	b.n	8001940 <_vfiprintf_r+0x48>
 8001b02:	ab03      	add	r3, sp, #12
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	462a      	mov	r2, r5
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <_vfiprintf_r+0x228>)
 8001b0a:	a904      	add	r1, sp, #16
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f000 f879 	bl	8001c04 <_printf_i>
 8001b12:	e7e4      	b.n	8001ade <_vfiprintf_r+0x1e6>
 8001b14:	08002268 	.word	0x08002268
 8001b18:	08002272 	.word	0x08002272
 8001b1c:	00000000 	.word	0x00000000
 8001b20:	080018d3 	.word	0x080018d3
 8001b24:	0800226e 	.word	0x0800226e

08001b28 <_printf_common>:
 8001b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b2c:	4616      	mov	r6, r2
 8001b2e:	4698      	mov	r8, r3
 8001b30:	688a      	ldr	r2, [r1, #8]
 8001b32:	690b      	ldr	r3, [r1, #16]
 8001b34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	bfb8      	it	lt
 8001b3c:	4613      	movlt	r3, r2
 8001b3e:	6033      	str	r3, [r6, #0]
 8001b40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b44:	4607      	mov	r7, r0
 8001b46:	460c      	mov	r4, r1
 8001b48:	b10a      	cbz	r2, 8001b4e <_printf_common+0x26>
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	6033      	str	r3, [r6, #0]
 8001b4e:	6823      	ldr	r3, [r4, #0]
 8001b50:	0699      	lsls	r1, r3, #26
 8001b52:	bf42      	ittt	mi
 8001b54:	6833      	ldrmi	r3, [r6, #0]
 8001b56:	3302      	addmi	r3, #2
 8001b58:	6033      	strmi	r3, [r6, #0]
 8001b5a:	6825      	ldr	r5, [r4, #0]
 8001b5c:	f015 0506 	ands.w	r5, r5, #6
 8001b60:	d106      	bne.n	8001b70 <_printf_common+0x48>
 8001b62:	f104 0a19 	add.w	sl, r4, #25
 8001b66:	68e3      	ldr	r3, [r4, #12]
 8001b68:	6832      	ldr	r2, [r6, #0]
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	42ab      	cmp	r3, r5
 8001b6e:	dc26      	bgt.n	8001bbe <_printf_common+0x96>
 8001b70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b74:	6822      	ldr	r2, [r4, #0]
 8001b76:	3b00      	subs	r3, #0
 8001b78:	bf18      	it	ne
 8001b7a:	2301      	movne	r3, #1
 8001b7c:	0692      	lsls	r2, r2, #26
 8001b7e:	d42b      	bmi.n	8001bd8 <_printf_common+0xb0>
 8001b80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b84:	4641      	mov	r1, r8
 8001b86:	4638      	mov	r0, r7
 8001b88:	47c8      	blx	r9
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	d01e      	beq.n	8001bcc <_printf_common+0xa4>
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	6922      	ldr	r2, [r4, #16]
 8001b92:	f003 0306 	and.w	r3, r3, #6
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf02      	ittt	eq
 8001b9a:	68e5      	ldreq	r5, [r4, #12]
 8001b9c:	6833      	ldreq	r3, [r6, #0]
 8001b9e:	1aed      	subeq	r5, r5, r3
 8001ba0:	68a3      	ldr	r3, [r4, #8]
 8001ba2:	bf0c      	ite	eq
 8001ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ba8:	2500      	movne	r5, #0
 8001baa:	4293      	cmp	r3, r2
 8001bac:	bfc4      	itt	gt
 8001bae:	1a9b      	subgt	r3, r3, r2
 8001bb0:	18ed      	addgt	r5, r5, r3
 8001bb2:	2600      	movs	r6, #0
 8001bb4:	341a      	adds	r4, #26
 8001bb6:	42b5      	cmp	r5, r6
 8001bb8:	d11a      	bne.n	8001bf0 <_printf_common+0xc8>
 8001bba:	2000      	movs	r0, #0
 8001bbc:	e008      	b.n	8001bd0 <_printf_common+0xa8>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	4652      	mov	r2, sl
 8001bc2:	4641      	mov	r1, r8
 8001bc4:	4638      	mov	r0, r7
 8001bc6:	47c8      	blx	r9
 8001bc8:	3001      	adds	r0, #1
 8001bca:	d103      	bne.n	8001bd4 <_printf_common+0xac>
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bd4:	3501      	adds	r5, #1
 8001bd6:	e7c6      	b.n	8001b66 <_printf_common+0x3e>
 8001bd8:	18e1      	adds	r1, r4, r3
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	2030      	movs	r0, #48	@ 0x30
 8001bde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001be2:	4422      	add	r2, r4
 8001be4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bec:	3302      	adds	r3, #2
 8001bee:	e7c7      	b.n	8001b80 <_printf_common+0x58>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	4638      	mov	r0, r7
 8001bf8:	47c8      	blx	r9
 8001bfa:	3001      	adds	r0, #1
 8001bfc:	d0e6      	beq.n	8001bcc <_printf_common+0xa4>
 8001bfe:	3601      	adds	r6, #1
 8001c00:	e7d9      	b.n	8001bb6 <_printf_common+0x8e>
	...

08001c04 <_printf_i>:
 8001c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c08:	7e0f      	ldrb	r7, [r1, #24]
 8001c0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c0c:	2f78      	cmp	r7, #120	@ 0x78
 8001c0e:	4691      	mov	r9, r2
 8001c10:	4680      	mov	r8, r0
 8001c12:	460c      	mov	r4, r1
 8001c14:	469a      	mov	sl, r3
 8001c16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c1a:	d807      	bhi.n	8001c2c <_printf_i+0x28>
 8001c1c:	2f62      	cmp	r7, #98	@ 0x62
 8001c1e:	d80a      	bhi.n	8001c36 <_printf_i+0x32>
 8001c20:	2f00      	cmp	r7, #0
 8001c22:	f000 80d2 	beq.w	8001dca <_printf_i+0x1c6>
 8001c26:	2f58      	cmp	r7, #88	@ 0x58
 8001c28:	f000 80b9 	beq.w	8001d9e <_printf_i+0x19a>
 8001c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c34:	e03a      	b.n	8001cac <_printf_i+0xa8>
 8001c36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c3a:	2b15      	cmp	r3, #21
 8001c3c:	d8f6      	bhi.n	8001c2c <_printf_i+0x28>
 8001c3e:	a101      	add	r1, pc, #4	@ (adr r1, 8001c44 <_printf_i+0x40>)
 8001c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c44:	08001c9d 	.word	0x08001c9d
 8001c48:	08001cb1 	.word	0x08001cb1
 8001c4c:	08001c2d 	.word	0x08001c2d
 8001c50:	08001c2d 	.word	0x08001c2d
 8001c54:	08001c2d 	.word	0x08001c2d
 8001c58:	08001c2d 	.word	0x08001c2d
 8001c5c:	08001cb1 	.word	0x08001cb1
 8001c60:	08001c2d 	.word	0x08001c2d
 8001c64:	08001c2d 	.word	0x08001c2d
 8001c68:	08001c2d 	.word	0x08001c2d
 8001c6c:	08001c2d 	.word	0x08001c2d
 8001c70:	08001db1 	.word	0x08001db1
 8001c74:	08001cdb 	.word	0x08001cdb
 8001c78:	08001d6b 	.word	0x08001d6b
 8001c7c:	08001c2d 	.word	0x08001c2d
 8001c80:	08001c2d 	.word	0x08001c2d
 8001c84:	08001dd3 	.word	0x08001dd3
 8001c88:	08001c2d 	.word	0x08001c2d
 8001c8c:	08001cdb 	.word	0x08001cdb
 8001c90:	08001c2d 	.word	0x08001c2d
 8001c94:	08001c2d 	.word	0x08001c2d
 8001c98:	08001d73 	.word	0x08001d73
 8001c9c:	6833      	ldr	r3, [r6, #0]
 8001c9e:	1d1a      	adds	r2, r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6032      	str	r2, [r6, #0]
 8001ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ca8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cac:	2301      	movs	r3, #1
 8001cae:	e09d      	b.n	8001dec <_printf_i+0x1e8>
 8001cb0:	6833      	ldr	r3, [r6, #0]
 8001cb2:	6820      	ldr	r0, [r4, #0]
 8001cb4:	1d19      	adds	r1, r3, #4
 8001cb6:	6031      	str	r1, [r6, #0]
 8001cb8:	0606      	lsls	r6, r0, #24
 8001cba:	d501      	bpl.n	8001cc0 <_printf_i+0xbc>
 8001cbc:	681d      	ldr	r5, [r3, #0]
 8001cbe:	e003      	b.n	8001cc8 <_printf_i+0xc4>
 8001cc0:	0645      	lsls	r5, r0, #25
 8001cc2:	d5fb      	bpl.n	8001cbc <_printf_i+0xb8>
 8001cc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cc8:	2d00      	cmp	r5, #0
 8001cca:	da03      	bge.n	8001cd4 <_printf_i+0xd0>
 8001ccc:	232d      	movs	r3, #45	@ 0x2d
 8001cce:	426d      	negs	r5, r5
 8001cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cd4:	4859      	ldr	r0, [pc, #356]	@ (8001e3c <_printf_i+0x238>)
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	e011      	b.n	8001cfe <_printf_i+0xfa>
 8001cda:	6821      	ldr	r1, [r4, #0]
 8001cdc:	6833      	ldr	r3, [r6, #0]
 8001cde:	0608      	lsls	r0, r1, #24
 8001ce0:	f853 5b04 	ldr.w	r5, [r3], #4
 8001ce4:	d402      	bmi.n	8001cec <_printf_i+0xe8>
 8001ce6:	0649      	lsls	r1, r1, #25
 8001ce8:	bf48      	it	mi
 8001cea:	b2ad      	uxthmi	r5, r5
 8001cec:	2f6f      	cmp	r7, #111	@ 0x6f
 8001cee:	4853      	ldr	r0, [pc, #332]	@ (8001e3c <_printf_i+0x238>)
 8001cf0:	6033      	str	r3, [r6, #0]
 8001cf2:	bf14      	ite	ne
 8001cf4:	230a      	movne	r3, #10
 8001cf6:	2308      	moveq	r3, #8
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001cfe:	6866      	ldr	r6, [r4, #4]
 8001d00:	60a6      	str	r6, [r4, #8]
 8001d02:	2e00      	cmp	r6, #0
 8001d04:	bfa2      	ittt	ge
 8001d06:	6821      	ldrge	r1, [r4, #0]
 8001d08:	f021 0104 	bicge.w	r1, r1, #4
 8001d0c:	6021      	strge	r1, [r4, #0]
 8001d0e:	b90d      	cbnz	r5, 8001d14 <_printf_i+0x110>
 8001d10:	2e00      	cmp	r6, #0
 8001d12:	d04b      	beq.n	8001dac <_printf_i+0x1a8>
 8001d14:	4616      	mov	r6, r2
 8001d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8001d1e:	5dc7      	ldrb	r7, [r0, r7]
 8001d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d24:	462f      	mov	r7, r5
 8001d26:	42bb      	cmp	r3, r7
 8001d28:	460d      	mov	r5, r1
 8001d2a:	d9f4      	bls.n	8001d16 <_printf_i+0x112>
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d10b      	bne.n	8001d48 <_printf_i+0x144>
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	07df      	lsls	r7, r3, #31
 8001d34:	d508      	bpl.n	8001d48 <_printf_i+0x144>
 8001d36:	6923      	ldr	r3, [r4, #16]
 8001d38:	6861      	ldr	r1, [r4, #4]
 8001d3a:	4299      	cmp	r1, r3
 8001d3c:	bfde      	ittt	le
 8001d3e:	2330      	movle	r3, #48	@ 0x30
 8001d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d48:	1b92      	subs	r2, r2, r6
 8001d4a:	6122      	str	r2, [r4, #16]
 8001d4c:	f8cd a000 	str.w	sl, [sp]
 8001d50:	464b      	mov	r3, r9
 8001d52:	aa03      	add	r2, sp, #12
 8001d54:	4621      	mov	r1, r4
 8001d56:	4640      	mov	r0, r8
 8001d58:	f7ff fee6 	bl	8001b28 <_printf_common>
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	d14a      	bne.n	8001df6 <_printf_i+0x1f2>
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	b004      	add	sp, #16
 8001d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	f043 0320 	orr.w	r3, r3, #32
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	4833      	ldr	r0, [pc, #204]	@ (8001e40 <_printf_i+0x23c>)
 8001d74:	2778      	movs	r7, #120	@ 0x78
 8001d76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	6831      	ldr	r1, [r6, #0]
 8001d7e:	061f      	lsls	r7, r3, #24
 8001d80:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d84:	d402      	bmi.n	8001d8c <_printf_i+0x188>
 8001d86:	065f      	lsls	r7, r3, #25
 8001d88:	bf48      	it	mi
 8001d8a:	b2ad      	uxthmi	r5, r5
 8001d8c:	6031      	str	r1, [r6, #0]
 8001d8e:	07d9      	lsls	r1, r3, #31
 8001d90:	bf44      	itt	mi
 8001d92:	f043 0320 	orrmi.w	r3, r3, #32
 8001d96:	6023      	strmi	r3, [r4, #0]
 8001d98:	b11d      	cbz	r5, 8001da2 <_printf_i+0x19e>
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	e7ac      	b.n	8001cf8 <_printf_i+0xf4>
 8001d9e:	4827      	ldr	r0, [pc, #156]	@ (8001e3c <_printf_i+0x238>)
 8001da0:	e7e9      	b.n	8001d76 <_printf_i+0x172>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	f023 0320 	bic.w	r3, r3, #32
 8001da8:	6023      	str	r3, [r4, #0]
 8001daa:	e7f6      	b.n	8001d9a <_printf_i+0x196>
 8001dac:	4616      	mov	r6, r2
 8001dae:	e7bd      	b.n	8001d2c <_printf_i+0x128>
 8001db0:	6833      	ldr	r3, [r6, #0]
 8001db2:	6825      	ldr	r5, [r4, #0]
 8001db4:	6961      	ldr	r1, [r4, #20]
 8001db6:	1d18      	adds	r0, r3, #4
 8001db8:	6030      	str	r0, [r6, #0]
 8001dba:	062e      	lsls	r6, r5, #24
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	d501      	bpl.n	8001dc4 <_printf_i+0x1c0>
 8001dc0:	6019      	str	r1, [r3, #0]
 8001dc2:	e002      	b.n	8001dca <_printf_i+0x1c6>
 8001dc4:	0668      	lsls	r0, r5, #25
 8001dc6:	d5fb      	bpl.n	8001dc0 <_printf_i+0x1bc>
 8001dc8:	8019      	strh	r1, [r3, #0]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	6123      	str	r3, [r4, #16]
 8001dce:	4616      	mov	r6, r2
 8001dd0:	e7bc      	b.n	8001d4c <_printf_i+0x148>
 8001dd2:	6833      	ldr	r3, [r6, #0]
 8001dd4:	1d1a      	adds	r2, r3, #4
 8001dd6:	6032      	str	r2, [r6, #0]
 8001dd8:	681e      	ldr	r6, [r3, #0]
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4630      	mov	r0, r6
 8001de0:	f7fe f9fe 	bl	80001e0 <memchr>
 8001de4:	b108      	cbz	r0, 8001dea <_printf_i+0x1e6>
 8001de6:	1b80      	subs	r0, r0, r6
 8001de8:	6060      	str	r0, [r4, #4]
 8001dea:	6863      	ldr	r3, [r4, #4]
 8001dec:	6123      	str	r3, [r4, #16]
 8001dee:	2300      	movs	r3, #0
 8001df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001df4:	e7aa      	b.n	8001d4c <_printf_i+0x148>
 8001df6:	6923      	ldr	r3, [r4, #16]
 8001df8:	4632      	mov	r2, r6
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	4640      	mov	r0, r8
 8001dfe:	47d0      	blx	sl
 8001e00:	3001      	adds	r0, #1
 8001e02:	d0ad      	beq.n	8001d60 <_printf_i+0x15c>
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	079b      	lsls	r3, r3, #30
 8001e08:	d413      	bmi.n	8001e32 <_printf_i+0x22e>
 8001e0a:	68e0      	ldr	r0, [r4, #12]
 8001e0c:	9b03      	ldr	r3, [sp, #12]
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	bfb8      	it	lt
 8001e12:	4618      	movlt	r0, r3
 8001e14:	e7a6      	b.n	8001d64 <_printf_i+0x160>
 8001e16:	2301      	movs	r3, #1
 8001e18:	4632      	mov	r2, r6
 8001e1a:	4649      	mov	r1, r9
 8001e1c:	4640      	mov	r0, r8
 8001e1e:	47d0      	blx	sl
 8001e20:	3001      	adds	r0, #1
 8001e22:	d09d      	beq.n	8001d60 <_printf_i+0x15c>
 8001e24:	3501      	adds	r5, #1
 8001e26:	68e3      	ldr	r3, [r4, #12]
 8001e28:	9903      	ldr	r1, [sp, #12]
 8001e2a:	1a5b      	subs	r3, r3, r1
 8001e2c:	42ab      	cmp	r3, r5
 8001e2e:	dcf2      	bgt.n	8001e16 <_printf_i+0x212>
 8001e30:	e7eb      	b.n	8001e0a <_printf_i+0x206>
 8001e32:	2500      	movs	r5, #0
 8001e34:	f104 0619 	add.w	r6, r4, #25
 8001e38:	e7f5      	b.n	8001e26 <_printf_i+0x222>
 8001e3a:	bf00      	nop
 8001e3c:	08002279 	.word	0x08002279
 8001e40:	0800228a 	.word	0x0800228a

08001e44 <__sflush_r>:
 8001e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4c:	0716      	lsls	r6, r2, #28
 8001e4e:	4605      	mov	r5, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	d454      	bmi.n	8001efe <__sflush_r+0xba>
 8001e54:	684b      	ldr	r3, [r1, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	dc02      	bgt.n	8001e60 <__sflush_r+0x1c>
 8001e5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	dd48      	ble.n	8001ef2 <__sflush_r+0xae>
 8001e60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e62:	2e00      	cmp	r6, #0
 8001e64:	d045      	beq.n	8001ef2 <__sflush_r+0xae>
 8001e66:	2300      	movs	r3, #0
 8001e68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e6c:	682f      	ldr	r7, [r5, #0]
 8001e6e:	6a21      	ldr	r1, [r4, #32]
 8001e70:	602b      	str	r3, [r5, #0]
 8001e72:	d030      	beq.n	8001ed6 <__sflush_r+0x92>
 8001e74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e76:	89a3      	ldrh	r3, [r4, #12]
 8001e78:	0759      	lsls	r1, r3, #29
 8001e7a:	d505      	bpl.n	8001e88 <__sflush_r+0x44>
 8001e7c:	6863      	ldr	r3, [r4, #4]
 8001e7e:	1ad2      	subs	r2, r2, r3
 8001e80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e82:	b10b      	cbz	r3, 8001e88 <__sflush_r+0x44>
 8001e84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e8c:	6a21      	ldr	r1, [r4, #32]
 8001e8e:	4628      	mov	r0, r5
 8001e90:	47b0      	blx	r6
 8001e92:	1c43      	adds	r3, r0, #1
 8001e94:	89a3      	ldrh	r3, [r4, #12]
 8001e96:	d106      	bne.n	8001ea6 <__sflush_r+0x62>
 8001e98:	6829      	ldr	r1, [r5, #0]
 8001e9a:	291d      	cmp	r1, #29
 8001e9c:	d82b      	bhi.n	8001ef6 <__sflush_r+0xb2>
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <__sflush_r+0x104>)
 8001ea0:	410a      	asrs	r2, r1
 8001ea2:	07d6      	lsls	r6, r2, #31
 8001ea4:	d427      	bmi.n	8001ef6 <__sflush_r+0xb2>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	6062      	str	r2, [r4, #4]
 8001eaa:	04d9      	lsls	r1, r3, #19
 8001eac:	6922      	ldr	r2, [r4, #16]
 8001eae:	6022      	str	r2, [r4, #0]
 8001eb0:	d504      	bpl.n	8001ebc <__sflush_r+0x78>
 8001eb2:	1c42      	adds	r2, r0, #1
 8001eb4:	d101      	bne.n	8001eba <__sflush_r+0x76>
 8001eb6:	682b      	ldr	r3, [r5, #0]
 8001eb8:	b903      	cbnz	r3, 8001ebc <__sflush_r+0x78>
 8001eba:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ebe:	602f      	str	r7, [r5, #0]
 8001ec0:	b1b9      	cbz	r1, 8001ef2 <__sflush_r+0xae>
 8001ec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	d002      	beq.n	8001ed0 <__sflush_r+0x8c>
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f7ff fa9a 	bl	8001404 <_free_r>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ed4:	e00d      	b.n	8001ef2 <__sflush_r+0xae>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	4628      	mov	r0, r5
 8001eda:	47b0      	blx	r6
 8001edc:	4602      	mov	r2, r0
 8001ede:	1c50      	adds	r0, r2, #1
 8001ee0:	d1c9      	bne.n	8001e76 <__sflush_r+0x32>
 8001ee2:	682b      	ldr	r3, [r5, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0c6      	beq.n	8001e76 <__sflush_r+0x32>
 8001ee8:	2b1d      	cmp	r3, #29
 8001eea:	d001      	beq.n	8001ef0 <__sflush_r+0xac>
 8001eec:	2b16      	cmp	r3, #22
 8001eee:	d11e      	bne.n	8001f2e <__sflush_r+0xea>
 8001ef0:	602f      	str	r7, [r5, #0]
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	e022      	b.n	8001f3c <__sflush_r+0xf8>
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	e01b      	b.n	8001f36 <__sflush_r+0xf2>
 8001efe:	690f      	ldr	r7, [r1, #16]
 8001f00:	2f00      	cmp	r7, #0
 8001f02:	d0f6      	beq.n	8001ef2 <__sflush_r+0xae>
 8001f04:	0793      	lsls	r3, r2, #30
 8001f06:	680e      	ldr	r6, [r1, #0]
 8001f08:	bf08      	it	eq
 8001f0a:	694b      	ldreq	r3, [r1, #20]
 8001f0c:	600f      	str	r7, [r1, #0]
 8001f0e:	bf18      	it	ne
 8001f10:	2300      	movne	r3, #0
 8001f12:	eba6 0807 	sub.w	r8, r6, r7
 8001f16:	608b      	str	r3, [r1, #8]
 8001f18:	f1b8 0f00 	cmp.w	r8, #0
 8001f1c:	dde9      	ble.n	8001ef2 <__sflush_r+0xae>
 8001f1e:	6a21      	ldr	r1, [r4, #32]
 8001f20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001f22:	4643      	mov	r3, r8
 8001f24:	463a      	mov	r2, r7
 8001f26:	4628      	mov	r0, r5
 8001f28:	47b0      	blx	r6
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	dc08      	bgt.n	8001f40 <__sflush_r+0xfc>
 8001f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f36:	81a3      	strh	r3, [r4, #12]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f40:	4407      	add	r7, r0
 8001f42:	eba8 0800 	sub.w	r8, r8, r0
 8001f46:	e7e7      	b.n	8001f18 <__sflush_r+0xd4>
 8001f48:	dfbffffe 	.word	0xdfbffffe

08001f4c <_fflush_r>:
 8001f4c:	b538      	push	{r3, r4, r5, lr}
 8001f4e:	690b      	ldr	r3, [r1, #16]
 8001f50:	4605      	mov	r5, r0
 8001f52:	460c      	mov	r4, r1
 8001f54:	b913      	cbnz	r3, 8001f5c <_fflush_r+0x10>
 8001f56:	2500      	movs	r5, #0
 8001f58:	4628      	mov	r0, r5
 8001f5a:	bd38      	pop	{r3, r4, r5, pc}
 8001f5c:	b118      	cbz	r0, 8001f66 <_fflush_r+0x1a>
 8001f5e:	6a03      	ldr	r3, [r0, #32]
 8001f60:	b90b      	cbnz	r3, 8001f66 <_fflush_r+0x1a>
 8001f62:	f7ff f82d 	bl	8000fc0 <__sinit>
 8001f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f3      	beq.n	8001f56 <_fflush_r+0xa>
 8001f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f70:	07d0      	lsls	r0, r2, #31
 8001f72:	d404      	bmi.n	8001f7e <_fflush_r+0x32>
 8001f74:	0599      	lsls	r1, r3, #22
 8001f76:	d402      	bmi.n	8001f7e <_fflush_r+0x32>
 8001f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f7a:	f7ff fa40 	bl	80013fe <__retarget_lock_acquire_recursive>
 8001f7e:	4628      	mov	r0, r5
 8001f80:	4621      	mov	r1, r4
 8001f82:	f7ff ff5f 	bl	8001e44 <__sflush_r>
 8001f86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f88:	07da      	lsls	r2, r3, #31
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	d4e4      	bmi.n	8001f58 <_fflush_r+0xc>
 8001f8e:	89a3      	ldrh	r3, [r4, #12]
 8001f90:	059b      	lsls	r3, r3, #22
 8001f92:	d4e1      	bmi.n	8001f58 <_fflush_r+0xc>
 8001f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f96:	f7ff fa33 	bl	8001400 <__retarget_lock_release_recursive>
 8001f9a:	e7dd      	b.n	8001f58 <_fflush_r+0xc>

08001f9c <__swhatbuf_r>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	460c      	mov	r4, r1
 8001fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	b096      	sub	sp, #88	@ 0x58
 8001fa8:	4615      	mov	r5, r2
 8001faa:	461e      	mov	r6, r3
 8001fac:	da0d      	bge.n	8001fca <__swhatbuf_r+0x2e>
 8001fae:	89a3      	ldrh	r3, [r4, #12]
 8001fb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2340      	movne	r3, #64	@ 0x40
 8001fbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	6031      	str	r1, [r6, #0]
 8001fc4:	602b      	str	r3, [r5, #0]
 8001fc6:	b016      	add	sp, #88	@ 0x58
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	466a      	mov	r2, sp
 8001fcc:	f000 f896 	bl	80020fc <_fstat_r>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	dbec      	blt.n	8001fae <__swhatbuf_r+0x12>
 8001fd4:	9901      	ldr	r1, [sp, #4]
 8001fd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001fda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001fde:	4259      	negs	r1, r3
 8001fe0:	4159      	adcs	r1, r3
 8001fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fe6:	e7eb      	b.n	8001fc0 <__swhatbuf_r+0x24>

08001fe8 <__smakebuf_r>:
 8001fe8:	898b      	ldrh	r3, [r1, #12]
 8001fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fec:	079d      	lsls	r5, r3, #30
 8001fee:	4606      	mov	r6, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	d507      	bpl.n	8002004 <__smakebuf_r+0x1c>
 8001ff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ff8:	6023      	str	r3, [r4, #0]
 8001ffa:	6123      	str	r3, [r4, #16]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	6163      	str	r3, [r4, #20]
 8002000:	b003      	add	sp, #12
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002004:	ab01      	add	r3, sp, #4
 8002006:	466a      	mov	r2, sp
 8002008:	f7ff ffc8 	bl	8001f9c <__swhatbuf_r>
 800200c:	9f00      	ldr	r7, [sp, #0]
 800200e:	4605      	mov	r5, r0
 8002010:	4639      	mov	r1, r7
 8002012:	4630      	mov	r0, r6
 8002014:	f7ff fa62 	bl	80014dc <_malloc_r>
 8002018:	b948      	cbnz	r0, 800202e <__smakebuf_r+0x46>
 800201a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800201e:	059a      	lsls	r2, r3, #22
 8002020:	d4ee      	bmi.n	8002000 <__smakebuf_r+0x18>
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	81a3      	strh	r3, [r4, #12]
 800202c:	e7e2      	b.n	8001ff4 <__smakebuf_r+0xc>
 800202e:	89a3      	ldrh	r3, [r4, #12]
 8002030:	6020      	str	r0, [r4, #0]
 8002032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002036:	81a3      	strh	r3, [r4, #12]
 8002038:	9b01      	ldr	r3, [sp, #4]
 800203a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800203e:	b15b      	cbz	r3, 8002058 <__smakebuf_r+0x70>
 8002040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002044:	4630      	mov	r0, r6
 8002046:	f000 f86b 	bl	8002120 <_isatty_r>
 800204a:	b128      	cbz	r0, 8002058 <__smakebuf_r+0x70>
 800204c:	89a3      	ldrh	r3, [r4, #12]
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	81a3      	strh	r3, [r4, #12]
 8002058:	89a3      	ldrh	r3, [r4, #12]
 800205a:	431d      	orrs	r5, r3
 800205c:	81a5      	strh	r5, [r4, #12]
 800205e:	e7cf      	b.n	8002000 <__smakebuf_r+0x18>

08002060 <_putc_r>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	460d      	mov	r5, r1
 8002064:	4614      	mov	r4, r2
 8002066:	4606      	mov	r6, r0
 8002068:	b118      	cbz	r0, 8002072 <_putc_r+0x12>
 800206a:	6a03      	ldr	r3, [r0, #32]
 800206c:	b90b      	cbnz	r3, 8002072 <_putc_r+0x12>
 800206e:	f7fe ffa7 	bl	8000fc0 <__sinit>
 8002072:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002074:	07d8      	lsls	r0, r3, #31
 8002076:	d405      	bmi.n	8002084 <_putc_r+0x24>
 8002078:	89a3      	ldrh	r3, [r4, #12]
 800207a:	0599      	lsls	r1, r3, #22
 800207c:	d402      	bmi.n	8002084 <_putc_r+0x24>
 800207e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002080:	f7ff f9bd 	bl	80013fe <__retarget_lock_acquire_recursive>
 8002084:	68a3      	ldr	r3, [r4, #8]
 8002086:	3b01      	subs	r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	60a3      	str	r3, [r4, #8]
 800208c:	da05      	bge.n	800209a <_putc_r+0x3a>
 800208e:	69a2      	ldr	r2, [r4, #24]
 8002090:	4293      	cmp	r3, r2
 8002092:	db12      	blt.n	80020ba <_putc_r+0x5a>
 8002094:	b2eb      	uxtb	r3, r5
 8002096:	2b0a      	cmp	r3, #10
 8002098:	d00f      	beq.n	80020ba <_putc_r+0x5a>
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	6022      	str	r2, [r4, #0]
 80020a0:	701d      	strb	r5, [r3, #0]
 80020a2:	b2ed      	uxtb	r5, r5
 80020a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020a6:	07da      	lsls	r2, r3, #31
 80020a8:	d405      	bmi.n	80020b6 <_putc_r+0x56>
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	059b      	lsls	r3, r3, #22
 80020ae:	d402      	bmi.n	80020b6 <_putc_r+0x56>
 80020b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020b2:	f7ff f9a5 	bl	8001400 <__retarget_lock_release_recursive>
 80020b6:	4628      	mov	r0, r5
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
 80020ba:	4629      	mov	r1, r5
 80020bc:	4622      	mov	r2, r4
 80020be:	4630      	mov	r0, r6
 80020c0:	f7ff f88f 	bl	80011e2 <__swbuf_r>
 80020c4:	4605      	mov	r5, r0
 80020c6:	e7ed      	b.n	80020a4 <_putc_r+0x44>

080020c8 <memmove>:
 80020c8:	4288      	cmp	r0, r1
 80020ca:	b510      	push	{r4, lr}
 80020cc:	eb01 0402 	add.w	r4, r1, r2
 80020d0:	d902      	bls.n	80020d8 <memmove+0x10>
 80020d2:	4284      	cmp	r4, r0
 80020d4:	4623      	mov	r3, r4
 80020d6:	d807      	bhi.n	80020e8 <memmove+0x20>
 80020d8:	1e43      	subs	r3, r0, #1
 80020da:	42a1      	cmp	r1, r4
 80020dc:	d008      	beq.n	80020f0 <memmove+0x28>
 80020de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020e6:	e7f8      	b.n	80020da <memmove+0x12>
 80020e8:	4402      	add	r2, r0
 80020ea:	4601      	mov	r1, r0
 80020ec:	428a      	cmp	r2, r1
 80020ee:	d100      	bne.n	80020f2 <memmove+0x2a>
 80020f0:	bd10      	pop	{r4, pc}
 80020f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020fa:	e7f7      	b.n	80020ec <memmove+0x24>

080020fc <_fstat_r>:
 80020fc:	b538      	push	{r3, r4, r5, lr}
 80020fe:	4d07      	ldr	r5, [pc, #28]	@ (800211c <_fstat_r+0x20>)
 8002100:	2300      	movs	r3, #0
 8002102:	4604      	mov	r4, r0
 8002104:	4608      	mov	r0, r1
 8002106:	4611      	mov	r1, r2
 8002108:	602b      	str	r3, [r5, #0]
 800210a:	f7fe fe32 	bl	8000d72 <_fstat>
 800210e:	1c43      	adds	r3, r0, #1
 8002110:	d102      	bne.n	8002118 <_fstat_r+0x1c>
 8002112:	682b      	ldr	r3, [r5, #0]
 8002114:	b103      	cbz	r3, 8002118 <_fstat_r+0x1c>
 8002116:	6023      	str	r3, [r4, #0]
 8002118:	bd38      	pop	{r3, r4, r5, pc}
 800211a:	bf00      	nop
 800211c:	200001d8 	.word	0x200001d8

08002120 <_isatty_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4d06      	ldr	r5, [pc, #24]	@ (800213c <_isatty_r+0x1c>)
 8002124:	2300      	movs	r3, #0
 8002126:	4604      	mov	r4, r0
 8002128:	4608      	mov	r0, r1
 800212a:	602b      	str	r3, [r5, #0]
 800212c:	f7fe fe31 	bl	8000d92 <_isatty>
 8002130:	1c43      	adds	r3, r0, #1
 8002132:	d102      	bne.n	800213a <_isatty_r+0x1a>
 8002134:	682b      	ldr	r3, [r5, #0]
 8002136:	b103      	cbz	r3, 800213a <_isatty_r+0x1a>
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	bd38      	pop	{r3, r4, r5, pc}
 800213c:	200001d8 	.word	0x200001d8

08002140 <_sbrk_r>:
 8002140:	b538      	push	{r3, r4, r5, lr}
 8002142:	4d06      	ldr	r5, [pc, #24]	@ (800215c <_sbrk_r+0x1c>)
 8002144:	2300      	movs	r3, #0
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	602b      	str	r3, [r5, #0]
 800214c:	f7fe fe3a 	bl	8000dc4 <_sbrk>
 8002150:	1c43      	adds	r3, r0, #1
 8002152:	d102      	bne.n	800215a <_sbrk_r+0x1a>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	b103      	cbz	r3, 800215a <_sbrk_r+0x1a>
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	bd38      	pop	{r3, r4, r5, pc}
 800215c:	200001d8 	.word	0x200001d8

08002160 <memcpy>:
 8002160:	440a      	add	r2, r1
 8002162:	4291      	cmp	r1, r2
 8002164:	f100 33ff 	add.w	r3, r0, #4294967295
 8002168:	d100      	bne.n	800216c <memcpy+0xc>
 800216a:	4770      	bx	lr
 800216c:	b510      	push	{r4, lr}
 800216e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002176:	4291      	cmp	r1, r2
 8002178:	d1f9      	bne.n	800216e <memcpy+0xe>
 800217a:	bd10      	pop	{r4, pc}

0800217c <_realloc_r>:
 800217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002180:	4680      	mov	r8, r0
 8002182:	4615      	mov	r5, r2
 8002184:	460c      	mov	r4, r1
 8002186:	b921      	cbnz	r1, 8002192 <_realloc_r+0x16>
 8002188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800218c:	4611      	mov	r1, r2
 800218e:	f7ff b9a5 	b.w	80014dc <_malloc_r>
 8002192:	b92a      	cbnz	r2, 80021a0 <_realloc_r+0x24>
 8002194:	f7ff f936 	bl	8001404 <_free_r>
 8002198:	2400      	movs	r4, #0
 800219a:	4620      	mov	r0, r4
 800219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a0:	f000 f81a 	bl	80021d8 <_malloc_usable_size_r>
 80021a4:	4285      	cmp	r5, r0
 80021a6:	4606      	mov	r6, r0
 80021a8:	d802      	bhi.n	80021b0 <_realloc_r+0x34>
 80021aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80021ae:	d8f4      	bhi.n	800219a <_realloc_r+0x1e>
 80021b0:	4629      	mov	r1, r5
 80021b2:	4640      	mov	r0, r8
 80021b4:	f7ff f992 	bl	80014dc <_malloc_r>
 80021b8:	4607      	mov	r7, r0
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d0ec      	beq.n	8002198 <_realloc_r+0x1c>
 80021be:	42b5      	cmp	r5, r6
 80021c0:	462a      	mov	r2, r5
 80021c2:	4621      	mov	r1, r4
 80021c4:	bf28      	it	cs
 80021c6:	4632      	movcs	r2, r6
 80021c8:	f7ff ffca 	bl	8002160 <memcpy>
 80021cc:	4621      	mov	r1, r4
 80021ce:	4640      	mov	r0, r8
 80021d0:	f7ff f918 	bl	8001404 <_free_r>
 80021d4:	463c      	mov	r4, r7
 80021d6:	e7e0      	b.n	800219a <_realloc_r+0x1e>

080021d8 <_malloc_usable_size_r>:
 80021d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021dc:	1f18      	subs	r0, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bfbc      	itt	lt
 80021e2:	580b      	ldrlt	r3, [r1, r0]
 80021e4:	18c0      	addlt	r0, r0, r3
 80021e6:	4770      	bx	lr

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
