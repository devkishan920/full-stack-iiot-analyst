
RFID_RC523_LED_NAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800259c  0800259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002668  08002668  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002668  08002668  00003668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002670  08002670  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002670  08002670  00003670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002674  08002674  00003674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002678  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000005c  080026d4  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080026d4  000041e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000029df  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d22  00000000  00000000  00006a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000328  00000000  00000000  00007790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000234  00000000  00000000  00007ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001636a  00000000  00000000  00007cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005a2e  00000000  00000000  0001e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008447e  00000000  00000000  00023a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001404  00000000  00000000  000a7f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000a934c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002584 	.word	0x08002584

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002584 	.word	0x08002584

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <lcd_write_i2c>:
#include "stm32f4xx.h"
extern void delay(uint32_t ms);
#define SLAVE_ADDRESS_LCD (0x27) // change this according to ur setup

void lcd_write_i2c(char saddr, uint8_t *buffer, uint8_t length)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
    while (I2C1->SR2 & I2C_SR2_BUSY)
 8000290:	bf00      	nop
 8000292:	4b22      	ldr	r3, [pc, #136]	@ (800031c <lcd_write_i2c+0x9c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f003 0302 	and.w	r3, r3, #2
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1f9      	bne.n	8000292 <lcd_write_i2c+0x12>
        ;                       // wait until bus not busy
    I2C1->CR1 |= I2C_CR1_START; // generate start
 800029e:	4b1f      	ldr	r3, [pc, #124]	@ (800031c <lcd_write_i2c+0x9c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a1e      	ldr	r2, [pc, #120]	@ (800031c <lcd_write_i2c+0x9c>)
 80002a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a8:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB))
 80002aa:	bf00      	nop
 80002ac:	4b1b      	ldr	r3, [pc, #108]	@ (800031c <lcd_write_i2c+0x9c>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	f003 0301 	and.w	r3, r3, #1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0f9      	beq.n	80002ac <lcd_write_i2c+0x2c>
    {
        ;
    } // wait until start is generated
    volatile int Temp;
    I2C1->DR = saddr << 1; // Send slave address
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4a18      	ldr	r2, [pc, #96]	@ (800031c <lcd_write_i2c+0x9c>)
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR))
 80002c0:	bf00      	nop
 80002c2:	4b16      	ldr	r3, [pc, #88]	@ (800031c <lcd_write_i2c+0x9c>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <lcd_write_i2c+0x42>
    {
        ;
    } // wait until address flag is set
    Temp = I2C1->SR2; // Clear SR2
 80002ce:	4b13      	ldr	r3, [pc, #76]	@ (800031c <lcd_write_i2c+0x9c>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	60bb      	str	r3, [r7, #8]
    // sending the data
    for (uint8_t i = 0; i < length; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	73fb      	strb	r3, [r7, #15]
 80002d8:	e00f      	b.n	80002fa <lcd_write_i2c+0x7a>
    {
        I2C1->DR = buffer[i]; // filling buffer with command or data
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <lcd_write_i2c+0x9c>)
 80002e4:	611a      	str	r2, [r3, #16]
        while (!(I2C1->SR1 & I2C_SR1_BTF))
 80002e6:	bf00      	nop
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <lcd_write_i2c+0x9c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f003 0304 	and.w	r3, r3, #4
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0f9      	beq.n	80002e8 <lcd_write_i2c+0x68>
    for (uint8_t i = 0; i < length; i++)
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	7bfa      	ldrb	r2, [r7, #15]
 80002fc:	79bb      	ldrb	r3, [r7, #6]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d3eb      	bcc.n	80002da <lcd_write_i2c+0x5a>
            ;
    }

    I2C1->CR1 |= I2C_CR1_STOP; // wait until transfer finished
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <lcd_write_i2c+0x9c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a05      	ldr	r2, [pc, #20]	@ (800031c <lcd_write_i2c+0x9c>)
 8000308:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800030c:	6013      	str	r3, [r2, #0]
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40005400 	.word	0x40005400

08000320 <lcd_send_cmd>:

void lcd_send_cmd(char cmd)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f023 030f 	bic.w	r3, r3, #15
 8000330:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C; // en=1, rs=0
 8000338:	7bfb      	ldrb	r3, [r7, #15]
 800033a:	f043 030c 	orr.w	r3, r3, #12
 800033e:	b2db      	uxtb	r3, r3
 8000340:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08; // en=0, rs=0
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	f043 0308 	orr.w	r3, r3, #8
 8000348:	b2db      	uxtb	r3, r3
 800034a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C; // en=1, rs=0
 800034c:	7bbb      	ldrb	r3, [r7, #14]
 800034e:	f043 030c 	orr.w	r3, r3, #12
 8000352:	b2db      	uxtb	r3, r3
 8000354:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08; // en=0, rs=0
 8000356:	7bbb      	ldrb	r3, [r7, #14]
 8000358:	f043 0308 	orr.w	r3, r3, #8
 800035c:	b2db      	uxtb	r3, r3
 800035e:	72fb      	strb	r3, [r7, #11]
    lcd_write_i2c(SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	2204      	movs	r2, #4
 8000366:	4619      	mov	r1, r3
 8000368:	2027      	movs	r0, #39	@ 0x27
 800036a:	f7ff ff89 	bl	8000280 <lcd_write_i2c>
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	b084      	sub	sp, #16
 800037a:	af00      	add	r7, sp, #0
 800037c:	4603      	mov	r3, r0
 800037e:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f023 030f 	bic.w	r3, r3, #15
 8000386:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	011b      	lsls	r3, r3, #4
 800038c:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D; // en=1, rs=1
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	f043 030d 	orr.w	r3, r3, #13
 8000394:	b2db      	uxtb	r3, r3
 8000396:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09; // en=0, rs=1
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	f043 0309 	orr.w	r3, r3, #9
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D; // en=1, rs=1
 80003a2:	7bbb      	ldrb	r3, [r7, #14]
 80003a4:	f043 030d 	orr.w	r3, r3, #13
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09; // en=0, rs=1
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	f043 0309 	orr.w	r3, r3, #9
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	72fb      	strb	r3, [r7, #11]
    lcd_write_i2c(SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4);
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	2204      	movs	r2, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	2027      	movs	r0, #39	@ 0x27
 80003c0:	f7ff ff5e 	bl	8000280 <lcd_write_i2c>
}
 80003c4:	bf00      	nop
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <setCursor>:

void setCursor(int a, int b)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
    int i = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
    switch (b)
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d81b      	bhi.n	8000418 <setCursor+0x4c>
 80003e0:	a201      	add	r2, pc, #4	@ (adr r2, 80003e8 <setCursor+0x1c>)
 80003e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e6:	bf00      	nop
 80003e8:	080003f9 	.word	0x080003f9
 80003ec:	08000401 	.word	0x08000401
 80003f0:	08000409 	.word	0x08000409
 80003f4:	08000411 	.word	0x08000411
    {
    case 0:
        lcd_send_cmd(0x80);
 80003f8:	2080      	movs	r0, #128	@ 0x80
 80003fa:	f7ff ff91 	bl	8000320 <lcd_send_cmd>
        break;
 80003fe:	e00b      	b.n	8000418 <setCursor+0x4c>
    case 1:
        lcd_send_cmd(0xC0);
 8000400:	20c0      	movs	r0, #192	@ 0xc0
 8000402:	f7ff ff8d 	bl	8000320 <lcd_send_cmd>
        break;
 8000406:	e007      	b.n	8000418 <setCursor+0x4c>
    case 2:
        lcd_send_cmd(0x94);
 8000408:	2094      	movs	r0, #148	@ 0x94
 800040a:	f7ff ff89 	bl	8000320 <lcd_send_cmd>
        break;
 800040e:	e003      	b.n	8000418 <setCursor+0x4c>
    case 3:
        lcd_send_cmd(0xd4);
 8000410:	20d4      	movs	r0, #212	@ 0xd4
 8000412:	f7ff ff85 	bl	8000320 <lcd_send_cmd>
        break;
 8000416:	bf00      	nop
    }
    for (i = 0; i < a; i++)
 8000418:	2300      	movs	r3, #0
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	e005      	b.n	800042a <setCursor+0x5e>
        lcd_send_cmd(0x14);
 800041e:	2014      	movs	r0, #20
 8000420:	f7ff ff7e 	bl	8000320 <lcd_send_cmd>
    for (i = 0; i < a; i++)
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	3301      	adds	r3, #1
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	429a      	cmp	r2, r3
 8000430:	dbf5      	blt.n	800041e <setCursor+0x52>
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3710      	adds	r7, #16
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <lcd_send_string>:

void lcd_send_string(char *str)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
    while (*str)
 8000444:	e006      	b.n	8000454 <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	1c5a      	adds	r2, r3, #1
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff91 	bl	8000376 <lcd_send_data>
    while (*str)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f4      	bne.n	8000446 <lcd_send_string+0xa>
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}

08000466 <lcd_init>:
void lcd_init(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
    i2c_init();
 800046a:	f000 fb89 	bl	8000b80 <i2c_init>
    // 4 bit initialisation
    delay(50); // wait for >40ms
 800046e:	2032      	movs	r0, #50	@ 0x32
 8000470:	f000 fb72 	bl	8000b58 <delay>
    lcd_send_cmd(0x3);
 8000474:	2003      	movs	r0, #3
 8000476:	f7ff ff53 	bl	8000320 <lcd_send_cmd>
    delay(5); // wait for >4.1ms
 800047a:	2005      	movs	r0, #5
 800047c:	f000 fb6c 	bl	8000b58 <delay>
    lcd_send_cmd(0x3);
 8000480:	2003      	movs	r0, #3
 8000482:	f7ff ff4d 	bl	8000320 <lcd_send_cmd>
    delay(1); // wait for >100us
 8000486:	2001      	movs	r0, #1
 8000488:	f000 fb66 	bl	8000b58 <delay>
    lcd_send_cmd(0x3);
 800048c:	2003      	movs	r0, #3
 800048e:	f7ff ff47 	bl	8000320 <lcd_send_cmd>
    delay(10);
 8000492:	200a      	movs	r0, #10
 8000494:	f000 fb60 	bl	8000b58 <delay>
    lcd_send_cmd(0x2); // 4bit mode
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff ff41 	bl	8000320 <lcd_send_cmd>
    delay(10);
 800049e:	200a      	movs	r0, #10
 80004a0:	f000 fb5a 	bl	8000b58 <delay>

    // dislay initialisation
    lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80004a4:	2028      	movs	r0, #40	@ 0x28
 80004a6:	f7ff ff3b 	bl	8000320 <lcd_send_cmd>
    delay(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f000 fb54 	bl	8000b58 <delay>
    lcd_send_cmd(0x08); // Display on/off control --> D=0,C=0, B=0  ---> display off
 80004b0:	2008      	movs	r0, #8
 80004b2:	f7ff ff35 	bl	8000320 <lcd_send_cmd>
    delay(1);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fb4e 	bl	8000b58 <delay>
    lcd_send_cmd(0x01); // clear display
 80004bc:	2001      	movs	r0, #1
 80004be:	f7ff ff2f 	bl	8000320 <lcd_send_cmd>
    delay(1);
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fb48 	bl	8000b58 <delay>
    delay(1);
 80004c8:	2001      	movs	r0, #1
 80004ca:	f000 fb45 	bl	8000b58 <delay>
    lcd_send_cmd(0x06); // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80004ce:	2006      	movs	r0, #6
 80004d0:	f7ff ff26 	bl	8000320 <lcd_send_cmd>
    delay(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f000 fb3f 	bl	8000b58 <delay>
    lcd_send_cmd(0x0C); // Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80004da:	200c      	movs	r0, #12
 80004dc:	f7ff ff20 	bl	8000320 <lcd_send_cmd>
}
 80004e0:	bf00      	nop
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t *serNum);

void spi_cs_rfid_write(bool state)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
    if (state)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d006      	beq.n	8000502 <spi_cs_rfid_write+0x1e>
    {
        GPIOB->ODR |= (1UL << 0);
 80004f4:	4b09      	ldr	r3, [pc, #36]	@ (800051c <spi_cs_rfid_write+0x38>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a08      	ldr	r2, [pc, #32]	@ (800051c <spi_cs_rfid_write+0x38>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6153      	str	r3, [r2, #20]
    }
    else
    {
        GPIOB->ODR &= ~(1UL << 0);
    }
}
 8000500:	e005      	b.n	800050e <spi_cs_rfid_write+0x2a>
        GPIOB->ODR &= ~(1UL << 0);
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <spi_cs_rfid_write+0x38>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <spi_cs_rfid_write+0x38>)
 8000508:	f023 0301 	bic.w	r3, r3, #1
 800050c:	6153      	str	r3, [r2, #20]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40020400 	.word	0x40020400

08000520 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
    spi_cs_rfid_write(0);
 800052a:	2000      	movs	r0, #0
 800052c:	f7ff ffda 	bl	80004e4 <spi_cs_rfid_write>
    reg = ((reg << 1) & 0x7E) | 0x80;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	b25b      	sxtb	r3, r3
 8000536:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800053a:	b25b      	sxtb	r3, r3
 800053c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000540:	b25b      	sxtb	r3, r3
 8000542:	b2db      	uxtb	r3, r3
 8000544:	71fb      	strb	r3, [r7, #7]
    SPI_Transmit(&reg, 1);
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2101      	movs	r1, #1
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fc8e 	bl	8000e6c <SPI_Transmit>
    uint8_t dataRd = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	73fb      	strb	r3, [r7, #15]
    SPI_Receive(&dataRd, 1);
 8000554:	f107 030f 	add.w	r3, r7, #15
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fd0e 	bl	8000f7c <SPI_Receive>
    spi_cs_rfid_write(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff ffbf 	bl	80004e4 <spi_cs_rfid_write>
    return dataRd;
 8000566:	7bfb      	ldrb	r3, [r7, #15]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
    spi_cs_rfid_write(0);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ffaf 	bl	80004e4 <spi_cs_rfid_write>
    uint8_t txData[2] = {0x7E & (reg << 1), data8};
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000590:	b2db      	uxtb	r3, r3
 8000592:	733b      	strb	r3, [r7, #12]
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	737b      	strb	r3, [r7, #13]
    SPI_Transmit(txData, 2);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 fc64 	bl	8000e6c <SPI_Transmit>
    spi_cs_rfid_write(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f7ff ff9d 	bl	80004e4 <spi_cs_rfid_write>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	4603      	mov	r3, r0
 80005ba:	460a      	mov	r2, r1
 80005bc:	71fb      	strb	r3, [r7, #7]
 80005be:	4613      	mov	r3, r2
 80005c0:	71bb      	strb	r3, [r7, #6]
    rc522_regWrite8(reg, rc522_regRead8(reg) | mask);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ffab 	bl	8000520 <rc522_regRead8>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ffc9 	bl	8000570 <rc522_regWrite8>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	4603      	mov	r3, r0
 80005ee:	460a      	mov	r2, r1
 80005f0:	71fb      	strb	r3, [r7, #7]
 80005f2:	4613      	mov	r3, r2
 80005f4:	71bb      	strb	r3, [r7, #6]
    rc522_regWrite8(reg, rc522_regRead8(reg) & (~mask));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff91 	bl	8000520 <rc522_regRead8>
 80005fe:	4603      	mov	r3, r0
 8000600:	b25a      	sxtb	r2, r3
 8000602:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000606:	43db      	mvns	r3, r3
 8000608:	b25b      	sxtb	r3, r3
 800060a:	4013      	ands	r3, r2
 800060c:	b25b      	sxtb	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffab 	bl	8000570 <rc522_regWrite8>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
    rc522_regWrite8(0x01, 0x0F);
 8000626:	210f      	movs	r1, #15
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff ffa1 	bl	8000570 <rc522_regWrite8>
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}

08000632 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
    uint8_t temp;

    temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8000638:	2014      	movs	r0, #20
 800063a:	f7ff ff71 	bl	8000520 <rc522_regRead8>
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
    if (!(temp & 0x03))
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d103      	bne.n	8000654 <rc522_antennaON+0x22>
    {
        rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 800064c:	2103      	movs	r1, #3
 800064e:	2014      	movs	r0, #20
 8000650:	f7ff ffaf 	bl	80005b2 <rc522_setBit>
    }
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    bool status = false;
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
    // Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	2026      	movs	r0, #38	@ 0x26
 800066c:	f000 f811 	bl	8000692 <rc522_request>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
    if (status == true)
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d004      	beq.n	8000684 <rc522_checkCard+0x28>
    {
        // Card detected
        // Anti-collision, return card serial number 4 bytes
        status = rc522_antiColl(id);
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f91e 	bl	80008bc <rc522_antiColl>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt(); // Command card into hibernation
 8000684:	f000 f957 	bl	8000936 <rc522_halt>

    return status;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b086      	sub	sp, #24
 8000696:	af02      	add	r7, sp, #8
 8000698:	4603      	mov	r3, r0
 800069a:	6039      	str	r1, [r7, #0]
 800069c:	71fb      	strb	r3, [r7, #7]
    bool status = false;
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
    uint16_t backBits;
    rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 80006a2:	2107      	movs	r1, #7
 80006a4:	200d      	movs	r0, #13
 80006a6:	f7ff ff63 	bl	8000570 <rc522_regWrite8>
    tagType[0] = reqMode;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	79fa      	ldrb	r2, [r7, #7]
 80006ae:	701a      	strb	r2, [r3, #0]
    status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2201      	movs	r2, #1
 80006ba:	6839      	ldr	r1, [r7, #0]
 80006bc:	200c      	movs	r0, #12
 80006be:	f000 f813 	bl	80006e8 <rc522_toCard>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    if ((status != true) || (backBits != 0x10))
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <rc522_request+0x46>
 80006d2:	89bb      	ldrh	r3, [r7, #12]
 80006d4:	2b10      	cmp	r3, #16
 80006d6:	d001      	beq.n	80006dc <rc522_request+0x4a>
    {
        status = false;
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <rc522_toCard>:
    uint8_t command,
    uint8_t *sendData,
    uint8_t sendLen,
    uint8_t *backData,
    uint16_t *backLen)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
 80006f6:	4613      	mov	r3, r2
 80006f8:	73bb      	strb	r3, [r7, #14]
    bool status = false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 80006fe:	2300      	movs	r3, #0
 8000700:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8000702:	2300      	movs	r3, #0
 8000704:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint16_t i;

    switch (command)
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b0c      	cmp	r3, #12
 800070a:	d006      	beq.n	800071a <rc522_toCard+0x32>
 800070c:	2b0e      	cmp	r3, #14
 800070e:	d109      	bne.n	8000724 <rc522_toCard+0x3c>
    {
    case PCD_AUTHENT:
    {
        irqEn = 0x12;
 8000710:	2312      	movs	r3, #18
 8000712:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x10;
 8000714:	2310      	movs	r3, #16
 8000716:	777b      	strb	r3, [r7, #29]
        break;
 8000718:	e005      	b.n	8000726 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE:
    {
        irqEn = 0x77;
 800071a:	2377      	movs	r3, #119	@ 0x77
 800071c:	77bb      	strb	r3, [r7, #30]
        waitIRq = 0x30;
 800071e:	2330      	movs	r3, #48	@ 0x30
 8000720:	777b      	strb	r3, [r7, #29]
        break;
 8000722:	e000      	b.n	8000726 <rc522_toCard+0x3e>
    }
    default:
        break;
 8000724:	bf00      	nop
    }

    rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000726:	7fbb      	ldrb	r3, [r7, #30]
 8000728:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff ff1d 	bl	8000570 <rc522_regWrite8>
    rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8000736:	2180      	movs	r1, #128	@ 0x80
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff ff54 	bl	80005e6 <rc522_clearBit>
    rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	200a      	movs	r0, #10
 8000742:	f7ff ff36 	bl	80005b2 <rc522_setBit>

    rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8000746:	2100      	movs	r1, #0
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff ff11 	bl	8000570 <rc522_regWrite8>

    // Writing data to the FIFO
    for (i = 0; i < sendLen; i++)
 800074e:	2300      	movs	r3, #0
 8000750:	837b      	strh	r3, [r7, #26]
 8000752:	e00a      	b.n	800076a <rc522_toCard+0x82>
    {
        rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000754:	8b7b      	ldrh	r3, [r7, #26]
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	2009      	movs	r0, #9
 8000760:	f7ff ff06 	bl	8000570 <rc522_regWrite8>
    for (i = 0; i < sendLen; i++)
 8000764:	8b7b      	ldrh	r3, [r7, #26]
 8000766:	3301      	adds	r3, #1
 8000768:	837b      	strh	r3, [r7, #26]
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	b29b      	uxth	r3, r3
 800076e:	8b7a      	ldrh	r2, [r7, #26]
 8000770:	429a      	cmp	r2, r3
 8000772:	d3ef      	bcc.n	8000754 <rc522_toCard+0x6c>
    }

    // Execute the command
    rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4619      	mov	r1, r3
 8000778:	2001      	movs	r0, #1
 800077a:	f7ff fef9 	bl	8000570 <rc522_regWrite8>
    if (command == PCD_TRANSCEIVE)
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	d103      	bne.n	800078c <rc522_toCard+0xa4>
    {
        rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80); // StartSend=1,transmission of data starts
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	200d      	movs	r0, #13
 8000788:	f7ff ff13 	bl	80005b2 <rc522_setBit>
    }

    // Waiting to receive data to complete
    i = 100; // i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 800078c:	2364      	movs	r3, #100	@ 0x64
 800078e:	837b      	strh	r3, [r7, #26]
    do
    {
        // CommIrqReg[7..0]
        // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 8000790:	2004      	movs	r0, #4
 8000792:	f7ff fec5 	bl	8000520 <rc522_regRead8>
 8000796:	4603      	mov	r3, r0
 8000798:	773b      	strb	r3, [r7, #28]
        i--;
 800079a:	8b7b      	ldrh	r3, [r7, #26]
 800079c:	3b01      	subs	r3, #1
 800079e:	837b      	strh	r3, [r7, #26]
    } while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 80007a0:	8b7b      	ldrh	r3, [r7, #26]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00a      	beq.n	80007bc <rc522_toCard+0xd4>
 80007a6:	7f3b      	ldrb	r3, [r7, #28]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d105      	bne.n	80007bc <rc522_toCard+0xd4>
 80007b0:	7f3a      	ldrb	r2, [r7, #28]
 80007b2:	7f7b      	ldrb	r3, [r7, #29]
 80007b4:	4013      	ands	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0e9      	beq.n	8000790 <rc522_toCard+0xa8>

    rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80); // StartSend=0
 80007bc:	2180      	movs	r1, #128	@ 0x80
 80007be:	200d      	movs	r0, #13
 80007c0:	f7ff ff11 	bl	80005e6 <rc522_clearBit>

    if (i != 0)
 80007c4:	8b7b      	ldrh	r3, [r7, #26]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d06d      	beq.n	80008a6 <rc522_toCard+0x1be>
    {
        if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B))
 80007ca:	2006      	movs	r0, #6
 80007cc:	f7ff fea8 	bl	8000520 <rc522_regRead8>
 80007d0:	4603      	mov	r3, r0
 80007d2:	f003 031b 	and.w	r3, r3, #27
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d160      	bne.n	800089c <rc522_toCard+0x1b4>
        {
            status = true;
 80007da:	2301      	movs	r3, #1
 80007dc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80007de:	7f3a      	ldrb	r2, [r7, #28]
 80007e0:	7fbb      	ldrb	r3, [r7, #30]
 80007e2:	4013      	ands	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <rc522_toCard+0x10a>
            {
                status = false;
 80007ee:	2300      	movs	r3, #0
 80007f0:	77fb      	strb	r3, [r7, #31]
            }

            if (command == PCD_TRANSCEIVE)
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	2b0c      	cmp	r3, #12
 80007f6:	d156      	bne.n	80008a6 <rc522_toCard+0x1be>
            {
                n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 80007f8:	200a      	movs	r0, #10
 80007fa:	f7ff fe91 	bl	8000520 <rc522_regRead8>
 80007fe:	4603      	mov	r3, r0
 8000800:	773b      	strb	r3, [r7, #28]
                uint8_t l = n;
 8000802:	7f3b      	ldrb	r3, [r7, #28]
 8000804:	767b      	strb	r3, [r7, #25]
                lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8000806:	200c      	movs	r0, #12
 8000808:	f7ff fe8a 	bl	8000520 <rc522_regRead8>
 800080c:	4603      	mov	r3, r0
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	763b      	strb	r3, [r7, #24]
                if (lastBits)
 8000814:	7e3b      	ldrb	r3, [r7, #24]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d00b      	beq.n	8000832 <rc522_toCard+0x14a>
                {
                    *backLen = (n - 1) * 8 + lastBits;
 800081a:	7f3b      	ldrb	r3, [r7, #28]
 800081c:	3b01      	subs	r3, #1
 800081e:	b29b      	uxth	r3, r3
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	b29a      	uxth	r2, r3
 8000824:	7e3b      	ldrb	r3, [r7, #24]
 8000826:	b29b      	uxth	r3, r3
 8000828:	4413      	add	r3, r2
 800082a:	b29a      	uxth	r2, r3
 800082c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800082e:	801a      	strh	r2, [r3, #0]
 8000830:	e005      	b.n	800083e <rc522_toCard+0x156>
                }
                else
                {
                    *backLen = n * 8;
 8000832:	7f3b      	ldrb	r3, [r7, #28]
 8000834:	b29b      	uxth	r3, r3
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	b29a      	uxth	r2, r3
 800083a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800083c:	801a      	strh	r2, [r3, #0]
                }

                if (n == 0)
 800083e:	7f3b      	ldrb	r3, [r7, #28]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d101      	bne.n	8000848 <rc522_toCard+0x160>
                {
                    n = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	773b      	strb	r3, [r7, #28]
                }
                if (n > MFRC522_MAX_LEN)
 8000848:	7f3b      	ldrb	r3, [r7, #28]
 800084a:	2b10      	cmp	r3, #16
 800084c:	d901      	bls.n	8000852 <rc522_toCard+0x16a>
                {
                    n = MFRC522_MAX_LEN;
 800084e:	2310      	movs	r3, #16
 8000850:	773b      	strb	r3, [r7, #28]
                }

                // Reading the received data in FIFO
                for (i = 0; i < n; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	837b      	strh	r3, [r7, #26]
 8000856:	e014      	b.n	8000882 <rc522_toCard+0x19a>
                {
                    uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8000858:	2009      	movs	r0, #9
 800085a:	f7ff fe61 	bl	8000520 <rc522_regRead8>
 800085e:	4603      	mov	r3, r0
 8000860:	75fb      	strb	r3, [r7, #23]
                    if (l == 4)
 8000862:	7e7b      	ldrb	r3, [r7, #25]
 8000864:	2b04      	cmp	r3, #4
 8000866:	d104      	bne.n	8000872 <rc522_toCard+0x18a>
                        printf("%02x ", d);
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <rc522_toCard+0x1c8>)
 800086e:	f000 fdab 	bl	80013c8 <iprintf>
                    backData[i] = d;
 8000872:	8b7b      	ldrh	r3, [r7, #26]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	7dfa      	ldrb	r2, [r7, #23]
 800087a:	701a      	strb	r2, [r3, #0]
                for (i = 0; i < n; i++)
 800087c:	8b7b      	ldrh	r3, [r7, #26]
 800087e:	3301      	adds	r3, #1
 8000880:	837b      	strh	r3, [r7, #26]
 8000882:	7f3b      	ldrb	r3, [r7, #28]
 8000884:	b29b      	uxth	r3, r3
 8000886:	8b7a      	ldrh	r2, [r7, #26]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3e5      	bcc.n	8000858 <rc522_toCard+0x170>
                }
                if (l == 4)
 800088c:	7e7b      	ldrb	r3, [r7, #25]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d102      	bne.n	8000898 <rc522_toCard+0x1b0>
                    printf("\r\n");
 8000892:	4808      	ldr	r0, [pc, #32]	@ (80008b4 <rc522_toCard+0x1cc>)
 8000894:	f000 fe08 	bl	80014a8 <puts>
                return status;
 8000898:	7ffb      	ldrb	r3, [r7, #31]
 800089a:	e005      	b.n	80008a8 <rc522_toCard+0x1c0>
            }
        }
        else
        {
            printf("error\r\n");
 800089c:	4806      	ldr	r0, [pc, #24]	@ (80008b8 <rc522_toCard+0x1d0>)
 800089e:	f000 fe03 	bl	80014a8 <puts>
            status = false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	77fb      	strb	r3, [r7, #31]
        }
    }

    return status;
 80008a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800259c 	.word	0x0800259c
 80008b4:	080025a4 	.word	0x080025a4
 80008b8:	080025a8 	.word	0x080025a8

080008bc <rc522_antiColl>:

bool rc522_antiColl(uint8_t *serNum)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	6078      	str	r0, [r7, #4]
    bool status;
    uint8_t i;
    uint8_t serNumCheck = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	737b      	strb	r3, [r7, #13]
    uint16_t unLen;
    // for (i = 0; i < 4; i++)
    //    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);

    rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00); // TxLastBists = BitFramingReg[2..0]
 80008c8:	2100      	movs	r1, #0
 80008ca:	200d      	movs	r0, #13
 80008cc:	f7ff fe50 	bl	8000570 <rc522_regWrite8>

    serNum[0] = PICC_ANTICOLL;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2293      	movs	r2, #147	@ 0x93
 80008d4:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3301      	adds	r3, #1
 80008da:	2220      	movs	r2, #32
 80008dc:	701a      	strb	r2, [r3, #0]
    status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80008de:	f107 030a 	add.w	r3, r7, #10
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2202      	movs	r2, #2
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	200c      	movs	r0, #12
 80008ec:	f7ff fefc 	bl	80006e8 <rc522_toCard>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73fb      	strb	r3, [r7, #15]

    // for (i = 0; i < 4; i++)
    //      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

    if (status == true)
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d018      	beq.n	800092c <rc522_antiColl+0x70>
    {
        // Check card serial number
        for (i = 0; i < 4; i++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	73bb      	strb	r3, [r7, #14]
 80008fe:	e009      	b.n	8000914 <rc522_antiColl+0x58>
        {
            serNumCheck ^= serNum[i];
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	7b7b      	ldrb	r3, [r7, #13]
 800090a:	4053      	eors	r3, r2
 800090c:	737b      	strb	r3, [r7, #13]
        for (i = 0; i < 4; i++)
 800090e:	7bbb      	ldrb	r3, [r7, #14]
 8000910:	3301      	adds	r3, #1
 8000912:	73bb      	strb	r3, [r7, #14]
 8000914:	7bbb      	ldrb	r3, [r7, #14]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d9f2      	bls.n	8000900 <rc522_antiColl+0x44>
        }
        if (serNumCheck != serNum[i])
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	7b7a      	ldrb	r2, [r7, #13]
 8000924:	429a      	cmp	r2, r3
 8000926:	d001      	beq.n	800092c <rc522_antiColl+0x70>
        {
            status = false;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <rc522_halt>:

void rc522_halt(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b084      	sub	sp, #16
 800093a:	af02      	add	r7, sp, #8
    uint16_t unLen;
    uint8_t buff[4];

    buff[0] = PICC_HALT;
 800093c:	2350      	movs	r3, #80	@ 0x50
 800093e:	703b      	strb	r3, [r7, #0]
    buff[1] = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	707b      	strb	r3, [r7, #1]
    rc522_calculateCRC(buff, 2, &buff[2]);
 8000944:	463b      	mov	r3, r7
 8000946:	1c9a      	adds	r2, r3, #2
 8000948:	463b      	mov	r3, r7
 800094a:	2102      	movs	r1, #2
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f80d 	bl	800096c <rc522_calculateCRC>

    rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000952:	463a      	mov	r2, r7
 8000954:	4639      	mov	r1, r7
 8000956:	1dbb      	adds	r3, r7, #6
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	4613      	mov	r3, r2
 800095c:	2204      	movs	r2, #4
 800095e:	200c      	movs	r0, #12
 8000960:	f7ff fec2 	bl	80006e8 <rc522_toCard>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	460b      	mov	r3, r1
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	72fb      	strb	r3, [r7, #11]
    uint8_t i, n;

    rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);  // CRCIrq = 0
 800097a:	2104      	movs	r1, #4
 800097c:	2005      	movs	r0, #5
 800097e:	f7ff fe32 	bl	80005e6 <rc522_clearBit>
    rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80); // Clear the FIFO pointer
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	200a      	movs	r0, #10
 8000986:	f7ff fe14 	bl	80005b2 <rc522_setBit>
    // Write_MFRC522(CommandReg, PCD_IDLE);

    // Writing data to the FIFO
    for (i = 0; i < len; i++)
 800098a:	2300      	movs	r3, #0
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	e00a      	b.n	80009a6 <rc522_calculateCRC+0x3a>
    {
        rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata + i));
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	2009      	movs	r0, #9
 800099c:	f7ff fde8 	bl	8000570 <rc522_regWrite8>
    for (i = 0; i < len; i++)
 80009a0:	7dfb      	ldrb	r3, [r7, #23]
 80009a2:	3301      	adds	r3, #1
 80009a4:	75fb      	strb	r3, [r7, #23]
 80009a6:	7dfa      	ldrb	r2, [r7, #23]
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3f0      	bcc.n	8000990 <rc522_calculateCRC+0x24>
    }
    rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80009ae:	2103      	movs	r1, #3
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff fddd 	bl	8000570 <rc522_regWrite8>

    // Wait CRC calculation is complete
    i = 0xFF;
 80009b6:	23ff      	movs	r3, #255	@ 0xff
 80009b8:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 80009ba:	2005      	movs	r0, #5
 80009bc:	f7ff fdb0 	bl	8000520 <rc522_regRead8>
 80009c0:	4603      	mov	r3, r0
 80009c2:	75bb      	strb	r3, [r7, #22]
        i--;
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	75fb      	strb	r3, [r7, #23]
    } while ((i != 0) && !(n & 0x04)); // CRCIrq = 1
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <rc522_calculateCRC+0x6e>
 80009d0:	7dbb      	ldrb	r3, [r7, #22]
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d0ef      	beq.n	80009ba <rc522_calculateCRC+0x4e>

    // Read CRC calculation result
    pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 80009da:	2022      	movs	r0, #34	@ 0x22
 80009dc:	f7ff fda0 	bl	8000520 <rc522_regRead8>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	701a      	strb	r2, [r3, #0]
    pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	1c5c      	adds	r4, r3, #1
 80009ec:	2021      	movs	r0, #33	@ 0x21
 80009ee:	f7ff fd97 	bl	8000520 <rc522_regRead8>
 80009f2:	4603      	mov	r3, r0
 80009f4:	7023      	strb	r3, [r4, #0]
}
 80009f6:	bf00      	nop
 80009f8:	371c      	adds	r7, #28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd90      	pop	{r4, r7, pc}
	...

08000a00 <rc522_init>:
    }
    return true;
}

void rc522_init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
     * STM32 ->RFID
     * SPI  -> SPI
     * PA8  ->RST
     * PB0  ->CS
     * */
    SPI_Init();
 8000a06:	f000 f9f7 	bl	8000df8 <SPI_Init>
    GPIOA->MODER |= GPIO_MODER_MODE8_0;
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac0 <rc522_init+0xc0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac0 <rc522_init+0xc0>)
 8000a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a14:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~GPIO_MODER_MODE8_1;
 8000a16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac0 <rc522_init+0xc0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a29      	ldr	r2, [pc, #164]	@ (8000ac0 <rc522_init+0xc0>)
 8000a1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000a20:	6013      	str	r3, [r2, #0]

    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <rc522_init+0xc4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a27      	ldr	r2, [pc, #156]	@ (8000ac4 <rc522_init+0xc4>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOB->MODER |= GPIO_MODER_MODE0_0;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <rc522_init+0xc8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a25      	ldr	r2, [pc, #148]	@ (8000ac8 <rc522_init+0xc8>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~GPIO_MODER_MODE0_1;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <rc522_init+0xc8>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <rc522_init+0xc8>)
 8000a40:	f023 0302 	bic.w	r3, r3, #2
 8000a44:	6013      	str	r3, [r2, #0]
    GPIOA->BSRR = GPIO_BSRR_BR8;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <rc522_init+0xc0>)
 8000a48:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000a4c:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 100000; i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e002      	b.n	8000a5a <rc522_init+0x5a>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000acc <rc522_init+0xcc>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	ddf8      	ble.n	8000a54 <rc522_init+0x54>
        ;
    GPIOA->BSRR = GPIO_BSRR_BS8;
 8000a62:	4b17      	ldr	r3, [pc, #92]	@ (8000ac0 <rc522_init+0xc0>)
 8000a64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a68:	619a      	str	r2, [r3, #24]
    for (volatile int i = 0; i < 100000; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	603b      	str	r3, [r7, #0]
 8000a6e:	e002      	b.n	8000a76 <rc522_init+0x76>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <rc522_init+0xcc>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	ddf8      	ble.n	8000a70 <rc522_init+0x70>
        ;
    rc522_reset();
 8000a7e:	f7ff fdd0 	bl	8000622 <rc522_reset>

    rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	202a      	movs	r0, #42	@ 0x2a
 8000a86:	f7ff fd73 	bl	8000570 <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000a8a:	21a9      	movs	r1, #169	@ 0xa9
 8000a8c:	202b      	movs	r0, #43	@ 0x2b
 8000a8e:	f7ff fd6f 	bl	8000570 <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8000a92:	21e8      	movs	r1, #232	@ 0xe8
 8000a94:	202d      	movs	r0, #45	@ 0x2d
 8000a96:	f7ff fd6b 	bl	8000570 <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000a9a:	2103      	movs	r1, #3
 8000a9c:	202c      	movs	r0, #44	@ 0x2c
 8000a9e:	f7ff fd67 	bl	8000570 <rc522_regWrite8>

    rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8000aa2:	2140      	movs	r1, #64	@ 0x40
 8000aa4:	2015      	movs	r0, #21
 8000aa6:	f7ff fd63 	bl	8000570 <rc522_regWrite8>
    rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000aaa:	213d      	movs	r1, #61	@ 0x3d
 8000aac:	2011      	movs	r0, #17
 8000aae:	f7ff fd5f 	bl	8000570 <rc522_regWrite8>

    rc522_antennaON(); // Open the antenna
 8000ab2:	f7ff fdbe 	bl	8000632 <rc522_antennaON>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	0001869f 	.word	0x0001869f

08000ad0 <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header


volatile uint32_t ms,rms;
void systick_init_ms(uint32_t freq)
	{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <systick_init_ms+0x38>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	099b      	lsrs	r3, r3, #6
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <systick_init_ms+0x3c>)
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <systick_init_ms+0x3c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <systick_init_ms+0x3c>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000af8:	b662      	cpsie	i
}
 8000afa:	bf00      	nop
	__enable_irq();	
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	10624dd3 	.word	0x10624dd3
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <millis>:

uint32_t millis(void)
	{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <millis+0x24>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <millis+0x28>)
 8000b1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b20:	b662      	cpsie	i
}
 8000b22:	bf00      	nop
	__enable_irq();
	return rms;
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <millis+0x28>)
 8000b26:	681b      	ldr	r3, [r3, #0]
	}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000078 	.word	0x20000078
 8000b38:	2000007c 	.word	0x2000007c

08000b3c <SysTick_Handler>:

void SysTick_Handler(void){
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
//GPIOA->ODR^=GPIO_ODR_OD5;
ms++;
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <SysTick_Handler+0x18>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <SysTick_Handler+0x18>)
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20000078 	.word	0x20000078

08000b58 <delay>:

void delay(uint32_t ms)
	{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint32_t start=millis();
 8000b60:	f7ff ffd6 	bl	8000b10 <millis>
 8000b64:	60f8      	str	r0, [r7, #12]

	do{;}while(millis()-start<ms);
 8000b66:	f7ff ffd3 	bl	8000b10 <millis>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d8f7      	bhi.n	8000b66 <delay+0xe>


	}
 8000b76:	bf00      	nop
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <i2c_init>:
#include "i2c.h"
#include "stm32f4xx.h" // Device header
#include "stdio.h"

void i2c_init(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // enable gpiob clock
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <i2c_init+0x84>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <i2c_init+0x84>)
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // enable i2c1 clock
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <i2c_init+0x84>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b94:	4a1b      	ldr	r2, [pc, #108]	@ (8000c04 <i2c_init+0x84>)
 8000b96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    GPIOB->MODER |= 0xA0000;             // set pb8and9 to alternative function
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <i2c_init+0x88>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <i2c_init+0x88>)
 8000ba2:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000ba6:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] |= 0x44;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <i2c_init+0x88>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bac:	4a16      	ldr	r2, [pc, #88]	@ (8000c08 <i2c_init+0x88>)
 8000bae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000bb2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOB->OTYPER |= GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9; // set pb8 and pb9 as open drain
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <i2c_init+0x88>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <i2c_init+0x88>)
 8000bba:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000bbe:	6053      	str	r3, [r2, #4]

    I2C1->CR1 = 0x8000;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <i2c_init+0x8c>)
 8000bc2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bc6:	601a      	str	r2, [r3, #0]
    I2C1->CR1 &= ~0x8000;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <i2c_init+0x8c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c0c <i2c_init+0x8c>)
 8000bce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000bd2:	6013      	str	r3, [r2, #0]
    I2C1->CR2 |= 0x10;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <i2c_init+0x8c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <i2c_init+0x8c>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6053      	str	r3, [r2, #4]
    I2C1->CCR = 80; // standard 100KHz
 8000be0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <i2c_init+0x8c>)
 8000be2:	2250      	movs	r2, #80	@ 0x50
 8000be4:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 17;
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <i2c_init+0x8c>)
 8000be8:	2211      	movs	r2, #17
 8000bea:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= 0x1;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <i2c_init+0x8c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <i2c_init+0x8c>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40005400 	.word	0x40005400

08000c10 <main>:

uint8_t rfid_id[4];
char data[20];

int main(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af02      	add	r7, sp, #8
	// For LEDs
    RCC->AHB1ENR |= (1 << 0);
 8000c16:	4b6e      	ldr	r3, [pc, #440]	@ (8000dd0 <main+0x1c0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a6d      	ldr	r2, [pc, #436]	@ (8000dd0 <main+0x1c0>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER &= ~(0x3 << (2 * 4));
 8000c22:	4b6c      	ldr	r3, [pc, #432]	@ (8000dd4 <main+0x1c4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a6b      	ldr	r2, [pc, #428]	@ (8000dd4 <main+0x1c4>)
 8000c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c2c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (2 * 4));
 8000c2e:	4b69      	ldr	r3, [pc, #420]	@ (8000dd4 <main+0x1c4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a68      	ldr	r2, [pc, #416]	@ (8000dd4 <main+0x1c4>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c38:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(0x3 << (2 * 1));
 8000c3a:	4b66      	ldr	r3, [pc, #408]	@ (8000dd4 <main+0x1c4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a65      	ldr	r2, [pc, #404]	@ (8000dd4 <main+0x1c4>)
 8000c40:	f023 030c 	bic.w	r3, r3, #12
 8000c44:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (2 * 1));
 8000c46:	4b63      	ldr	r3, [pc, #396]	@ (8000dd4 <main+0x1c4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a62      	ldr	r2, [pc, #392]	@ (8000dd4 <main+0x1c4>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6013      	str	r3, [r2, #0]

    //     SysClockConfig();
    systick_init_ms(16000000);
 8000c52:	4861      	ldr	r0, [pc, #388]	@ (8000dd8 <main+0x1c8>)
 8000c54:	f7ff ff3c 	bl	8000ad0 <systick_init_ms>
    rc522_init();
 8000c58:	f7ff fed2 	bl	8000a00 <rc522_init>
    lcd_init();
 8000c5c:	f7ff fc03 	bl	8000466 <lcd_init>
    setCursor(0, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fbb2 	bl	80003cc <setCursor>
    lcd_send_string("TESTING RFID!");
 8000c68:	485c      	ldr	r0, [pc, #368]	@ (8000ddc <main+0x1cc>)
 8000c6a:	f7ff fbe7 	bl	800043c <lcd_send_string>
    setCursor(3, 1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fbab 	bl	80003cc <setCursor>
    lcd_send_string("with STM32F4");
 8000c76:	485a      	ldr	r0, [pc, #360]	@ (8000de0 <main+0x1d0>)
 8000c78:	f7ff fbe0 	bl	800043c <lcd_send_string>
    while (1)
    {
        if (rc522_checkCard(rfid_id))
 8000c7c:	4859      	ldr	r0, [pc, #356]	@ (8000de4 <main+0x1d4>)
 8000c7e:	f7ff fced 	bl	800065c <rc522_checkCard>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d016      	beq.n	8000cb6 <main+0xa6>
//            lcd_clear();
//            //	char data[20];
//            setCursor(0, 0);
//            lcd_send_string("RFID code is");
//            setCursor(0, 1);
            sprintf(data, "0x%x 0x%x 0x%x 0x%x", rfid_id[0], rfid_id[1], rfid_id[2], rfid_id[3]);
 8000c88:	4b56      	ldr	r3, [pc, #344]	@ (8000de4 <main+0x1d4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4b55      	ldr	r3, [pc, #340]	@ (8000de4 <main+0x1d4>)
 8000c90:	785b      	ldrb	r3, [r3, #1]
 8000c92:	4618      	mov	r0, r3
 8000c94:	4b53      	ldr	r3, [pc, #332]	@ (8000de4 <main+0x1d4>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b52      	ldr	r3, [pc, #328]	@ (8000de4 <main+0x1d4>)
 8000c9c:	78db      	ldrb	r3, [r3, #3]
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9200      	str	r2, [sp, #0]
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	4950      	ldr	r1, [pc, #320]	@ (8000de8 <main+0x1d8>)
 8000ca8:	4850      	ldr	r0, [pc, #320]	@ (8000dec <main+0x1dc>)
 8000caa:	f000 fc05 	bl	80014b8 <siprintf>
//            lcd_send_string(data);
            delay(1000);
 8000cae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cb2:	f7ff ff51 	bl	8000b58 <delay>
        }

        // prints RFIDs in console
        for (int i = 0; i < 20; i++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	e009      	b.n	8000cd0 <main+0xc0>
        {
            printf("%c", data[i]);
 8000cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8000dec <main+0x1dc>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fb91 	bl	80013ec <putchar>
        for (int i = 0; i < 20; i++)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b13      	cmp	r3, #19
 8000cd4:	ddf2      	ble.n	8000cbc <main+0xac>
        }
        delay(100);
 8000cd6:	2064      	movs	r0, #100	@ 0x64
 8000cd8:	f7ff ff3e 	bl	8000b58 <delay>
        printf("\n");
 8000cdc:	200a      	movs	r0, #10
 8000cde:	f000 fb85 	bl	80013ec <putchar>

        // Check if the RFID ID matches the specified ID
        if (rfid_id[0] == 0xc3 && rfid_id[1] == 0x95 && rfid_id[2] == 0x2d && rfid_id[3] == 0xda)
 8000ce2:	4b40      	ldr	r3, [pc, #256]	@ (8000de4 <main+0x1d4>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2bc3      	cmp	r3, #195	@ 0xc3
 8000ce8:	d130      	bne.n	8000d4c <main+0x13c>
 8000cea:	4b3e      	ldr	r3, [pc, #248]	@ (8000de4 <main+0x1d4>)
 8000cec:	785b      	ldrb	r3, [r3, #1]
 8000cee:	2b95      	cmp	r3, #149	@ 0x95
 8000cf0:	d12c      	bne.n	8000d4c <main+0x13c>
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8000de4 <main+0x1d4>)
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b2d      	cmp	r3, #45	@ 0x2d
 8000cf8:	d128      	bne.n	8000d4c <main+0x13c>
 8000cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <main+0x1d4>)
 8000cfc:	78db      	ldrb	r3, [r3, #3]
 8000cfe:	2bda      	cmp	r3, #218	@ 0xda
 8000d00:	d124      	bne.n	8000d4c <main+0x13c>
        {
            // Turn on the LED
            GPIOA->ODR |= (1 << 4);
 8000d02:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <main+0x1c4>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a33      	ldr	r2, [pc, #204]	@ (8000dd4 <main+0x1c4>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6153      	str	r3, [r2, #20]
            setCursor(0, 0);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fb5b 	bl	80003cc <setCursor>
            lcd_send_string("RFID A");
 8000d16:	4836      	ldr	r0, [pc, #216]	@ (8000df0 <main+0x1e0>)
 8000d18:	f7ff fb90 	bl	800043c <lcd_send_string>
            setCursor(0, 1);
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fb54 	bl	80003cc <setCursor>
            sprintf(data, "0x%x 0x%x 0x%x 0x%x", rfid_id[0], rfid_id[1], rfid_id[2], rfid_id[3]);
 8000d24:	4b2f      	ldr	r3, [pc, #188]	@ (8000de4 <main+0x1d4>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <main+0x1d4>)
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <main+0x1d4>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <main+0x1d4>)
 8000d38:	78db      	ldrb	r3, [r3, #3]
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	9200      	str	r2, [sp, #0]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	4929      	ldr	r1, [pc, #164]	@ (8000de8 <main+0x1d8>)
 8000d44:	4829      	ldr	r0, [pc, #164]	@ (8000dec <main+0x1dc>)
 8000d46:	f000 fbb7 	bl	80014b8 <siprintf>
 8000d4a:	e005      	b.n	8000d58 <main+0x148>

        }
        else
        {
            // Turn off the LED
            GPIOA->ODR &= ~(1 << 4);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <main+0x1c4>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	4a20      	ldr	r2, [pc, #128]	@ (8000dd4 <main+0x1c4>)
 8000d52:	f023 0310 	bic.w	r3, r3, #16
 8000d56:	6153      	str	r3, [r2, #20]
        }

        if (rfid_id[0] == 0x77 && rfid_id[1] == 0xb8 && rfid_id[2] == 0x1c && rfid_id[3] == 0x2f)
 8000d58:	4b22      	ldr	r3, [pc, #136]	@ (8000de4 <main+0x1d4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b77      	cmp	r3, #119	@ 0x77
 8000d5e:	d130      	bne.n	8000dc2 <main+0x1b2>
 8000d60:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <main+0x1d4>)
 8000d62:	785b      	ldrb	r3, [r3, #1]
 8000d64:	2bb8      	cmp	r3, #184	@ 0xb8
 8000d66:	d12c      	bne.n	8000dc2 <main+0x1b2>
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <main+0x1d4>)
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	2b1c      	cmp	r3, #28
 8000d6e:	d128      	bne.n	8000dc2 <main+0x1b2>
 8000d70:	4b1c      	ldr	r3, [pc, #112]	@ (8000de4 <main+0x1d4>)
 8000d72:	78db      	ldrb	r3, [r3, #3]
 8000d74:	2b2f      	cmp	r3, #47	@ 0x2f
 8000d76:	d124      	bne.n	8000dc2 <main+0x1b2>
        {
            // Turn on the LED
            GPIOA->ODR |= (1 << 1);
 8000d78:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <main+0x1c4>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <main+0x1c4>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6153      	str	r3, [r2, #20]
            setCursor(0, 0);
 8000d84:	2100      	movs	r1, #0
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fb20 	bl	80003cc <setCursor>
            lcd_send_string("RFID B");
 8000d8c:	4819      	ldr	r0, [pc, #100]	@ (8000df4 <main+0x1e4>)
 8000d8e:	f7ff fb55 	bl	800043c <lcd_send_string>
            setCursor(0, 1);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2000      	movs	r0, #0
 8000d96:	f7ff fb19 	bl	80003cc <setCursor>
            sprintf(data, "0x%x 0x%x 0x%x 0x%x", rfid_id[0], rfid_id[1], rfid_id[2], rfid_id[3]);
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <main+0x1d4>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <main+0x1d4>)
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	4618      	mov	r0, r3
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <main+0x1d4>)
 8000da8:	789b      	ldrb	r3, [r3, #2]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <main+0x1d4>)
 8000dae:	78db      	ldrb	r3, [r3, #3]
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	4603      	mov	r3, r0
 8000db6:	460a      	mov	r2, r1
 8000db8:	490b      	ldr	r1, [pc, #44]	@ (8000de8 <main+0x1d8>)
 8000dba:	480c      	ldr	r0, [pc, #48]	@ (8000dec <main+0x1dc>)
 8000dbc:	f000 fb7c 	bl	80014b8 <siprintf>
 8000dc0:	e005      	b.n	8000dce <main+0x1be>
        }
        else
        {
            // Turn off the LED
            GPIOA->ODR &= ~(1 << 1);
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <main+0x1c4>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a03      	ldr	r2, [pc, #12]	@ (8000dd4 <main+0x1c4>)
 8000dc8:	f023 0302 	bic.w	r3, r3, #2
 8000dcc:	6153      	str	r3, [r2, #20]
        if (rc522_checkCard(rfid_id))
 8000dce:	e755      	b.n	8000c7c <main+0x6c>
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	00f42400 	.word	0x00f42400
 8000ddc:	080025b0 	.word	0x080025b0
 8000de0:	080025c0 	.word	0x080025c0
 8000de4:	20000080 	.word	0x20000080
 8000de8:	080025d0 	.word	0x080025d0
 8000dec:	20000084 	.word	0x20000084
 8000df0:	080025e4 	.word	0x080025e4
 8000df4:	080025ec 	.word	0x080025ec

08000df8 <SPI_Init>:
#include "stdint.h"
#include "delay.h"
#include "stdio.h"

void SPI_Init(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
    #define AF5 0x05
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // enable clock forn gpio a
 8000dfc:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <SPI_Init+0x68>)
 8000dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e00:	4a17      	ldr	r2, [pc, #92]	@ (8000e60 <SPI_Init+0x68>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;  // enable clock for spi1
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <SPI_Init+0x68>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0c:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <SPI_Init+0x68>)
 8000e0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e12:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER |= GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1;
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <SPI_Init+0x6c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <SPI_Init+0x6c>)
 8000e1a:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 8000e1e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(GPIO_MODER_MODE5_0 | GPIO_MODER_MODE6_0 | GPIO_MODER_MODE7_0);
 8000e20:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <SPI_Init+0x6c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0f      	ldr	r2, [pc, #60]	@ (8000e64 <SPI_Init+0x6c>)
 8000e26:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 8000e2a:	6013      	str	r3, [r2, #0]

    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5 | GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR7;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e64 <SPI_Init+0x6c>)
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <SPI_Init+0x6c>)
 8000e32:	f443 437c 	orr.w	r3, r3, #64512	@ 0xfc00
 8000e36:	6093      	str	r3, [r2, #8]

    GPIOA->AFR[0] |= (AF5 << 20) | (AF5 << 24) | (AF5 << 28);
 8000e38:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <SPI_Init+0x6c>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a09      	ldr	r2, [pc, #36]	@ (8000e64 <SPI_Init+0x6c>)
 8000e3e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000e42:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000e46:	6213      	str	r3, [r2, #32]

    SPI1->CR2 = 0;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <SPI_Init+0x70>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
    SPI1->CR1 = SPI_CR1_SSM | SPI_CR1_MSTR | SPI_CR1_BR_2 | SPI_CR1_SSI | SPI_CR1_SPE;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SPI_Init+0x70>)
 8000e50:	f44f 7259 	mov.w	r2, #868	@ 0x364
 8000e54:	601a      	str	r2, [r3, #0]
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40013000 	.word	0x40013000

08000e6c <SPI_Transmit>:

int8_t SPI_Transmit(uint8_t *data, uint32_t size)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]

    uint32_t i = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
    uint8_t temp = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	74fb      	strb	r3, [r7, #19]
    uint32_t start = millis();
 8000e7e:	f7ff fe47 	bl	8000b10 <millis>
 8000e82:	60f8      	str	r0, [r7, #12]
    temp = SPI1->DR;
 8000e84:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	74fb      	strb	r3, [r7, #19]
    temp = SPI1->SR;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	74fb      	strb	r3, [r7, #19]
    while (i < size)
 8000e90:	e031      	b.n	8000ef6 <SPI_Transmit+0x8a>
    {
        while (!((SPI1->SR) & SPI_SR_TXE))
        {
            if (millis() - start > 1000)
 8000e92:	f7ff fe3d 	bl	8000b10 <millis>
 8000e96:	4602      	mov	r2, r0
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ea0:	d905      	bls.n	8000eae <SPI_Transmit+0x42>
            {
                printf("TXE timed out\r\n");
 8000ea2:	4832      	ldr	r0, [pc, #200]	@ (8000f6c <SPI_Transmit+0x100>)
 8000ea4:	f000 fb00 	bl	80014a8 <puts>
                return -1;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	e058      	b.n	8000f60 <SPI_Transmit+0xf4>
        while (!((SPI1->SR) & SPI_SR_TXE))
 8000eae:	4b2e      	ldr	r3, [pc, #184]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0eb      	beq.n	8000e92 <SPI_Transmit+0x26>
            }
        } // wait to transmision buffer to be emplty
        SPI1->DR = data[i];
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000ec4:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_BSY))
 8000ec6:	e00d      	b.n	8000ee4 <SPI_Transmit+0x78>
        {
            if (millis() - start > 1000)
 8000ec8:	f7ff fe22 	bl	8000b10 <millis>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ed6:	d905      	bls.n	8000ee4 <SPI_Transmit+0x78>
            {
                printf("BSY timed out\r\n");
 8000ed8:	4825      	ldr	r0, [pc, #148]	@ (8000f70 <SPI_Transmit+0x104>)
 8000eda:	f000 fae5 	bl	80014a8 <puts>
                return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e03d      	b.n	8000f60 <SPI_Transmit+0xf4>
        while (!(SPI1->SR & SPI_SR_BSY))
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0eb      	beq.n	8000ec8 <SPI_Transmit+0x5c>
            }
        }
        i++;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
    while (i < size)
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3d7      	bcc.n	8000eae <SPI_Transmit+0x42>
    }
    while (!((SPI1->SR) & SPI_SR_TXE))
 8000efe:	e00d      	b.n	8000f1c <SPI_Transmit+0xb0>
    {
        if (millis() - start > 1000)
 8000f00:	f7ff fe06 	bl	8000b10 <millis>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f0e:	d905      	bls.n	8000f1c <SPI_Transmit+0xb0>
        {
            printf("TXE2 time dout\r\n");
 8000f10:	4818      	ldr	r0, [pc, #96]	@ (8000f74 <SPI_Transmit+0x108>)
 8000f12:	f000 fac9 	bl	80014a8 <puts>
            return -1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	e021      	b.n	8000f60 <SPI_Transmit+0xf4>
    while (!((SPI1->SR) & SPI_SR_TXE))
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0eb      	beq.n	8000f00 <SPI_Transmit+0x94>
        }
    }
    while ((SPI1->SR) & SPI_SR_BSY)
 8000f28:	e00d      	b.n	8000f46 <SPI_Transmit+0xda>
    {
        if (millis() - start > 1000)
 8000f2a:	f7ff fdf1 	bl	8000b10 <millis>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f38:	d905      	bls.n	8000f46 <SPI_Transmit+0xda>
        {
            printf("BSY2 timed out\r\n");
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <SPI_Transmit+0x10c>)
 8000f3c:	f000 fab4 	bl	80014a8 <puts>
            return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
 8000f44:	e00c      	b.n	8000f60 <SPI_Transmit+0xf4>
    while ((SPI1->SR) & SPI_SR_BSY)
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1eb      	bne.n	8000f2a <SPI_Transmit+0xbe>
        }
    }
    temp = SPI1->DR;
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	74fb      	strb	r3, [r7, #19]
    temp = SPI1->SR;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <SPI_Transmit+0xfc>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	74fb      	strb	r3, [r7, #19]
    return 0;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	080025f4 	.word	0x080025f4
 8000f70:	08002604 	.word	0x08002604
 8000f74:	08002614 	.word	0x08002614
 8000f78:	08002624 	.word	0x08002624

08000f7c <SPI_Receive>:

int8_t SPI_Receive(uint8_t *data, uint32_t size)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    while (size)
 8000f86:	e020      	b.n	8000fca <SPI_Receive+0x4e>
    {
        uint32_t start = millis();
 8000f88:	f7ff fdc2 	bl	8000b10 <millis>
 8000f8c:	60f8      	str	r0, [r7, #12]
        SPI1->DR = 0;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <SPI_Receive+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
        while (!(SPI1->SR & SPI_SR_RXNE))
 8000f94:	e009      	b.n	8000faa <SPI_Receive+0x2e>
        {
            if (millis() - start > 200)
 8000f96:	f7ff fdbb 	bl	8000b10 <millis>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2bc8      	cmp	r3, #200	@ 0xc8
 8000fa2:	d902      	bls.n	8000faa <SPI_Receive+0x2e>
            {
                return -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa8:	e013      	b.n	8000fd2 <SPI_Receive+0x56>
        while (!(SPI1->SR & SPI_SR_RXNE))
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <SPI_Receive+0x60>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0ef      	beq.n	8000f96 <SPI_Receive+0x1a>
            }
        }
        *data++ = (SPI1->DR);
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <SPI_Receive+0x60>)
 8000fb8:	68d9      	ldr	r1, [r3, #12]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	b2ca      	uxtb	r2, r1
 8000fc2:	701a      	strb	r2, [r3, #0]
        size--;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	603b      	str	r3, [r7, #0]
    while (size)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1db      	bne.n	8000f88 <SPI_Receive+0xc>
    }
    return 0;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40013000 	.word	0x40013000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <ITM_SendChar>:
// ITM Register Addresses
#define ITM_STIMULUS_PORT0 *((volatile uint32_t *)0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t *)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    DEMCR |= (1 << 24); // Enable TRACENA
 800103e:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <ITM_SendChar+0x48>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a0e      	ldr	r2, [pc, #56]	@ (800107c <ITM_SendChar+0x48>)
 8001044:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001048:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1 << 0); // Enable Stimulus Port 0
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <ITM_SendChar+0x4c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a0c      	ldr	r2, [pc, #48]	@ (8001080 <ITM_SendChar+0x4c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6013      	str	r3, [r2, #0]

    while (!(ITM_STIMULUS_PORT0 & 1))
 8001056:	bf00      	nop
 8001058:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f8      	beq.n	8001058 <ITM_SendChar+0x24>
        ; // read FIFO Status in bit[0]

    ITM_STIMULUS_PORT0 = ch;
 8001066:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	6013      	str	r3, [r2, #0]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000edfc 	.word	0xe000edfc
 8001080:	e0000e00 	.word	0xe0000e00

08001084 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e009      	b.n	80010e4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
      ITM_SendChar(*ptr++);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ffab 	bl	8001034 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf1      	blt.n	80010d0 <_write+0x12>
  }
  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800111e:	605a      	str	r2, [r3, #4]
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f000 fad8 	bl	8001744 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20020000 	.word	0x20020000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000098 	.word	0x20000098
 80011c8:	200001e8 	.word	0x200001e8

080011cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480d      	ldr	r0, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f6:	490e      	ldr	r1, [pc, #56]	@ (8001230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0b      	ldr	r2, [pc, #44]	@ (8001238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800120c:	4c0b      	ldr	r4, [pc, #44]	@ (800123c <LoopFillZerobss+0x26>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800121a:	f7ff ffd7 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f000 fa97 	bl	8001750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001222:	f7ff fcf5 	bl	8000c10 <main>
  bx  lr    
 8001226:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001234:	08002678 	.word	0x08002678
  ldr r2, =_sbss
 8001238:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800123c:	200001e8 	.word	0x200001e8

08001240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC_IRQHandler>
	...

08001244 <std>:
 8001244:	2300      	movs	r3, #0
 8001246:	b510      	push	{r4, lr}
 8001248:	4604      	mov	r4, r0
 800124a:	e9c0 3300 	strd	r3, r3, [r0]
 800124e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001252:	6083      	str	r3, [r0, #8]
 8001254:	8181      	strh	r1, [r0, #12]
 8001256:	6643      	str	r3, [r0, #100]	@ 0x64
 8001258:	81c2      	strh	r2, [r0, #14]
 800125a:	6183      	str	r3, [r0, #24]
 800125c:	4619      	mov	r1, r3
 800125e:	2208      	movs	r2, #8
 8001260:	305c      	adds	r0, #92	@ 0x5c
 8001262:	f000 fa21 	bl	80016a8 <memset>
 8001266:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <std+0x58>)
 8001268:	6263      	str	r3, [r4, #36]	@ 0x24
 800126a:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <std+0x5c>)
 800126c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <std+0x60>)
 8001270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <std+0x64>)
 8001274:	6323      	str	r3, [r4, #48]	@ 0x30
 8001276:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <std+0x68>)
 8001278:	6224      	str	r4, [r4, #32]
 800127a:	429c      	cmp	r4, r3
 800127c:	d006      	beq.n	800128c <std+0x48>
 800127e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001282:	4294      	cmp	r4, r2
 8001284:	d002      	beq.n	800128c <std+0x48>
 8001286:	33d0      	adds	r3, #208	@ 0xd0
 8001288:	429c      	cmp	r4, r3
 800128a:	d105      	bne.n	8001298 <std+0x54>
 800128c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001294:	f000 ba80 	b.w	8001798 <__retarget_lock_init_recursive>
 8001298:	bd10      	pop	{r4, pc}
 800129a:	bf00      	nop
 800129c:	080014f9 	.word	0x080014f9
 80012a0:	0800151b 	.word	0x0800151b
 80012a4:	08001553 	.word	0x08001553
 80012a8:	08001577 	.word	0x08001577
 80012ac:	2000009c 	.word	0x2000009c

080012b0 <stdio_exit_handler>:
 80012b0:	4a02      	ldr	r2, [pc, #8]	@ (80012bc <stdio_exit_handler+0xc>)
 80012b2:	4903      	ldr	r1, [pc, #12]	@ (80012c0 <stdio_exit_handler+0x10>)
 80012b4:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <stdio_exit_handler+0x14>)
 80012b6:	f000 b869 	b.w	800138c <_fwalk_sglue>
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000
 80012c0:	080022e9 	.word	0x080022e9
 80012c4:	20000010 	.word	0x20000010

080012c8 <cleanup_stdio>:
 80012c8:	6841      	ldr	r1, [r0, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <cleanup_stdio+0x34>)
 80012cc:	4299      	cmp	r1, r3
 80012ce:	b510      	push	{r4, lr}
 80012d0:	4604      	mov	r4, r0
 80012d2:	d001      	beq.n	80012d8 <cleanup_stdio+0x10>
 80012d4:	f001 f808 	bl	80022e8 <_fflush_r>
 80012d8:	68a1      	ldr	r1, [r4, #8]
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <cleanup_stdio+0x38>)
 80012dc:	4299      	cmp	r1, r3
 80012de:	d002      	beq.n	80012e6 <cleanup_stdio+0x1e>
 80012e0:	4620      	mov	r0, r4
 80012e2:	f001 f801 	bl	80022e8 <_fflush_r>
 80012e6:	68e1      	ldr	r1, [r4, #12]
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <cleanup_stdio+0x3c>)
 80012ea:	4299      	cmp	r1, r3
 80012ec:	d004      	beq.n	80012f8 <cleanup_stdio+0x30>
 80012ee:	4620      	mov	r0, r4
 80012f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012f4:	f000 bff8 	b.w	80022e8 <_fflush_r>
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop
 80012fc:	2000009c 	.word	0x2000009c
 8001300:	20000104 	.word	0x20000104
 8001304:	2000016c 	.word	0x2000016c

08001308 <global_stdio_init.part.0>:
 8001308:	b510      	push	{r4, lr}
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <global_stdio_init.part.0+0x30>)
 800130c:	4c0b      	ldr	r4, [pc, #44]	@ (800133c <global_stdio_init.part.0+0x34>)
 800130e:	4a0c      	ldr	r2, [pc, #48]	@ (8001340 <global_stdio_init.part.0+0x38>)
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	4620      	mov	r0, r4
 8001314:	2200      	movs	r2, #0
 8001316:	2104      	movs	r1, #4
 8001318:	f7ff ff94 	bl	8001244 <std>
 800131c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001320:	2201      	movs	r2, #1
 8001322:	2109      	movs	r1, #9
 8001324:	f7ff ff8e 	bl	8001244 <std>
 8001328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800132c:	2202      	movs	r2, #2
 800132e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001332:	2112      	movs	r1, #18
 8001334:	f7ff bf86 	b.w	8001244 <std>
 8001338:	200001d4 	.word	0x200001d4
 800133c:	2000009c 	.word	0x2000009c
 8001340:	080012b1 	.word	0x080012b1

08001344 <__sfp_lock_acquire>:
 8001344:	4801      	ldr	r0, [pc, #4]	@ (800134c <__sfp_lock_acquire+0x8>)
 8001346:	f000 ba28 	b.w	800179a <__retarget_lock_acquire_recursive>
 800134a:	bf00      	nop
 800134c:	200001dd 	.word	0x200001dd

08001350 <__sfp_lock_release>:
 8001350:	4801      	ldr	r0, [pc, #4]	@ (8001358 <__sfp_lock_release+0x8>)
 8001352:	f000 ba23 	b.w	800179c <__retarget_lock_release_recursive>
 8001356:	bf00      	nop
 8001358:	200001dd 	.word	0x200001dd

0800135c <__sinit>:
 800135c:	b510      	push	{r4, lr}
 800135e:	4604      	mov	r4, r0
 8001360:	f7ff fff0 	bl	8001344 <__sfp_lock_acquire>
 8001364:	6a23      	ldr	r3, [r4, #32]
 8001366:	b11b      	cbz	r3, 8001370 <__sinit+0x14>
 8001368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800136c:	f7ff bff0 	b.w	8001350 <__sfp_lock_release>
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <__sinit+0x28>)
 8001372:	6223      	str	r3, [r4, #32]
 8001374:	4b04      	ldr	r3, [pc, #16]	@ (8001388 <__sinit+0x2c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f5      	bne.n	8001368 <__sinit+0xc>
 800137c:	f7ff ffc4 	bl	8001308 <global_stdio_init.part.0>
 8001380:	e7f2      	b.n	8001368 <__sinit+0xc>
 8001382:	bf00      	nop
 8001384:	080012c9 	.word	0x080012c9
 8001388:	200001d4 	.word	0x200001d4

0800138c <_fwalk_sglue>:
 800138c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001390:	4607      	mov	r7, r0
 8001392:	4688      	mov	r8, r1
 8001394:	4614      	mov	r4, r2
 8001396:	2600      	movs	r6, #0
 8001398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800139c:	f1b9 0901 	subs.w	r9, r9, #1
 80013a0:	d505      	bpl.n	80013ae <_fwalk_sglue+0x22>
 80013a2:	6824      	ldr	r4, [r4, #0]
 80013a4:	2c00      	cmp	r4, #0
 80013a6:	d1f7      	bne.n	8001398 <_fwalk_sglue+0xc>
 80013a8:	4630      	mov	r0, r6
 80013aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013ae:	89ab      	ldrh	r3, [r5, #12]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d907      	bls.n	80013c4 <_fwalk_sglue+0x38>
 80013b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80013b8:	3301      	adds	r3, #1
 80013ba:	d003      	beq.n	80013c4 <_fwalk_sglue+0x38>
 80013bc:	4629      	mov	r1, r5
 80013be:	4638      	mov	r0, r7
 80013c0:	47c0      	blx	r8
 80013c2:	4306      	orrs	r6, r0
 80013c4:	3568      	adds	r5, #104	@ 0x68
 80013c6:	e7e9      	b.n	800139c <_fwalk_sglue+0x10>

080013c8 <iprintf>:
 80013c8:	b40f      	push	{r0, r1, r2, r3}
 80013ca:	b507      	push	{r0, r1, r2, lr}
 80013cc:	4906      	ldr	r1, [pc, #24]	@ (80013e8 <iprintf+0x20>)
 80013ce:	ab04      	add	r3, sp, #16
 80013d0:	6808      	ldr	r0, [r1, #0]
 80013d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80013d6:	6881      	ldr	r1, [r0, #8]
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	f000 fc5b 	bl	8001c94 <_vfiprintf_r>
 80013de:	b003      	add	sp, #12
 80013e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80013e4:	b004      	add	sp, #16
 80013e6:	4770      	bx	lr
 80013e8:	2000000c 	.word	0x2000000c

080013ec <putchar>:
 80013ec:	4b02      	ldr	r3, [pc, #8]	@ (80013f8 <putchar+0xc>)
 80013ee:	4601      	mov	r1, r0
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	6882      	ldr	r2, [r0, #8]
 80013f4:	f001 b802 	b.w	80023fc <_putc_r>
 80013f8:	2000000c 	.word	0x2000000c

080013fc <_puts_r>:
 80013fc:	6a03      	ldr	r3, [r0, #32]
 80013fe:	b570      	push	{r4, r5, r6, lr}
 8001400:	6884      	ldr	r4, [r0, #8]
 8001402:	4605      	mov	r5, r0
 8001404:	460e      	mov	r6, r1
 8001406:	b90b      	cbnz	r3, 800140c <_puts_r+0x10>
 8001408:	f7ff ffa8 	bl	800135c <__sinit>
 800140c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800140e:	07db      	lsls	r3, r3, #31
 8001410:	d405      	bmi.n	800141e <_puts_r+0x22>
 8001412:	89a3      	ldrh	r3, [r4, #12]
 8001414:	0598      	lsls	r0, r3, #22
 8001416:	d402      	bmi.n	800141e <_puts_r+0x22>
 8001418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800141a:	f000 f9be 	bl	800179a <__retarget_lock_acquire_recursive>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	0719      	lsls	r1, r3, #28
 8001422:	d502      	bpl.n	800142a <_puts_r+0x2e>
 8001424:	6923      	ldr	r3, [r4, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d135      	bne.n	8001496 <_puts_r+0x9a>
 800142a:	4621      	mov	r1, r4
 800142c:	4628      	mov	r0, r5
 800142e:	f000 f8e5 	bl	80015fc <__swsetup_r>
 8001432:	b380      	cbz	r0, 8001496 <_puts_r+0x9a>
 8001434:	f04f 35ff 	mov.w	r5, #4294967295
 8001438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800143a:	07da      	lsls	r2, r3, #31
 800143c:	d405      	bmi.n	800144a <_puts_r+0x4e>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	059b      	lsls	r3, r3, #22
 8001442:	d402      	bmi.n	800144a <_puts_r+0x4e>
 8001444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001446:	f000 f9a9 	bl	800179c <__retarget_lock_release_recursive>
 800144a:	4628      	mov	r0, r5
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	2b00      	cmp	r3, #0
 8001450:	da04      	bge.n	800145c <_puts_r+0x60>
 8001452:	69a2      	ldr	r2, [r4, #24]
 8001454:	429a      	cmp	r2, r3
 8001456:	dc17      	bgt.n	8001488 <_puts_r+0x8c>
 8001458:	290a      	cmp	r1, #10
 800145a:	d015      	beq.n	8001488 <_puts_r+0x8c>
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	6022      	str	r2, [r4, #0]
 8001462:	7019      	strb	r1, [r3, #0]
 8001464:	68a3      	ldr	r3, [r4, #8]
 8001466:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800146a:	3b01      	subs	r3, #1
 800146c:	60a3      	str	r3, [r4, #8]
 800146e:	2900      	cmp	r1, #0
 8001470:	d1ed      	bne.n	800144e <_puts_r+0x52>
 8001472:	2b00      	cmp	r3, #0
 8001474:	da11      	bge.n	800149a <_puts_r+0x9e>
 8001476:	4622      	mov	r2, r4
 8001478:	210a      	movs	r1, #10
 800147a:	4628      	mov	r0, r5
 800147c:	f000 f87f 	bl	800157e <__swbuf_r>
 8001480:	3001      	adds	r0, #1
 8001482:	d0d7      	beq.n	8001434 <_puts_r+0x38>
 8001484:	250a      	movs	r5, #10
 8001486:	e7d7      	b.n	8001438 <_puts_r+0x3c>
 8001488:	4622      	mov	r2, r4
 800148a:	4628      	mov	r0, r5
 800148c:	f000 f877 	bl	800157e <__swbuf_r>
 8001490:	3001      	adds	r0, #1
 8001492:	d1e7      	bne.n	8001464 <_puts_r+0x68>
 8001494:	e7ce      	b.n	8001434 <_puts_r+0x38>
 8001496:	3e01      	subs	r6, #1
 8001498:	e7e4      	b.n	8001464 <_puts_r+0x68>
 800149a:	6823      	ldr	r3, [r4, #0]
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	6022      	str	r2, [r4, #0]
 80014a0:	220a      	movs	r2, #10
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e7ee      	b.n	8001484 <_puts_r+0x88>
	...

080014a8 <puts>:
 80014a8:	4b02      	ldr	r3, [pc, #8]	@ (80014b4 <puts+0xc>)
 80014aa:	4601      	mov	r1, r0
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f7ff bfa5 	b.w	80013fc <_puts_r>
 80014b2:	bf00      	nop
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <siprintf>:
 80014b8:	b40e      	push	{r1, r2, r3}
 80014ba:	b500      	push	{lr}
 80014bc:	b09c      	sub	sp, #112	@ 0x70
 80014be:	ab1d      	add	r3, sp, #116	@ 0x74
 80014c0:	9002      	str	r0, [sp, #8]
 80014c2:	9006      	str	r0, [sp, #24]
 80014c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80014c8:	4809      	ldr	r0, [pc, #36]	@ (80014f0 <siprintf+0x38>)
 80014ca:	9107      	str	r1, [sp, #28]
 80014cc:	9104      	str	r1, [sp, #16]
 80014ce:	4909      	ldr	r1, [pc, #36]	@ (80014f4 <siprintf+0x3c>)
 80014d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80014d4:	9105      	str	r1, [sp, #20]
 80014d6:	6800      	ldr	r0, [r0, #0]
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	a902      	add	r1, sp, #8
 80014dc:	f000 fab4 	bl	8001a48 <_svfiprintf_r>
 80014e0:	9b02      	ldr	r3, [sp, #8]
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	b01c      	add	sp, #112	@ 0x70
 80014e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80014ec:	b003      	add	sp, #12
 80014ee:	4770      	bx	lr
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	ffff0208 	.word	0xffff0208

080014f8 <__sread>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	460c      	mov	r4, r1
 80014fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001500:	f000 f8fc 	bl	80016fc <_read_r>
 8001504:	2800      	cmp	r0, #0
 8001506:	bfab      	itete	ge
 8001508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800150a:	89a3      	ldrhlt	r3, [r4, #12]
 800150c:	181b      	addge	r3, r3, r0
 800150e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001512:	bfac      	ite	ge
 8001514:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001516:	81a3      	strhlt	r3, [r4, #12]
 8001518:	bd10      	pop	{r4, pc}

0800151a <__swrite>:
 800151a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800151e:	461f      	mov	r7, r3
 8001520:	898b      	ldrh	r3, [r1, #12]
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	4605      	mov	r5, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4616      	mov	r6, r2
 800152a:	d505      	bpl.n	8001538 <__swrite+0x1e>
 800152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001530:	2302      	movs	r3, #2
 8001532:	2200      	movs	r2, #0
 8001534:	f000 f8d0 	bl	80016d8 <_lseek_r>
 8001538:	89a3      	ldrh	r3, [r4, #12]
 800153a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800153e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001542:	81a3      	strh	r3, [r4, #12]
 8001544:	4632      	mov	r2, r6
 8001546:	463b      	mov	r3, r7
 8001548:	4628      	mov	r0, r5
 800154a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800154e:	f000 b8e7 	b.w	8001720 <_write_r>

08001552 <__sseek>:
 8001552:	b510      	push	{r4, lr}
 8001554:	460c      	mov	r4, r1
 8001556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800155a:	f000 f8bd 	bl	80016d8 <_lseek_r>
 800155e:	1c43      	adds	r3, r0, #1
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	bf15      	itete	ne
 8001564:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800156a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800156e:	81a3      	strheq	r3, [r4, #12]
 8001570:	bf18      	it	ne
 8001572:	81a3      	strhne	r3, [r4, #12]
 8001574:	bd10      	pop	{r4, pc}

08001576 <__sclose>:
 8001576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800157a:	f000 b89d 	b.w	80016b8 <_close_r>

0800157e <__swbuf_r>:
 800157e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001580:	460e      	mov	r6, r1
 8001582:	4614      	mov	r4, r2
 8001584:	4605      	mov	r5, r0
 8001586:	b118      	cbz	r0, 8001590 <__swbuf_r+0x12>
 8001588:	6a03      	ldr	r3, [r0, #32]
 800158a:	b90b      	cbnz	r3, 8001590 <__swbuf_r+0x12>
 800158c:	f7ff fee6 	bl	800135c <__sinit>
 8001590:	69a3      	ldr	r3, [r4, #24]
 8001592:	60a3      	str	r3, [r4, #8]
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	071a      	lsls	r2, r3, #28
 8001598:	d501      	bpl.n	800159e <__swbuf_r+0x20>
 800159a:	6923      	ldr	r3, [r4, #16]
 800159c:	b943      	cbnz	r3, 80015b0 <__swbuf_r+0x32>
 800159e:	4621      	mov	r1, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f82b 	bl	80015fc <__swsetup_r>
 80015a6:	b118      	cbz	r0, 80015b0 <__swbuf_r+0x32>
 80015a8:	f04f 37ff 	mov.w	r7, #4294967295
 80015ac:	4638      	mov	r0, r7
 80015ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	6922      	ldr	r2, [r4, #16]
 80015b4:	1a98      	subs	r0, r3, r2
 80015b6:	6963      	ldr	r3, [r4, #20]
 80015b8:	b2f6      	uxtb	r6, r6
 80015ba:	4283      	cmp	r3, r0
 80015bc:	4637      	mov	r7, r6
 80015be:	dc05      	bgt.n	80015cc <__swbuf_r+0x4e>
 80015c0:	4621      	mov	r1, r4
 80015c2:	4628      	mov	r0, r5
 80015c4:	f000 fe90 	bl	80022e8 <_fflush_r>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1ed      	bne.n	80015a8 <__swbuf_r+0x2a>
 80015cc:	68a3      	ldr	r3, [r4, #8]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	60a3      	str	r3, [r4, #8]
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	6022      	str	r2, [r4, #0]
 80015d8:	701e      	strb	r6, [r3, #0]
 80015da:	6962      	ldr	r2, [r4, #20]
 80015dc:	1c43      	adds	r3, r0, #1
 80015de:	429a      	cmp	r2, r3
 80015e0:	d004      	beq.n	80015ec <__swbuf_r+0x6e>
 80015e2:	89a3      	ldrh	r3, [r4, #12]
 80015e4:	07db      	lsls	r3, r3, #31
 80015e6:	d5e1      	bpl.n	80015ac <__swbuf_r+0x2e>
 80015e8:	2e0a      	cmp	r6, #10
 80015ea:	d1df      	bne.n	80015ac <__swbuf_r+0x2e>
 80015ec:	4621      	mov	r1, r4
 80015ee:	4628      	mov	r0, r5
 80015f0:	f000 fe7a 	bl	80022e8 <_fflush_r>
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d0d9      	beq.n	80015ac <__swbuf_r+0x2e>
 80015f8:	e7d6      	b.n	80015a8 <__swbuf_r+0x2a>
	...

080015fc <__swsetup_r>:
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <__swsetup_r+0xa8>)
 8001600:	4605      	mov	r5, r0
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	460c      	mov	r4, r1
 8001606:	b118      	cbz	r0, 8001610 <__swsetup_r+0x14>
 8001608:	6a03      	ldr	r3, [r0, #32]
 800160a:	b90b      	cbnz	r3, 8001610 <__swsetup_r+0x14>
 800160c:	f7ff fea6 	bl	800135c <__sinit>
 8001610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001614:	0719      	lsls	r1, r3, #28
 8001616:	d422      	bmi.n	800165e <__swsetup_r+0x62>
 8001618:	06da      	lsls	r2, r3, #27
 800161a:	d407      	bmi.n	800162c <__swsetup_r+0x30>
 800161c:	2209      	movs	r2, #9
 800161e:	602a      	str	r2, [r5, #0]
 8001620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001624:	81a3      	strh	r3, [r4, #12]
 8001626:	f04f 30ff 	mov.w	r0, #4294967295
 800162a:	e033      	b.n	8001694 <__swsetup_r+0x98>
 800162c:	0758      	lsls	r0, r3, #29
 800162e:	d512      	bpl.n	8001656 <__swsetup_r+0x5a>
 8001630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001632:	b141      	cbz	r1, 8001646 <__swsetup_r+0x4a>
 8001634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001638:	4299      	cmp	r1, r3
 800163a:	d002      	beq.n	8001642 <__swsetup_r+0x46>
 800163c:	4628      	mov	r0, r5
 800163e:	f000 f8af 	bl	80017a0 <_free_r>
 8001642:	2300      	movs	r3, #0
 8001644:	6363      	str	r3, [r4, #52]	@ 0x34
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800164c:	81a3      	strh	r3, [r4, #12]
 800164e:	2300      	movs	r3, #0
 8001650:	6063      	str	r3, [r4, #4]
 8001652:	6923      	ldr	r3, [r4, #16]
 8001654:	6023      	str	r3, [r4, #0]
 8001656:	89a3      	ldrh	r3, [r4, #12]
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	81a3      	strh	r3, [r4, #12]
 800165e:	6923      	ldr	r3, [r4, #16]
 8001660:	b94b      	cbnz	r3, 8001676 <__swsetup_r+0x7a>
 8001662:	89a3      	ldrh	r3, [r4, #12]
 8001664:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800166c:	d003      	beq.n	8001676 <__swsetup_r+0x7a>
 800166e:	4621      	mov	r1, r4
 8001670:	4628      	mov	r0, r5
 8001672:	f000 fe87 	bl	8002384 <__smakebuf_r>
 8001676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800167a:	f013 0201 	ands.w	r2, r3, #1
 800167e:	d00a      	beq.n	8001696 <__swsetup_r+0x9a>
 8001680:	2200      	movs	r2, #0
 8001682:	60a2      	str	r2, [r4, #8]
 8001684:	6962      	ldr	r2, [r4, #20]
 8001686:	4252      	negs	r2, r2
 8001688:	61a2      	str	r2, [r4, #24]
 800168a:	6922      	ldr	r2, [r4, #16]
 800168c:	b942      	cbnz	r2, 80016a0 <__swsetup_r+0xa4>
 800168e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001692:	d1c5      	bne.n	8001620 <__swsetup_r+0x24>
 8001694:	bd38      	pop	{r3, r4, r5, pc}
 8001696:	0799      	lsls	r1, r3, #30
 8001698:	bf58      	it	pl
 800169a:	6962      	ldrpl	r2, [r4, #20]
 800169c:	60a2      	str	r2, [r4, #8]
 800169e:	e7f4      	b.n	800168a <__swsetup_r+0x8e>
 80016a0:	2000      	movs	r0, #0
 80016a2:	e7f7      	b.n	8001694 <__swsetup_r+0x98>
 80016a4:	2000000c 	.word	0x2000000c

080016a8 <memset>:
 80016a8:	4402      	add	r2, r0
 80016aa:	4603      	mov	r3, r0
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d100      	bne.n	80016b2 <memset+0xa>
 80016b0:	4770      	bx	lr
 80016b2:	f803 1b01 	strb.w	r1, [r3], #1
 80016b6:	e7f9      	b.n	80016ac <memset+0x4>

080016b8 <_close_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d06      	ldr	r5, [pc, #24]	@ (80016d4 <_close_r+0x1c>)
 80016bc:	2300      	movs	r3, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	f7ff fd17 	bl	80010f6 <_close>
 80016c8:	1c43      	adds	r3, r0, #1
 80016ca:	d102      	bne.n	80016d2 <_close_r+0x1a>
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	b103      	cbz	r3, 80016d2 <_close_r+0x1a>
 80016d0:	6023      	str	r3, [r4, #0]
 80016d2:	bd38      	pop	{r3, r4, r5, pc}
 80016d4:	200001d8 	.word	0x200001d8

080016d8 <_lseek_r>:
 80016d8:	b538      	push	{r3, r4, r5, lr}
 80016da:	4d07      	ldr	r5, [pc, #28]	@ (80016f8 <_lseek_r+0x20>)
 80016dc:	4604      	mov	r4, r0
 80016de:	4608      	mov	r0, r1
 80016e0:	4611      	mov	r1, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	602a      	str	r2, [r5, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	f7ff fd2c 	bl	8001144 <_lseek>
 80016ec:	1c43      	adds	r3, r0, #1
 80016ee:	d102      	bne.n	80016f6 <_lseek_r+0x1e>
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	b103      	cbz	r3, 80016f6 <_lseek_r+0x1e>
 80016f4:	6023      	str	r3, [r4, #0]
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	200001d8 	.word	0x200001d8

080016fc <_read_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4d07      	ldr	r5, [pc, #28]	@ (800171c <_read_r+0x20>)
 8001700:	4604      	mov	r4, r0
 8001702:	4608      	mov	r0, r1
 8001704:	4611      	mov	r1, r2
 8001706:	2200      	movs	r2, #0
 8001708:	602a      	str	r2, [r5, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	f7ff fcba 	bl	8001084 <_read>
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	d102      	bne.n	800171a <_read_r+0x1e>
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	b103      	cbz	r3, 800171a <_read_r+0x1e>
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	bd38      	pop	{r3, r4, r5, pc}
 800171c:	200001d8 	.word	0x200001d8

08001720 <_write_r>:
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	4d07      	ldr	r5, [pc, #28]	@ (8001740 <_write_r+0x20>)
 8001724:	4604      	mov	r4, r0
 8001726:	4608      	mov	r0, r1
 8001728:	4611      	mov	r1, r2
 800172a:	2200      	movs	r2, #0
 800172c:	602a      	str	r2, [r5, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	f7ff fcc5 	bl	80010be <_write>
 8001734:	1c43      	adds	r3, r0, #1
 8001736:	d102      	bne.n	800173e <_write_r+0x1e>
 8001738:	682b      	ldr	r3, [r5, #0]
 800173a:	b103      	cbz	r3, 800173e <_write_r+0x1e>
 800173c:	6023      	str	r3, [r4, #0]
 800173e:	bd38      	pop	{r3, r4, r5, pc}
 8001740:	200001d8 	.word	0x200001d8

08001744 <__errno>:
 8001744:	4b01      	ldr	r3, [pc, #4]	@ (800174c <__errno+0x8>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000000c 	.word	0x2000000c

08001750 <__libc_init_array>:
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	4d0d      	ldr	r5, [pc, #52]	@ (8001788 <__libc_init_array+0x38>)
 8001754:	4c0d      	ldr	r4, [pc, #52]	@ (800178c <__libc_init_array+0x3c>)
 8001756:	1b64      	subs	r4, r4, r5
 8001758:	10a4      	asrs	r4, r4, #2
 800175a:	2600      	movs	r6, #0
 800175c:	42a6      	cmp	r6, r4
 800175e:	d109      	bne.n	8001774 <__libc_init_array+0x24>
 8001760:	4d0b      	ldr	r5, [pc, #44]	@ (8001790 <__libc_init_array+0x40>)
 8001762:	4c0c      	ldr	r4, [pc, #48]	@ (8001794 <__libc_init_array+0x44>)
 8001764:	f000 ff0e 	bl	8002584 <_init>
 8001768:	1b64      	subs	r4, r4, r5
 800176a:	10a4      	asrs	r4, r4, #2
 800176c:	2600      	movs	r6, #0
 800176e:	42a6      	cmp	r6, r4
 8001770:	d105      	bne.n	800177e <__libc_init_array+0x2e>
 8001772:	bd70      	pop	{r4, r5, r6, pc}
 8001774:	f855 3b04 	ldr.w	r3, [r5], #4
 8001778:	4798      	blx	r3
 800177a:	3601      	adds	r6, #1
 800177c:	e7ee      	b.n	800175c <__libc_init_array+0xc>
 800177e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001782:	4798      	blx	r3
 8001784:	3601      	adds	r6, #1
 8001786:	e7f2      	b.n	800176e <__libc_init_array+0x1e>
 8001788:	08002670 	.word	0x08002670
 800178c:	08002670 	.word	0x08002670
 8001790:	08002670 	.word	0x08002670
 8001794:	08002674 	.word	0x08002674

08001798 <__retarget_lock_init_recursive>:
 8001798:	4770      	bx	lr

0800179a <__retarget_lock_acquire_recursive>:
 800179a:	4770      	bx	lr

0800179c <__retarget_lock_release_recursive>:
 800179c:	4770      	bx	lr
	...

080017a0 <_free_r>:
 80017a0:	b538      	push	{r3, r4, r5, lr}
 80017a2:	4605      	mov	r5, r0
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d041      	beq.n	800182c <_free_r+0x8c>
 80017a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017ac:	1f0c      	subs	r4, r1, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bfb8      	it	lt
 80017b2:	18e4      	addlt	r4, r4, r3
 80017b4:	f000 f8e0 	bl	8001978 <__malloc_lock>
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <_free_r+0x90>)
 80017ba:	6813      	ldr	r3, [r2, #0]
 80017bc:	b933      	cbnz	r3, 80017cc <_free_r+0x2c>
 80017be:	6063      	str	r3, [r4, #4]
 80017c0:	6014      	str	r4, [r2, #0]
 80017c2:	4628      	mov	r0, r5
 80017c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017c8:	f000 b8dc 	b.w	8001984 <__malloc_unlock>
 80017cc:	42a3      	cmp	r3, r4
 80017ce:	d908      	bls.n	80017e2 <_free_r+0x42>
 80017d0:	6820      	ldr	r0, [r4, #0]
 80017d2:	1821      	adds	r1, r4, r0
 80017d4:	428b      	cmp	r3, r1
 80017d6:	bf01      	itttt	eq
 80017d8:	6819      	ldreq	r1, [r3, #0]
 80017da:	685b      	ldreq	r3, [r3, #4]
 80017dc:	1809      	addeq	r1, r1, r0
 80017de:	6021      	streq	r1, [r4, #0]
 80017e0:	e7ed      	b.n	80017be <_free_r+0x1e>
 80017e2:	461a      	mov	r2, r3
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	b10b      	cbz	r3, 80017ec <_free_r+0x4c>
 80017e8:	42a3      	cmp	r3, r4
 80017ea:	d9fa      	bls.n	80017e2 <_free_r+0x42>
 80017ec:	6811      	ldr	r1, [r2, #0]
 80017ee:	1850      	adds	r0, r2, r1
 80017f0:	42a0      	cmp	r0, r4
 80017f2:	d10b      	bne.n	800180c <_free_r+0x6c>
 80017f4:	6820      	ldr	r0, [r4, #0]
 80017f6:	4401      	add	r1, r0
 80017f8:	1850      	adds	r0, r2, r1
 80017fa:	4283      	cmp	r3, r0
 80017fc:	6011      	str	r1, [r2, #0]
 80017fe:	d1e0      	bne.n	80017c2 <_free_r+0x22>
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	6053      	str	r3, [r2, #4]
 8001806:	4408      	add	r0, r1
 8001808:	6010      	str	r0, [r2, #0]
 800180a:	e7da      	b.n	80017c2 <_free_r+0x22>
 800180c:	d902      	bls.n	8001814 <_free_r+0x74>
 800180e:	230c      	movs	r3, #12
 8001810:	602b      	str	r3, [r5, #0]
 8001812:	e7d6      	b.n	80017c2 <_free_r+0x22>
 8001814:	6820      	ldr	r0, [r4, #0]
 8001816:	1821      	adds	r1, r4, r0
 8001818:	428b      	cmp	r3, r1
 800181a:	bf04      	itt	eq
 800181c:	6819      	ldreq	r1, [r3, #0]
 800181e:	685b      	ldreq	r3, [r3, #4]
 8001820:	6063      	str	r3, [r4, #4]
 8001822:	bf04      	itt	eq
 8001824:	1809      	addeq	r1, r1, r0
 8001826:	6021      	streq	r1, [r4, #0]
 8001828:	6054      	str	r4, [r2, #4]
 800182a:	e7ca      	b.n	80017c2 <_free_r+0x22>
 800182c:	bd38      	pop	{r3, r4, r5, pc}
 800182e:	bf00      	nop
 8001830:	200001e4 	.word	0x200001e4

08001834 <sbrk_aligned>:
 8001834:	b570      	push	{r4, r5, r6, lr}
 8001836:	4e0f      	ldr	r6, [pc, #60]	@ (8001874 <sbrk_aligned+0x40>)
 8001838:	460c      	mov	r4, r1
 800183a:	6831      	ldr	r1, [r6, #0]
 800183c:	4605      	mov	r5, r0
 800183e:	b911      	cbnz	r1, 8001846 <sbrk_aligned+0x12>
 8001840:	f000 fe4c 	bl	80024dc <_sbrk_r>
 8001844:	6030      	str	r0, [r6, #0]
 8001846:	4621      	mov	r1, r4
 8001848:	4628      	mov	r0, r5
 800184a:	f000 fe47 	bl	80024dc <_sbrk_r>
 800184e:	1c43      	adds	r3, r0, #1
 8001850:	d103      	bne.n	800185a <sbrk_aligned+0x26>
 8001852:	f04f 34ff 	mov.w	r4, #4294967295
 8001856:	4620      	mov	r0, r4
 8001858:	bd70      	pop	{r4, r5, r6, pc}
 800185a:	1cc4      	adds	r4, r0, #3
 800185c:	f024 0403 	bic.w	r4, r4, #3
 8001860:	42a0      	cmp	r0, r4
 8001862:	d0f8      	beq.n	8001856 <sbrk_aligned+0x22>
 8001864:	1a21      	subs	r1, r4, r0
 8001866:	4628      	mov	r0, r5
 8001868:	f000 fe38 	bl	80024dc <_sbrk_r>
 800186c:	3001      	adds	r0, #1
 800186e:	d1f2      	bne.n	8001856 <sbrk_aligned+0x22>
 8001870:	e7ef      	b.n	8001852 <sbrk_aligned+0x1e>
 8001872:	bf00      	nop
 8001874:	200001e0 	.word	0x200001e0

08001878 <_malloc_r>:
 8001878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800187c:	1ccd      	adds	r5, r1, #3
 800187e:	f025 0503 	bic.w	r5, r5, #3
 8001882:	3508      	adds	r5, #8
 8001884:	2d0c      	cmp	r5, #12
 8001886:	bf38      	it	cc
 8001888:	250c      	movcc	r5, #12
 800188a:	2d00      	cmp	r5, #0
 800188c:	4606      	mov	r6, r0
 800188e:	db01      	blt.n	8001894 <_malloc_r+0x1c>
 8001890:	42a9      	cmp	r1, r5
 8001892:	d904      	bls.n	800189e <_malloc_r+0x26>
 8001894:	230c      	movs	r3, #12
 8001896:	6033      	str	r3, [r6, #0]
 8001898:	2000      	movs	r0, #0
 800189a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800189e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001974 <_malloc_r+0xfc>
 80018a2:	f000 f869 	bl	8001978 <__malloc_lock>
 80018a6:	f8d8 3000 	ldr.w	r3, [r8]
 80018aa:	461c      	mov	r4, r3
 80018ac:	bb44      	cbnz	r4, 8001900 <_malloc_r+0x88>
 80018ae:	4629      	mov	r1, r5
 80018b0:	4630      	mov	r0, r6
 80018b2:	f7ff ffbf 	bl	8001834 <sbrk_aligned>
 80018b6:	1c43      	adds	r3, r0, #1
 80018b8:	4604      	mov	r4, r0
 80018ba:	d158      	bne.n	800196e <_malloc_r+0xf6>
 80018bc:	f8d8 4000 	ldr.w	r4, [r8]
 80018c0:	4627      	mov	r7, r4
 80018c2:	2f00      	cmp	r7, #0
 80018c4:	d143      	bne.n	800194e <_malloc_r+0xd6>
 80018c6:	2c00      	cmp	r4, #0
 80018c8:	d04b      	beq.n	8001962 <_malloc_r+0xea>
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	4639      	mov	r1, r7
 80018ce:	4630      	mov	r0, r6
 80018d0:	eb04 0903 	add.w	r9, r4, r3
 80018d4:	f000 fe02 	bl	80024dc <_sbrk_r>
 80018d8:	4581      	cmp	r9, r0
 80018da:	d142      	bne.n	8001962 <_malloc_r+0xea>
 80018dc:	6821      	ldr	r1, [r4, #0]
 80018de:	1a6d      	subs	r5, r5, r1
 80018e0:	4629      	mov	r1, r5
 80018e2:	4630      	mov	r0, r6
 80018e4:	f7ff ffa6 	bl	8001834 <sbrk_aligned>
 80018e8:	3001      	adds	r0, #1
 80018ea:	d03a      	beq.n	8001962 <_malloc_r+0xea>
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	442b      	add	r3, r5
 80018f0:	6023      	str	r3, [r4, #0]
 80018f2:	f8d8 3000 	ldr.w	r3, [r8]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	bb62      	cbnz	r2, 8001954 <_malloc_r+0xdc>
 80018fa:	f8c8 7000 	str.w	r7, [r8]
 80018fe:	e00f      	b.n	8001920 <_malloc_r+0xa8>
 8001900:	6822      	ldr	r2, [r4, #0]
 8001902:	1b52      	subs	r2, r2, r5
 8001904:	d420      	bmi.n	8001948 <_malloc_r+0xd0>
 8001906:	2a0b      	cmp	r2, #11
 8001908:	d917      	bls.n	800193a <_malloc_r+0xc2>
 800190a:	1961      	adds	r1, r4, r5
 800190c:	42a3      	cmp	r3, r4
 800190e:	6025      	str	r5, [r4, #0]
 8001910:	bf18      	it	ne
 8001912:	6059      	strne	r1, [r3, #4]
 8001914:	6863      	ldr	r3, [r4, #4]
 8001916:	bf08      	it	eq
 8001918:	f8c8 1000 	streq.w	r1, [r8]
 800191c:	5162      	str	r2, [r4, r5]
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	4630      	mov	r0, r6
 8001922:	f000 f82f 	bl	8001984 <__malloc_unlock>
 8001926:	f104 000b 	add.w	r0, r4, #11
 800192a:	1d23      	adds	r3, r4, #4
 800192c:	f020 0007 	bic.w	r0, r0, #7
 8001930:	1ac2      	subs	r2, r0, r3
 8001932:	bf1c      	itt	ne
 8001934:	1a1b      	subne	r3, r3, r0
 8001936:	50a3      	strne	r3, [r4, r2]
 8001938:	e7af      	b.n	800189a <_malloc_r+0x22>
 800193a:	6862      	ldr	r2, [r4, #4]
 800193c:	42a3      	cmp	r3, r4
 800193e:	bf0c      	ite	eq
 8001940:	f8c8 2000 	streq.w	r2, [r8]
 8001944:	605a      	strne	r2, [r3, #4]
 8001946:	e7eb      	b.n	8001920 <_malloc_r+0xa8>
 8001948:	4623      	mov	r3, r4
 800194a:	6864      	ldr	r4, [r4, #4]
 800194c:	e7ae      	b.n	80018ac <_malloc_r+0x34>
 800194e:	463c      	mov	r4, r7
 8001950:	687f      	ldr	r7, [r7, #4]
 8001952:	e7b6      	b.n	80018c2 <_malloc_r+0x4a>
 8001954:	461a      	mov	r2, r3
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	42a3      	cmp	r3, r4
 800195a:	d1fb      	bne.n	8001954 <_malloc_r+0xdc>
 800195c:	2300      	movs	r3, #0
 800195e:	6053      	str	r3, [r2, #4]
 8001960:	e7de      	b.n	8001920 <_malloc_r+0xa8>
 8001962:	230c      	movs	r3, #12
 8001964:	6033      	str	r3, [r6, #0]
 8001966:	4630      	mov	r0, r6
 8001968:	f000 f80c 	bl	8001984 <__malloc_unlock>
 800196c:	e794      	b.n	8001898 <_malloc_r+0x20>
 800196e:	6005      	str	r5, [r0, #0]
 8001970:	e7d6      	b.n	8001920 <_malloc_r+0xa8>
 8001972:	bf00      	nop
 8001974:	200001e4 	.word	0x200001e4

08001978 <__malloc_lock>:
 8001978:	4801      	ldr	r0, [pc, #4]	@ (8001980 <__malloc_lock+0x8>)
 800197a:	f7ff bf0e 	b.w	800179a <__retarget_lock_acquire_recursive>
 800197e:	bf00      	nop
 8001980:	200001dc 	.word	0x200001dc

08001984 <__malloc_unlock>:
 8001984:	4801      	ldr	r0, [pc, #4]	@ (800198c <__malloc_unlock+0x8>)
 8001986:	f7ff bf09 	b.w	800179c <__retarget_lock_release_recursive>
 800198a:	bf00      	nop
 800198c:	200001dc 	.word	0x200001dc

08001990 <__ssputs_r>:
 8001990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001994:	688e      	ldr	r6, [r1, #8]
 8001996:	461f      	mov	r7, r3
 8001998:	42be      	cmp	r6, r7
 800199a:	680b      	ldr	r3, [r1, #0]
 800199c:	4682      	mov	sl, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	4690      	mov	r8, r2
 80019a2:	d82d      	bhi.n	8001a00 <__ssputs_r+0x70>
 80019a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80019ac:	d026      	beq.n	80019fc <__ssputs_r+0x6c>
 80019ae:	6965      	ldr	r5, [r4, #20]
 80019b0:	6909      	ldr	r1, [r1, #16]
 80019b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019b6:	eba3 0901 	sub.w	r9, r3, r1
 80019ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019be:	1c7b      	adds	r3, r7, #1
 80019c0:	444b      	add	r3, r9
 80019c2:	106d      	asrs	r5, r5, #1
 80019c4:	429d      	cmp	r5, r3
 80019c6:	bf38      	it	cc
 80019c8:	461d      	movcc	r5, r3
 80019ca:	0553      	lsls	r3, r2, #21
 80019cc:	d527      	bpl.n	8001a1e <__ssputs_r+0x8e>
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7ff ff52 	bl	8001878 <_malloc_r>
 80019d4:	4606      	mov	r6, r0
 80019d6:	b360      	cbz	r0, 8001a32 <__ssputs_r+0xa2>
 80019d8:	6921      	ldr	r1, [r4, #16]
 80019da:	464a      	mov	r2, r9
 80019dc:	f000 fd8e 	bl	80024fc <memcpy>
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80019e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ea:	81a3      	strh	r3, [r4, #12]
 80019ec:	6126      	str	r6, [r4, #16]
 80019ee:	6165      	str	r5, [r4, #20]
 80019f0:	444e      	add	r6, r9
 80019f2:	eba5 0509 	sub.w	r5, r5, r9
 80019f6:	6026      	str	r6, [r4, #0]
 80019f8:	60a5      	str	r5, [r4, #8]
 80019fa:	463e      	mov	r6, r7
 80019fc:	42be      	cmp	r6, r7
 80019fe:	d900      	bls.n	8001a02 <__ssputs_r+0x72>
 8001a00:	463e      	mov	r6, r7
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	4632      	mov	r2, r6
 8001a06:	4641      	mov	r1, r8
 8001a08:	f000 fd2c 	bl	8002464 <memmove>
 8001a0c:	68a3      	ldr	r3, [r4, #8]
 8001a0e:	1b9b      	subs	r3, r3, r6
 8001a10:	60a3      	str	r3, [r4, #8]
 8001a12:	6823      	ldr	r3, [r4, #0]
 8001a14:	4433      	add	r3, r6
 8001a16:	6023      	str	r3, [r4, #0]
 8001a18:	2000      	movs	r0, #0
 8001a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a1e:	462a      	mov	r2, r5
 8001a20:	f000 fd7a 	bl	8002518 <_realloc_r>
 8001a24:	4606      	mov	r6, r0
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d1e0      	bne.n	80019ec <__ssputs_r+0x5c>
 8001a2a:	6921      	ldr	r1, [r4, #16]
 8001a2c:	4650      	mov	r0, sl
 8001a2e:	f7ff feb7 	bl	80017a0 <_free_r>
 8001a32:	230c      	movs	r3, #12
 8001a34:	f8ca 3000 	str.w	r3, [sl]
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a3e:	81a3      	strh	r3, [r4, #12]
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	e7e9      	b.n	8001a1a <__ssputs_r+0x8a>
	...

08001a48 <_svfiprintf_r>:
 8001a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4c:	4698      	mov	r8, r3
 8001a4e:	898b      	ldrh	r3, [r1, #12]
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	b09d      	sub	sp, #116	@ 0x74
 8001a54:	4607      	mov	r7, r0
 8001a56:	460d      	mov	r5, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	d510      	bpl.n	8001a7e <_svfiprintf_r+0x36>
 8001a5c:	690b      	ldr	r3, [r1, #16]
 8001a5e:	b973      	cbnz	r3, 8001a7e <_svfiprintf_r+0x36>
 8001a60:	2140      	movs	r1, #64	@ 0x40
 8001a62:	f7ff ff09 	bl	8001878 <_malloc_r>
 8001a66:	6028      	str	r0, [r5, #0]
 8001a68:	6128      	str	r0, [r5, #16]
 8001a6a:	b930      	cbnz	r0, 8001a7a <_svfiprintf_r+0x32>
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	b01d      	add	sp, #116	@ 0x74
 8001a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a7a:	2340      	movs	r3, #64	@ 0x40
 8001a7c:	616b      	str	r3, [r5, #20]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a82:	2320      	movs	r3, #32
 8001a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a8c:	2330      	movs	r3, #48	@ 0x30
 8001a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001c2c <_svfiprintf_r+0x1e4>
 8001a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001a96:	f04f 0901 	mov.w	r9, #1
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	469a      	mov	sl, r3
 8001a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001aa2:	b10a      	cbz	r2, 8001aa8 <_svfiprintf_r+0x60>
 8001aa4:	2a25      	cmp	r2, #37	@ 0x25
 8001aa6:	d1f9      	bne.n	8001a9c <_svfiprintf_r+0x54>
 8001aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8001aac:	d00b      	beq.n	8001ac6 <_svfiprintf_r+0x7e>
 8001aae:	465b      	mov	r3, fp
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	4638      	mov	r0, r7
 8001ab6:	f7ff ff6b 	bl	8001990 <__ssputs_r>
 8001aba:	3001      	adds	r0, #1
 8001abc:	f000 80a7 	beq.w	8001c0e <_svfiprintf_r+0x1c6>
 8001ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ac2:	445a      	add	r2, fp
 8001ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8001ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 809f 	beq.w	8001c0e <_svfiprintf_r+0x1c6>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ada:	f10a 0a01 	add.w	sl, sl, #1
 8001ade:	9304      	str	r3, [sp, #16]
 8001ae0:	9307      	str	r3, [sp, #28]
 8001ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8001ae8:	4654      	mov	r4, sl
 8001aea:	2205      	movs	r2, #5
 8001aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001af0:	484e      	ldr	r0, [pc, #312]	@ (8001c2c <_svfiprintf_r+0x1e4>)
 8001af2:	f7fe fb75 	bl	80001e0 <memchr>
 8001af6:	9a04      	ldr	r2, [sp, #16]
 8001af8:	b9d8      	cbnz	r0, 8001b32 <_svfiprintf_r+0xea>
 8001afa:	06d0      	lsls	r0, r2, #27
 8001afc:	bf44      	itt	mi
 8001afe:	2320      	movmi	r3, #32
 8001b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b04:	0711      	lsls	r1, r2, #28
 8001b06:	bf44      	itt	mi
 8001b08:	232b      	movmi	r3, #43	@ 0x2b
 8001b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8001b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b14:	d015      	beq.n	8001b42 <_svfiprintf_r+0xfa>
 8001b16:	9a07      	ldr	r2, [sp, #28]
 8001b18:	4654      	mov	r4, sl
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f04f 0c0a 	mov.w	ip, #10
 8001b20:	4621      	mov	r1, r4
 8001b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b26:	3b30      	subs	r3, #48	@ 0x30
 8001b28:	2b09      	cmp	r3, #9
 8001b2a:	d94b      	bls.n	8001bc4 <_svfiprintf_r+0x17c>
 8001b2c:	b1b0      	cbz	r0, 8001b5c <_svfiprintf_r+0x114>
 8001b2e:	9207      	str	r2, [sp, #28]
 8001b30:	e014      	b.n	8001b5c <_svfiprintf_r+0x114>
 8001b32:	eba0 0308 	sub.w	r3, r0, r8
 8001b36:	fa09 f303 	lsl.w	r3, r9, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	9304      	str	r3, [sp, #16]
 8001b3e:	46a2      	mov	sl, r4
 8001b40:	e7d2      	b.n	8001ae8 <_svfiprintf_r+0xa0>
 8001b42:	9b03      	ldr	r3, [sp, #12]
 8001b44:	1d19      	adds	r1, r3, #4
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	9103      	str	r1, [sp, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bfbb      	ittet	lt
 8001b4e:	425b      	neglt	r3, r3
 8001b50:	f042 0202 	orrlt.w	r2, r2, #2
 8001b54:	9307      	strge	r3, [sp, #28]
 8001b56:	9307      	strlt	r3, [sp, #28]
 8001b58:	bfb8      	it	lt
 8001b5a:	9204      	strlt	r2, [sp, #16]
 8001b5c:	7823      	ldrb	r3, [r4, #0]
 8001b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b60:	d10a      	bne.n	8001b78 <_svfiprintf_r+0x130>
 8001b62:	7863      	ldrb	r3, [r4, #1]
 8001b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b66:	d132      	bne.n	8001bce <_svfiprintf_r+0x186>
 8001b68:	9b03      	ldr	r3, [sp, #12]
 8001b6a:	1d1a      	adds	r2, r3, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	9203      	str	r2, [sp, #12]
 8001b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001b74:	3402      	adds	r4, #2
 8001b76:	9305      	str	r3, [sp, #20]
 8001b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001c3c <_svfiprintf_r+0x1f4>
 8001b7c:	7821      	ldrb	r1, [r4, #0]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4650      	mov	r0, sl
 8001b82:	f7fe fb2d 	bl	80001e0 <memchr>
 8001b86:	b138      	cbz	r0, 8001b98 <_svfiprintf_r+0x150>
 8001b88:	9b04      	ldr	r3, [sp, #16]
 8001b8a:	eba0 000a 	sub.w	r0, r0, sl
 8001b8e:	2240      	movs	r2, #64	@ 0x40
 8001b90:	4082      	lsls	r2, r0
 8001b92:	4313      	orrs	r3, r2
 8001b94:	3401      	adds	r4, #1
 8001b96:	9304      	str	r3, [sp, #16]
 8001b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b9c:	4824      	ldr	r0, [pc, #144]	@ (8001c30 <_svfiprintf_r+0x1e8>)
 8001b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	f7fe fb1c 	bl	80001e0 <memchr>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d036      	beq.n	8001c1a <_svfiprintf_r+0x1d2>
 8001bac:	4b21      	ldr	r3, [pc, #132]	@ (8001c34 <_svfiprintf_r+0x1ec>)
 8001bae:	bb1b      	cbnz	r3, 8001bf8 <_svfiprintf_r+0x1b0>
 8001bb0:	9b03      	ldr	r3, [sp, #12]
 8001bb2:	3307      	adds	r3, #7
 8001bb4:	f023 0307 	bic.w	r3, r3, #7
 8001bb8:	3308      	adds	r3, #8
 8001bba:	9303      	str	r3, [sp, #12]
 8001bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bbe:	4433      	add	r3, r6
 8001bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bc2:	e76a      	b.n	8001a9a <_svfiprintf_r+0x52>
 8001bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8001bc8:	460c      	mov	r4, r1
 8001bca:	2001      	movs	r0, #1
 8001bcc:	e7a8      	b.n	8001b20 <_svfiprintf_r+0xd8>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	3401      	adds	r4, #1
 8001bd2:	9305      	str	r3, [sp, #20]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f04f 0c0a 	mov.w	ip, #10
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001be0:	3a30      	subs	r2, #48	@ 0x30
 8001be2:	2a09      	cmp	r2, #9
 8001be4:	d903      	bls.n	8001bee <_svfiprintf_r+0x1a6>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0c6      	beq.n	8001b78 <_svfiprintf_r+0x130>
 8001bea:	9105      	str	r1, [sp, #20]
 8001bec:	e7c4      	b.n	8001b78 <_svfiprintf_r+0x130>
 8001bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e7f0      	b.n	8001bda <_svfiprintf_r+0x192>
 8001bf8:	ab03      	add	r3, sp, #12
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <_svfiprintf_r+0x1f0>)
 8001c00:	a904      	add	r1, sp, #16
 8001c02:	4638      	mov	r0, r7
 8001c04:	f3af 8000 	nop.w
 8001c08:	1c42      	adds	r2, r0, #1
 8001c0a:	4606      	mov	r6, r0
 8001c0c:	d1d6      	bne.n	8001bbc <_svfiprintf_r+0x174>
 8001c0e:	89ab      	ldrh	r3, [r5, #12]
 8001c10:	065b      	lsls	r3, r3, #25
 8001c12:	f53f af2d 	bmi.w	8001a70 <_svfiprintf_r+0x28>
 8001c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c18:	e72c      	b.n	8001a74 <_svfiprintf_r+0x2c>
 8001c1a:	ab03      	add	r3, sp, #12
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	462a      	mov	r2, r5
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <_svfiprintf_r+0x1f0>)
 8001c22:	a904      	add	r1, sp, #16
 8001c24:	4638      	mov	r0, r7
 8001c26:	f000 f9bb 	bl	8001fa0 <_printf_i>
 8001c2a:	e7ed      	b.n	8001c08 <_svfiprintf_r+0x1c0>
 8001c2c:	08002634 	.word	0x08002634
 8001c30:	0800263e 	.word	0x0800263e
 8001c34:	00000000 	.word	0x00000000
 8001c38:	08001991 	.word	0x08001991
 8001c3c:	0800263a 	.word	0x0800263a

08001c40 <__sfputc_r>:
 8001c40:	6893      	ldr	r3, [r2, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	b410      	push	{r4}
 8001c48:	6093      	str	r3, [r2, #8]
 8001c4a:	da08      	bge.n	8001c5e <__sfputc_r+0x1e>
 8001c4c:	6994      	ldr	r4, [r2, #24]
 8001c4e:	42a3      	cmp	r3, r4
 8001c50:	db01      	blt.n	8001c56 <__sfputc_r+0x16>
 8001c52:	290a      	cmp	r1, #10
 8001c54:	d103      	bne.n	8001c5e <__sfputc_r+0x1e>
 8001c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c5a:	f7ff bc90 	b.w	800157e <__swbuf_r>
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	1c58      	adds	r0, r3, #1
 8001c62:	6010      	str	r0, [r2, #0]
 8001c64:	7019      	strb	r1, [r3, #0]
 8001c66:	4608      	mov	r0, r1
 8001c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <__sfputs_r>:
 8001c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c70:	4606      	mov	r6, r0
 8001c72:	460f      	mov	r7, r1
 8001c74:	4614      	mov	r4, r2
 8001c76:	18d5      	adds	r5, r2, r3
 8001c78:	42ac      	cmp	r4, r5
 8001c7a:	d101      	bne.n	8001c80 <__sfputs_r+0x12>
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e007      	b.n	8001c90 <__sfputs_r+0x22>
 8001c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c84:	463a      	mov	r2, r7
 8001c86:	4630      	mov	r0, r6
 8001c88:	f7ff ffda 	bl	8001c40 <__sfputc_r>
 8001c8c:	1c43      	adds	r3, r0, #1
 8001c8e:	d1f3      	bne.n	8001c78 <__sfputs_r+0xa>
 8001c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c94 <_vfiprintf_r>:
 8001c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c98:	460d      	mov	r5, r1
 8001c9a:	b09d      	sub	sp, #116	@ 0x74
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	4606      	mov	r6, r0
 8001ca2:	b118      	cbz	r0, 8001cac <_vfiprintf_r+0x18>
 8001ca4:	6a03      	ldr	r3, [r0, #32]
 8001ca6:	b90b      	cbnz	r3, 8001cac <_vfiprintf_r+0x18>
 8001ca8:	f7ff fb58 	bl	800135c <__sinit>
 8001cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cae:	07d9      	lsls	r1, r3, #31
 8001cb0:	d405      	bmi.n	8001cbe <_vfiprintf_r+0x2a>
 8001cb2:	89ab      	ldrh	r3, [r5, #12]
 8001cb4:	059a      	lsls	r2, r3, #22
 8001cb6:	d402      	bmi.n	8001cbe <_vfiprintf_r+0x2a>
 8001cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001cba:	f7ff fd6e 	bl	800179a <__retarget_lock_acquire_recursive>
 8001cbe:	89ab      	ldrh	r3, [r5, #12]
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	d501      	bpl.n	8001cc8 <_vfiprintf_r+0x34>
 8001cc4:	692b      	ldr	r3, [r5, #16]
 8001cc6:	b99b      	cbnz	r3, 8001cf0 <_vfiprintf_r+0x5c>
 8001cc8:	4629      	mov	r1, r5
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff fc96 	bl	80015fc <__swsetup_r>
 8001cd0:	b170      	cbz	r0, 8001cf0 <_vfiprintf_r+0x5c>
 8001cd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001cd4:	07dc      	lsls	r4, r3, #31
 8001cd6:	d504      	bpl.n	8001ce2 <_vfiprintf_r+0x4e>
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	b01d      	add	sp, #116	@ 0x74
 8001cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce2:	89ab      	ldrh	r3, [r5, #12]
 8001ce4:	0598      	lsls	r0, r3, #22
 8001ce6:	d4f7      	bmi.n	8001cd8 <_vfiprintf_r+0x44>
 8001ce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001cea:	f7ff fd57 	bl	800179c <__retarget_lock_release_recursive>
 8001cee:	e7f3      	b.n	8001cd8 <_vfiprintf_r+0x44>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001cfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cfe:	2330      	movs	r3, #48	@ 0x30
 8001d00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001eb0 <_vfiprintf_r+0x21c>
 8001d04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d08:	f04f 0901 	mov.w	r9, #1
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	469a      	mov	sl, r3
 8001d10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d14:	b10a      	cbz	r2, 8001d1a <_vfiprintf_r+0x86>
 8001d16:	2a25      	cmp	r2, #37	@ 0x25
 8001d18:	d1f9      	bne.n	8001d0e <_vfiprintf_r+0x7a>
 8001d1a:	ebba 0b04 	subs.w	fp, sl, r4
 8001d1e:	d00b      	beq.n	8001d38 <_vfiprintf_r+0xa4>
 8001d20:	465b      	mov	r3, fp
 8001d22:	4622      	mov	r2, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	4630      	mov	r0, r6
 8001d28:	f7ff ffa1 	bl	8001c6e <__sfputs_r>
 8001d2c:	3001      	adds	r0, #1
 8001d2e:	f000 80a7 	beq.w	8001e80 <_vfiprintf_r+0x1ec>
 8001d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d34:	445a      	add	r2, fp
 8001d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d38:	f89a 3000 	ldrb.w	r3, [sl]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 809f 	beq.w	8001e80 <_vfiprintf_r+0x1ec>
 8001d42:	2300      	movs	r3, #0
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d4c:	f10a 0a01 	add.w	sl, sl, #1
 8001d50:	9304      	str	r3, [sp, #16]
 8001d52:	9307      	str	r3, [sp, #28]
 8001d54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001d58:	931a      	str	r3, [sp, #104]	@ 0x68
 8001d5a:	4654      	mov	r4, sl
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d62:	4853      	ldr	r0, [pc, #332]	@ (8001eb0 <_vfiprintf_r+0x21c>)
 8001d64:	f7fe fa3c 	bl	80001e0 <memchr>
 8001d68:	9a04      	ldr	r2, [sp, #16]
 8001d6a:	b9d8      	cbnz	r0, 8001da4 <_vfiprintf_r+0x110>
 8001d6c:	06d1      	lsls	r1, r2, #27
 8001d6e:	bf44      	itt	mi
 8001d70:	2320      	movmi	r3, #32
 8001d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d76:	0713      	lsls	r3, r2, #28
 8001d78:	bf44      	itt	mi
 8001d7a:	232b      	movmi	r3, #43	@ 0x2b
 8001d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001d80:	f89a 3000 	ldrb.w	r3, [sl]
 8001d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d86:	d015      	beq.n	8001db4 <_vfiprintf_r+0x120>
 8001d88:	9a07      	ldr	r2, [sp, #28]
 8001d8a:	4654      	mov	r4, sl
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f04f 0c0a 	mov.w	ip, #10
 8001d92:	4621      	mov	r1, r4
 8001d94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d98:	3b30      	subs	r3, #48	@ 0x30
 8001d9a:	2b09      	cmp	r3, #9
 8001d9c:	d94b      	bls.n	8001e36 <_vfiprintf_r+0x1a2>
 8001d9e:	b1b0      	cbz	r0, 8001dce <_vfiprintf_r+0x13a>
 8001da0:	9207      	str	r2, [sp, #28]
 8001da2:	e014      	b.n	8001dce <_vfiprintf_r+0x13a>
 8001da4:	eba0 0308 	sub.w	r3, r0, r8
 8001da8:	fa09 f303 	lsl.w	r3, r9, r3
 8001dac:	4313      	orrs	r3, r2
 8001dae:	9304      	str	r3, [sp, #16]
 8001db0:	46a2      	mov	sl, r4
 8001db2:	e7d2      	b.n	8001d5a <_vfiprintf_r+0xc6>
 8001db4:	9b03      	ldr	r3, [sp, #12]
 8001db6:	1d19      	adds	r1, r3, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	9103      	str	r1, [sp, #12]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bfbb      	ittet	lt
 8001dc0:	425b      	neglt	r3, r3
 8001dc2:	f042 0202 	orrlt.w	r2, r2, #2
 8001dc6:	9307      	strge	r3, [sp, #28]
 8001dc8:	9307      	strlt	r3, [sp, #28]
 8001dca:	bfb8      	it	lt
 8001dcc:	9204      	strlt	r2, [sp, #16]
 8001dce:	7823      	ldrb	r3, [r4, #0]
 8001dd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001dd2:	d10a      	bne.n	8001dea <_vfiprintf_r+0x156>
 8001dd4:	7863      	ldrb	r3, [r4, #1]
 8001dd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001dd8:	d132      	bne.n	8001e40 <_vfiprintf_r+0x1ac>
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	1d1a      	adds	r2, r3, #4
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	9203      	str	r2, [sp, #12]
 8001de2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001de6:	3402      	adds	r4, #2
 8001de8:	9305      	str	r3, [sp, #20]
 8001dea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001ec0 <_vfiprintf_r+0x22c>
 8001dee:	7821      	ldrb	r1, [r4, #0]
 8001df0:	2203      	movs	r2, #3
 8001df2:	4650      	mov	r0, sl
 8001df4:	f7fe f9f4 	bl	80001e0 <memchr>
 8001df8:	b138      	cbz	r0, 8001e0a <_vfiprintf_r+0x176>
 8001dfa:	9b04      	ldr	r3, [sp, #16]
 8001dfc:	eba0 000a 	sub.w	r0, r0, sl
 8001e00:	2240      	movs	r2, #64	@ 0x40
 8001e02:	4082      	lsls	r2, r0
 8001e04:	4313      	orrs	r3, r2
 8001e06:	3401      	adds	r4, #1
 8001e08:	9304      	str	r3, [sp, #16]
 8001e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e0e:	4829      	ldr	r0, [pc, #164]	@ (8001eb4 <_vfiprintf_r+0x220>)
 8001e10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e14:	2206      	movs	r2, #6
 8001e16:	f7fe f9e3 	bl	80001e0 <memchr>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d03f      	beq.n	8001e9e <_vfiprintf_r+0x20a>
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <_vfiprintf_r+0x224>)
 8001e20:	bb1b      	cbnz	r3, 8001e6a <_vfiprintf_r+0x1d6>
 8001e22:	9b03      	ldr	r3, [sp, #12]
 8001e24:	3307      	adds	r3, #7
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	9303      	str	r3, [sp, #12]
 8001e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e30:	443b      	add	r3, r7
 8001e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e34:	e76a      	b.n	8001d0c <_vfiprintf_r+0x78>
 8001e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	e7a8      	b.n	8001d92 <_vfiprintf_r+0xfe>
 8001e40:	2300      	movs	r3, #0
 8001e42:	3401      	adds	r4, #1
 8001e44:	9305      	str	r3, [sp, #20]
 8001e46:	4619      	mov	r1, r3
 8001e48:	f04f 0c0a 	mov.w	ip, #10
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e52:	3a30      	subs	r2, #48	@ 0x30
 8001e54:	2a09      	cmp	r2, #9
 8001e56:	d903      	bls.n	8001e60 <_vfiprintf_r+0x1cc>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0c6      	beq.n	8001dea <_vfiprintf_r+0x156>
 8001e5c:	9105      	str	r1, [sp, #20]
 8001e5e:	e7c4      	b.n	8001dea <_vfiprintf_r+0x156>
 8001e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e64:	4604      	mov	r4, r0
 8001e66:	2301      	movs	r3, #1
 8001e68:	e7f0      	b.n	8001e4c <_vfiprintf_r+0x1b8>
 8001e6a:	ab03      	add	r3, sp, #12
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	462a      	mov	r2, r5
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <_vfiprintf_r+0x228>)
 8001e72:	a904      	add	r1, sp, #16
 8001e74:	4630      	mov	r0, r6
 8001e76:	f3af 8000 	nop.w
 8001e7a:	4607      	mov	r7, r0
 8001e7c:	1c78      	adds	r0, r7, #1
 8001e7e:	d1d6      	bne.n	8001e2e <_vfiprintf_r+0x19a>
 8001e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e82:	07d9      	lsls	r1, r3, #31
 8001e84:	d405      	bmi.n	8001e92 <_vfiprintf_r+0x1fe>
 8001e86:	89ab      	ldrh	r3, [r5, #12]
 8001e88:	059a      	lsls	r2, r3, #22
 8001e8a:	d402      	bmi.n	8001e92 <_vfiprintf_r+0x1fe>
 8001e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e8e:	f7ff fc85 	bl	800179c <__retarget_lock_release_recursive>
 8001e92:	89ab      	ldrh	r3, [r5, #12]
 8001e94:	065b      	lsls	r3, r3, #25
 8001e96:	f53f af1f 	bmi.w	8001cd8 <_vfiprintf_r+0x44>
 8001e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001e9c:	e71e      	b.n	8001cdc <_vfiprintf_r+0x48>
 8001e9e:	ab03      	add	r3, sp, #12
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	462a      	mov	r2, r5
 8001ea4:	4b05      	ldr	r3, [pc, #20]	@ (8001ebc <_vfiprintf_r+0x228>)
 8001ea6:	a904      	add	r1, sp, #16
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	f000 f879 	bl	8001fa0 <_printf_i>
 8001eae:	e7e4      	b.n	8001e7a <_vfiprintf_r+0x1e6>
 8001eb0:	08002634 	.word	0x08002634
 8001eb4:	0800263e 	.word	0x0800263e
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	08001c6f 	.word	0x08001c6f
 8001ec0:	0800263a 	.word	0x0800263a

08001ec4 <_printf_common>:
 8001ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec8:	4616      	mov	r6, r2
 8001eca:	4698      	mov	r8, r3
 8001ecc:	688a      	ldr	r2, [r1, #8]
 8001ece:	690b      	ldr	r3, [r1, #16]
 8001ed0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bfb8      	it	lt
 8001ed8:	4613      	movlt	r3, r2
 8001eda:	6033      	str	r3, [r6, #0]
 8001edc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ee0:	4607      	mov	r7, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	b10a      	cbz	r2, 8001eea <_printf_common+0x26>
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	6033      	str	r3, [r6, #0]
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	0699      	lsls	r1, r3, #26
 8001eee:	bf42      	ittt	mi
 8001ef0:	6833      	ldrmi	r3, [r6, #0]
 8001ef2:	3302      	addmi	r3, #2
 8001ef4:	6033      	strmi	r3, [r6, #0]
 8001ef6:	6825      	ldr	r5, [r4, #0]
 8001ef8:	f015 0506 	ands.w	r5, r5, #6
 8001efc:	d106      	bne.n	8001f0c <_printf_common+0x48>
 8001efe:	f104 0a19 	add.w	sl, r4, #25
 8001f02:	68e3      	ldr	r3, [r4, #12]
 8001f04:	6832      	ldr	r2, [r6, #0]
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	42ab      	cmp	r3, r5
 8001f0a:	dc26      	bgt.n	8001f5a <_printf_common+0x96>
 8001f0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f10:	6822      	ldr	r2, [r4, #0]
 8001f12:	3b00      	subs	r3, #0
 8001f14:	bf18      	it	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	0692      	lsls	r2, r2, #26
 8001f1a:	d42b      	bmi.n	8001f74 <_printf_common+0xb0>
 8001f1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f20:	4641      	mov	r1, r8
 8001f22:	4638      	mov	r0, r7
 8001f24:	47c8      	blx	r9
 8001f26:	3001      	adds	r0, #1
 8001f28:	d01e      	beq.n	8001f68 <_printf_common+0xa4>
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	6922      	ldr	r2, [r4, #16]
 8001f2e:	f003 0306 	and.w	r3, r3, #6
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf02      	ittt	eq
 8001f36:	68e5      	ldreq	r5, [r4, #12]
 8001f38:	6833      	ldreq	r3, [r6, #0]
 8001f3a:	1aed      	subeq	r5, r5, r3
 8001f3c:	68a3      	ldr	r3, [r4, #8]
 8001f3e:	bf0c      	ite	eq
 8001f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f44:	2500      	movne	r5, #0
 8001f46:	4293      	cmp	r3, r2
 8001f48:	bfc4      	itt	gt
 8001f4a:	1a9b      	subgt	r3, r3, r2
 8001f4c:	18ed      	addgt	r5, r5, r3
 8001f4e:	2600      	movs	r6, #0
 8001f50:	341a      	adds	r4, #26
 8001f52:	42b5      	cmp	r5, r6
 8001f54:	d11a      	bne.n	8001f8c <_printf_common+0xc8>
 8001f56:	2000      	movs	r0, #0
 8001f58:	e008      	b.n	8001f6c <_printf_common+0xa8>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4652      	mov	r2, sl
 8001f5e:	4641      	mov	r1, r8
 8001f60:	4638      	mov	r0, r7
 8001f62:	47c8      	blx	r9
 8001f64:	3001      	adds	r0, #1
 8001f66:	d103      	bne.n	8001f70 <_printf_common+0xac>
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f70:	3501      	adds	r5, #1
 8001f72:	e7c6      	b.n	8001f02 <_printf_common+0x3e>
 8001f74:	18e1      	adds	r1, r4, r3
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	2030      	movs	r0, #48	@ 0x30
 8001f7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001f7e:	4422      	add	r2, r4
 8001f80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001f88:	3302      	adds	r3, #2
 8001f8a:	e7c7      	b.n	8001f1c <_printf_common+0x58>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4641      	mov	r1, r8
 8001f92:	4638      	mov	r0, r7
 8001f94:	47c8      	blx	r9
 8001f96:	3001      	adds	r0, #1
 8001f98:	d0e6      	beq.n	8001f68 <_printf_common+0xa4>
 8001f9a:	3601      	adds	r6, #1
 8001f9c:	e7d9      	b.n	8001f52 <_printf_common+0x8e>
	...

08001fa0 <_printf_i>:
 8001fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa4:	7e0f      	ldrb	r7, [r1, #24]
 8001fa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001fa8:	2f78      	cmp	r7, #120	@ 0x78
 8001faa:	4691      	mov	r9, r2
 8001fac:	4680      	mov	r8, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	469a      	mov	sl, r3
 8001fb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001fb6:	d807      	bhi.n	8001fc8 <_printf_i+0x28>
 8001fb8:	2f62      	cmp	r7, #98	@ 0x62
 8001fba:	d80a      	bhi.n	8001fd2 <_printf_i+0x32>
 8001fbc:	2f00      	cmp	r7, #0
 8001fbe:	f000 80d2 	beq.w	8002166 <_printf_i+0x1c6>
 8001fc2:	2f58      	cmp	r7, #88	@ 0x58
 8001fc4:	f000 80b9 	beq.w	800213a <_printf_i+0x19a>
 8001fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001fd0:	e03a      	b.n	8002048 <_printf_i+0xa8>
 8001fd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001fd6:	2b15      	cmp	r3, #21
 8001fd8:	d8f6      	bhi.n	8001fc8 <_printf_i+0x28>
 8001fda:	a101      	add	r1, pc, #4	@ (adr r1, 8001fe0 <_printf_i+0x40>)
 8001fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fe0:	08002039 	.word	0x08002039
 8001fe4:	0800204d 	.word	0x0800204d
 8001fe8:	08001fc9 	.word	0x08001fc9
 8001fec:	08001fc9 	.word	0x08001fc9
 8001ff0:	08001fc9 	.word	0x08001fc9
 8001ff4:	08001fc9 	.word	0x08001fc9
 8001ff8:	0800204d 	.word	0x0800204d
 8001ffc:	08001fc9 	.word	0x08001fc9
 8002000:	08001fc9 	.word	0x08001fc9
 8002004:	08001fc9 	.word	0x08001fc9
 8002008:	08001fc9 	.word	0x08001fc9
 800200c:	0800214d 	.word	0x0800214d
 8002010:	08002077 	.word	0x08002077
 8002014:	08002107 	.word	0x08002107
 8002018:	08001fc9 	.word	0x08001fc9
 800201c:	08001fc9 	.word	0x08001fc9
 8002020:	0800216f 	.word	0x0800216f
 8002024:	08001fc9 	.word	0x08001fc9
 8002028:	08002077 	.word	0x08002077
 800202c:	08001fc9 	.word	0x08001fc9
 8002030:	08001fc9 	.word	0x08001fc9
 8002034:	0800210f 	.word	0x0800210f
 8002038:	6833      	ldr	r3, [r6, #0]
 800203a:	1d1a      	adds	r2, r3, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6032      	str	r2, [r6, #0]
 8002040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002044:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002048:	2301      	movs	r3, #1
 800204a:	e09d      	b.n	8002188 <_printf_i+0x1e8>
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	1d19      	adds	r1, r3, #4
 8002052:	6031      	str	r1, [r6, #0]
 8002054:	0606      	lsls	r6, r0, #24
 8002056:	d501      	bpl.n	800205c <_printf_i+0xbc>
 8002058:	681d      	ldr	r5, [r3, #0]
 800205a:	e003      	b.n	8002064 <_printf_i+0xc4>
 800205c:	0645      	lsls	r5, r0, #25
 800205e:	d5fb      	bpl.n	8002058 <_printf_i+0xb8>
 8002060:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002064:	2d00      	cmp	r5, #0
 8002066:	da03      	bge.n	8002070 <_printf_i+0xd0>
 8002068:	232d      	movs	r3, #45	@ 0x2d
 800206a:	426d      	negs	r5, r5
 800206c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002070:	4859      	ldr	r0, [pc, #356]	@ (80021d8 <_printf_i+0x238>)
 8002072:	230a      	movs	r3, #10
 8002074:	e011      	b.n	800209a <_printf_i+0xfa>
 8002076:	6821      	ldr	r1, [r4, #0]
 8002078:	6833      	ldr	r3, [r6, #0]
 800207a:	0608      	lsls	r0, r1, #24
 800207c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002080:	d402      	bmi.n	8002088 <_printf_i+0xe8>
 8002082:	0649      	lsls	r1, r1, #25
 8002084:	bf48      	it	mi
 8002086:	b2ad      	uxthmi	r5, r5
 8002088:	2f6f      	cmp	r7, #111	@ 0x6f
 800208a:	4853      	ldr	r0, [pc, #332]	@ (80021d8 <_printf_i+0x238>)
 800208c:	6033      	str	r3, [r6, #0]
 800208e:	bf14      	ite	ne
 8002090:	230a      	movne	r3, #10
 8002092:	2308      	moveq	r3, #8
 8002094:	2100      	movs	r1, #0
 8002096:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800209a:	6866      	ldr	r6, [r4, #4]
 800209c:	60a6      	str	r6, [r4, #8]
 800209e:	2e00      	cmp	r6, #0
 80020a0:	bfa2      	ittt	ge
 80020a2:	6821      	ldrge	r1, [r4, #0]
 80020a4:	f021 0104 	bicge.w	r1, r1, #4
 80020a8:	6021      	strge	r1, [r4, #0]
 80020aa:	b90d      	cbnz	r5, 80020b0 <_printf_i+0x110>
 80020ac:	2e00      	cmp	r6, #0
 80020ae:	d04b      	beq.n	8002148 <_printf_i+0x1a8>
 80020b0:	4616      	mov	r6, r2
 80020b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80020b6:	fb03 5711 	mls	r7, r3, r1, r5
 80020ba:	5dc7      	ldrb	r7, [r0, r7]
 80020bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80020c0:	462f      	mov	r7, r5
 80020c2:	42bb      	cmp	r3, r7
 80020c4:	460d      	mov	r5, r1
 80020c6:	d9f4      	bls.n	80020b2 <_printf_i+0x112>
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d10b      	bne.n	80020e4 <_printf_i+0x144>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	07df      	lsls	r7, r3, #31
 80020d0:	d508      	bpl.n	80020e4 <_printf_i+0x144>
 80020d2:	6923      	ldr	r3, [r4, #16]
 80020d4:	6861      	ldr	r1, [r4, #4]
 80020d6:	4299      	cmp	r1, r3
 80020d8:	bfde      	ittt	le
 80020da:	2330      	movle	r3, #48	@ 0x30
 80020dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80020e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80020e4:	1b92      	subs	r2, r2, r6
 80020e6:	6122      	str	r2, [r4, #16]
 80020e8:	f8cd a000 	str.w	sl, [sp]
 80020ec:	464b      	mov	r3, r9
 80020ee:	aa03      	add	r2, sp, #12
 80020f0:	4621      	mov	r1, r4
 80020f2:	4640      	mov	r0, r8
 80020f4:	f7ff fee6 	bl	8001ec4 <_printf_common>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d14a      	bne.n	8002192 <_printf_i+0x1f2>
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	b004      	add	sp, #16
 8002102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	4833      	ldr	r0, [pc, #204]	@ (80021dc <_printf_i+0x23c>)
 8002110:	2778      	movs	r7, #120	@ 0x78
 8002112:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	6831      	ldr	r1, [r6, #0]
 800211a:	061f      	lsls	r7, r3, #24
 800211c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002120:	d402      	bmi.n	8002128 <_printf_i+0x188>
 8002122:	065f      	lsls	r7, r3, #25
 8002124:	bf48      	it	mi
 8002126:	b2ad      	uxthmi	r5, r5
 8002128:	6031      	str	r1, [r6, #0]
 800212a:	07d9      	lsls	r1, r3, #31
 800212c:	bf44      	itt	mi
 800212e:	f043 0320 	orrmi.w	r3, r3, #32
 8002132:	6023      	strmi	r3, [r4, #0]
 8002134:	b11d      	cbz	r5, 800213e <_printf_i+0x19e>
 8002136:	2310      	movs	r3, #16
 8002138:	e7ac      	b.n	8002094 <_printf_i+0xf4>
 800213a:	4827      	ldr	r0, [pc, #156]	@ (80021d8 <_printf_i+0x238>)
 800213c:	e7e9      	b.n	8002112 <_printf_i+0x172>
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f023 0320 	bic.w	r3, r3, #32
 8002144:	6023      	str	r3, [r4, #0]
 8002146:	e7f6      	b.n	8002136 <_printf_i+0x196>
 8002148:	4616      	mov	r6, r2
 800214a:	e7bd      	b.n	80020c8 <_printf_i+0x128>
 800214c:	6833      	ldr	r3, [r6, #0]
 800214e:	6825      	ldr	r5, [r4, #0]
 8002150:	6961      	ldr	r1, [r4, #20]
 8002152:	1d18      	adds	r0, r3, #4
 8002154:	6030      	str	r0, [r6, #0]
 8002156:	062e      	lsls	r6, r5, #24
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	d501      	bpl.n	8002160 <_printf_i+0x1c0>
 800215c:	6019      	str	r1, [r3, #0]
 800215e:	e002      	b.n	8002166 <_printf_i+0x1c6>
 8002160:	0668      	lsls	r0, r5, #25
 8002162:	d5fb      	bpl.n	800215c <_printf_i+0x1bc>
 8002164:	8019      	strh	r1, [r3, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	6123      	str	r3, [r4, #16]
 800216a:	4616      	mov	r6, r2
 800216c:	e7bc      	b.n	80020e8 <_printf_i+0x148>
 800216e:	6833      	ldr	r3, [r6, #0]
 8002170:	1d1a      	adds	r2, r3, #4
 8002172:	6032      	str	r2, [r6, #0]
 8002174:	681e      	ldr	r6, [r3, #0]
 8002176:	6862      	ldr	r2, [r4, #4]
 8002178:	2100      	movs	r1, #0
 800217a:	4630      	mov	r0, r6
 800217c:	f7fe f830 	bl	80001e0 <memchr>
 8002180:	b108      	cbz	r0, 8002186 <_printf_i+0x1e6>
 8002182:	1b80      	subs	r0, r0, r6
 8002184:	6060      	str	r0, [r4, #4]
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	6123      	str	r3, [r4, #16]
 800218a:	2300      	movs	r3, #0
 800218c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002190:	e7aa      	b.n	80020e8 <_printf_i+0x148>
 8002192:	6923      	ldr	r3, [r4, #16]
 8002194:	4632      	mov	r2, r6
 8002196:	4649      	mov	r1, r9
 8002198:	4640      	mov	r0, r8
 800219a:	47d0      	blx	sl
 800219c:	3001      	adds	r0, #1
 800219e:	d0ad      	beq.n	80020fc <_printf_i+0x15c>
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	079b      	lsls	r3, r3, #30
 80021a4:	d413      	bmi.n	80021ce <_printf_i+0x22e>
 80021a6:	68e0      	ldr	r0, [r4, #12]
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	4298      	cmp	r0, r3
 80021ac:	bfb8      	it	lt
 80021ae:	4618      	movlt	r0, r3
 80021b0:	e7a6      	b.n	8002100 <_printf_i+0x160>
 80021b2:	2301      	movs	r3, #1
 80021b4:	4632      	mov	r2, r6
 80021b6:	4649      	mov	r1, r9
 80021b8:	4640      	mov	r0, r8
 80021ba:	47d0      	blx	sl
 80021bc:	3001      	adds	r0, #1
 80021be:	d09d      	beq.n	80020fc <_printf_i+0x15c>
 80021c0:	3501      	adds	r5, #1
 80021c2:	68e3      	ldr	r3, [r4, #12]
 80021c4:	9903      	ldr	r1, [sp, #12]
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	42ab      	cmp	r3, r5
 80021ca:	dcf2      	bgt.n	80021b2 <_printf_i+0x212>
 80021cc:	e7eb      	b.n	80021a6 <_printf_i+0x206>
 80021ce:	2500      	movs	r5, #0
 80021d0:	f104 0619 	add.w	r6, r4, #25
 80021d4:	e7f5      	b.n	80021c2 <_printf_i+0x222>
 80021d6:	bf00      	nop
 80021d8:	08002645 	.word	0x08002645
 80021dc:	08002656 	.word	0x08002656

080021e0 <__sflush_r>:
 80021e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80021e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e8:	0716      	lsls	r6, r2, #28
 80021ea:	4605      	mov	r5, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	d454      	bmi.n	800229a <__sflush_r+0xba>
 80021f0:	684b      	ldr	r3, [r1, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dc02      	bgt.n	80021fc <__sflush_r+0x1c>
 80021f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	dd48      	ble.n	800228e <__sflush_r+0xae>
 80021fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021fe:	2e00      	cmp	r6, #0
 8002200:	d045      	beq.n	800228e <__sflush_r+0xae>
 8002202:	2300      	movs	r3, #0
 8002204:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002208:	682f      	ldr	r7, [r5, #0]
 800220a:	6a21      	ldr	r1, [r4, #32]
 800220c:	602b      	str	r3, [r5, #0]
 800220e:	d030      	beq.n	8002272 <__sflush_r+0x92>
 8002210:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002212:	89a3      	ldrh	r3, [r4, #12]
 8002214:	0759      	lsls	r1, r3, #29
 8002216:	d505      	bpl.n	8002224 <__sflush_r+0x44>
 8002218:	6863      	ldr	r3, [r4, #4]
 800221a:	1ad2      	subs	r2, r2, r3
 800221c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800221e:	b10b      	cbz	r3, 8002224 <__sflush_r+0x44>
 8002220:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002222:	1ad2      	subs	r2, r2, r3
 8002224:	2300      	movs	r3, #0
 8002226:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002228:	6a21      	ldr	r1, [r4, #32]
 800222a:	4628      	mov	r0, r5
 800222c:	47b0      	blx	r6
 800222e:	1c43      	adds	r3, r0, #1
 8002230:	89a3      	ldrh	r3, [r4, #12]
 8002232:	d106      	bne.n	8002242 <__sflush_r+0x62>
 8002234:	6829      	ldr	r1, [r5, #0]
 8002236:	291d      	cmp	r1, #29
 8002238:	d82b      	bhi.n	8002292 <__sflush_r+0xb2>
 800223a:	4a2a      	ldr	r2, [pc, #168]	@ (80022e4 <__sflush_r+0x104>)
 800223c:	410a      	asrs	r2, r1
 800223e:	07d6      	lsls	r6, r2, #31
 8002240:	d427      	bmi.n	8002292 <__sflush_r+0xb2>
 8002242:	2200      	movs	r2, #0
 8002244:	6062      	str	r2, [r4, #4]
 8002246:	04d9      	lsls	r1, r3, #19
 8002248:	6922      	ldr	r2, [r4, #16]
 800224a:	6022      	str	r2, [r4, #0]
 800224c:	d504      	bpl.n	8002258 <__sflush_r+0x78>
 800224e:	1c42      	adds	r2, r0, #1
 8002250:	d101      	bne.n	8002256 <__sflush_r+0x76>
 8002252:	682b      	ldr	r3, [r5, #0]
 8002254:	b903      	cbnz	r3, 8002258 <__sflush_r+0x78>
 8002256:	6560      	str	r0, [r4, #84]	@ 0x54
 8002258:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800225a:	602f      	str	r7, [r5, #0]
 800225c:	b1b9      	cbz	r1, 800228e <__sflush_r+0xae>
 800225e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002262:	4299      	cmp	r1, r3
 8002264:	d002      	beq.n	800226c <__sflush_r+0x8c>
 8002266:	4628      	mov	r0, r5
 8002268:	f7ff fa9a 	bl	80017a0 <_free_r>
 800226c:	2300      	movs	r3, #0
 800226e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002270:	e00d      	b.n	800228e <__sflush_r+0xae>
 8002272:	2301      	movs	r3, #1
 8002274:	4628      	mov	r0, r5
 8002276:	47b0      	blx	r6
 8002278:	4602      	mov	r2, r0
 800227a:	1c50      	adds	r0, r2, #1
 800227c:	d1c9      	bne.n	8002212 <__sflush_r+0x32>
 800227e:	682b      	ldr	r3, [r5, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0c6      	beq.n	8002212 <__sflush_r+0x32>
 8002284:	2b1d      	cmp	r3, #29
 8002286:	d001      	beq.n	800228c <__sflush_r+0xac>
 8002288:	2b16      	cmp	r3, #22
 800228a:	d11e      	bne.n	80022ca <__sflush_r+0xea>
 800228c:	602f      	str	r7, [r5, #0]
 800228e:	2000      	movs	r0, #0
 8002290:	e022      	b.n	80022d8 <__sflush_r+0xf8>
 8002292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002296:	b21b      	sxth	r3, r3
 8002298:	e01b      	b.n	80022d2 <__sflush_r+0xf2>
 800229a:	690f      	ldr	r7, [r1, #16]
 800229c:	2f00      	cmp	r7, #0
 800229e:	d0f6      	beq.n	800228e <__sflush_r+0xae>
 80022a0:	0793      	lsls	r3, r2, #30
 80022a2:	680e      	ldr	r6, [r1, #0]
 80022a4:	bf08      	it	eq
 80022a6:	694b      	ldreq	r3, [r1, #20]
 80022a8:	600f      	str	r7, [r1, #0]
 80022aa:	bf18      	it	ne
 80022ac:	2300      	movne	r3, #0
 80022ae:	eba6 0807 	sub.w	r8, r6, r7
 80022b2:	608b      	str	r3, [r1, #8]
 80022b4:	f1b8 0f00 	cmp.w	r8, #0
 80022b8:	dde9      	ble.n	800228e <__sflush_r+0xae>
 80022ba:	6a21      	ldr	r1, [r4, #32]
 80022bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80022be:	4643      	mov	r3, r8
 80022c0:	463a      	mov	r2, r7
 80022c2:	4628      	mov	r0, r5
 80022c4:	47b0      	blx	r6
 80022c6:	2800      	cmp	r0, #0
 80022c8:	dc08      	bgt.n	80022dc <__sflush_r+0xfc>
 80022ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d2:	81a3      	strh	r3, [r4, #12]
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295
 80022d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022dc:	4407      	add	r7, r0
 80022de:	eba8 0800 	sub.w	r8, r8, r0
 80022e2:	e7e7      	b.n	80022b4 <__sflush_r+0xd4>
 80022e4:	dfbffffe 	.word	0xdfbffffe

080022e8 <_fflush_r>:
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	690b      	ldr	r3, [r1, #16]
 80022ec:	4605      	mov	r5, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	b913      	cbnz	r3, 80022f8 <_fflush_r+0x10>
 80022f2:	2500      	movs	r5, #0
 80022f4:	4628      	mov	r0, r5
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
 80022f8:	b118      	cbz	r0, 8002302 <_fflush_r+0x1a>
 80022fa:	6a03      	ldr	r3, [r0, #32]
 80022fc:	b90b      	cbnz	r3, 8002302 <_fflush_r+0x1a>
 80022fe:	f7ff f82d 	bl	800135c <__sinit>
 8002302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f3      	beq.n	80022f2 <_fflush_r+0xa>
 800230a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800230c:	07d0      	lsls	r0, r2, #31
 800230e:	d404      	bmi.n	800231a <_fflush_r+0x32>
 8002310:	0599      	lsls	r1, r3, #22
 8002312:	d402      	bmi.n	800231a <_fflush_r+0x32>
 8002314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002316:	f7ff fa40 	bl	800179a <__retarget_lock_acquire_recursive>
 800231a:	4628      	mov	r0, r5
 800231c:	4621      	mov	r1, r4
 800231e:	f7ff ff5f 	bl	80021e0 <__sflush_r>
 8002322:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002324:	07da      	lsls	r2, r3, #31
 8002326:	4605      	mov	r5, r0
 8002328:	d4e4      	bmi.n	80022f4 <_fflush_r+0xc>
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	059b      	lsls	r3, r3, #22
 800232e:	d4e1      	bmi.n	80022f4 <_fflush_r+0xc>
 8002330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002332:	f7ff fa33 	bl	800179c <__retarget_lock_release_recursive>
 8002336:	e7dd      	b.n	80022f4 <_fflush_r+0xc>

08002338 <__swhatbuf_r>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	460c      	mov	r4, r1
 800233c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002340:	2900      	cmp	r1, #0
 8002342:	b096      	sub	sp, #88	@ 0x58
 8002344:	4615      	mov	r5, r2
 8002346:	461e      	mov	r6, r3
 8002348:	da0d      	bge.n	8002366 <__swhatbuf_r+0x2e>
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	bf14      	ite	ne
 8002356:	2340      	movne	r3, #64	@ 0x40
 8002358:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800235c:	2000      	movs	r0, #0
 800235e:	6031      	str	r1, [r6, #0]
 8002360:	602b      	str	r3, [r5, #0]
 8002362:	b016      	add	sp, #88	@ 0x58
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	466a      	mov	r2, sp
 8002368:	f000 f896 	bl	8002498 <_fstat_r>
 800236c:	2800      	cmp	r0, #0
 800236e:	dbec      	blt.n	800234a <__swhatbuf_r+0x12>
 8002370:	9901      	ldr	r1, [sp, #4]
 8002372:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002376:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800237a:	4259      	negs	r1, r3
 800237c:	4159      	adcs	r1, r3
 800237e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002382:	e7eb      	b.n	800235c <__swhatbuf_r+0x24>

08002384 <__smakebuf_r>:
 8002384:	898b      	ldrh	r3, [r1, #12]
 8002386:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002388:	079d      	lsls	r5, r3, #30
 800238a:	4606      	mov	r6, r0
 800238c:	460c      	mov	r4, r1
 800238e:	d507      	bpl.n	80023a0 <__smakebuf_r+0x1c>
 8002390:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	6123      	str	r3, [r4, #16]
 8002398:	2301      	movs	r3, #1
 800239a:	6163      	str	r3, [r4, #20]
 800239c:	b003      	add	sp, #12
 800239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a0:	ab01      	add	r3, sp, #4
 80023a2:	466a      	mov	r2, sp
 80023a4:	f7ff ffc8 	bl	8002338 <__swhatbuf_r>
 80023a8:	9f00      	ldr	r7, [sp, #0]
 80023aa:	4605      	mov	r5, r0
 80023ac:	4639      	mov	r1, r7
 80023ae:	4630      	mov	r0, r6
 80023b0:	f7ff fa62 	bl	8001878 <_malloc_r>
 80023b4:	b948      	cbnz	r0, 80023ca <__smakebuf_r+0x46>
 80023b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ba:	059a      	lsls	r2, r3, #22
 80023bc:	d4ee      	bmi.n	800239c <__smakebuf_r+0x18>
 80023be:	f023 0303 	bic.w	r3, r3, #3
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	81a3      	strh	r3, [r4, #12]
 80023c8:	e7e2      	b.n	8002390 <__smakebuf_r+0xc>
 80023ca:	89a3      	ldrh	r3, [r4, #12]
 80023cc:	6020      	str	r0, [r4, #0]
 80023ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023d2:	81a3      	strh	r3, [r4, #12]
 80023d4:	9b01      	ldr	r3, [sp, #4]
 80023d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80023da:	b15b      	cbz	r3, 80023f4 <__smakebuf_r+0x70>
 80023dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023e0:	4630      	mov	r0, r6
 80023e2:	f000 f86b 	bl	80024bc <_isatty_r>
 80023e6:	b128      	cbz	r0, 80023f4 <__smakebuf_r+0x70>
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	431d      	orrs	r5, r3
 80023f8:	81a5      	strh	r5, [r4, #12]
 80023fa:	e7cf      	b.n	800239c <__smakebuf_r+0x18>

080023fc <_putc_r>:
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	460d      	mov	r5, r1
 8002400:	4614      	mov	r4, r2
 8002402:	4606      	mov	r6, r0
 8002404:	b118      	cbz	r0, 800240e <_putc_r+0x12>
 8002406:	6a03      	ldr	r3, [r0, #32]
 8002408:	b90b      	cbnz	r3, 800240e <_putc_r+0x12>
 800240a:	f7fe ffa7 	bl	800135c <__sinit>
 800240e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002410:	07d8      	lsls	r0, r3, #31
 8002412:	d405      	bmi.n	8002420 <_putc_r+0x24>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	0599      	lsls	r1, r3, #22
 8002418:	d402      	bmi.n	8002420 <_putc_r+0x24>
 800241a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800241c:	f7ff f9bd 	bl	800179a <__retarget_lock_acquire_recursive>
 8002420:	68a3      	ldr	r3, [r4, #8]
 8002422:	3b01      	subs	r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	60a3      	str	r3, [r4, #8]
 8002428:	da05      	bge.n	8002436 <_putc_r+0x3a>
 800242a:	69a2      	ldr	r2, [r4, #24]
 800242c:	4293      	cmp	r3, r2
 800242e:	db12      	blt.n	8002456 <_putc_r+0x5a>
 8002430:	b2eb      	uxtb	r3, r5
 8002432:	2b0a      	cmp	r3, #10
 8002434:	d00f      	beq.n	8002456 <_putc_r+0x5a>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	6022      	str	r2, [r4, #0]
 800243c:	701d      	strb	r5, [r3, #0]
 800243e:	b2ed      	uxtb	r5, r5
 8002440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002442:	07da      	lsls	r2, r3, #31
 8002444:	d405      	bmi.n	8002452 <_putc_r+0x56>
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	059b      	lsls	r3, r3, #22
 800244a:	d402      	bmi.n	8002452 <_putc_r+0x56>
 800244c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800244e:	f7ff f9a5 	bl	800179c <__retarget_lock_release_recursive>
 8002452:	4628      	mov	r0, r5
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	4629      	mov	r1, r5
 8002458:	4622      	mov	r2, r4
 800245a:	4630      	mov	r0, r6
 800245c:	f7ff f88f 	bl	800157e <__swbuf_r>
 8002460:	4605      	mov	r5, r0
 8002462:	e7ed      	b.n	8002440 <_putc_r+0x44>

08002464 <memmove>:
 8002464:	4288      	cmp	r0, r1
 8002466:	b510      	push	{r4, lr}
 8002468:	eb01 0402 	add.w	r4, r1, r2
 800246c:	d902      	bls.n	8002474 <memmove+0x10>
 800246e:	4284      	cmp	r4, r0
 8002470:	4623      	mov	r3, r4
 8002472:	d807      	bhi.n	8002484 <memmove+0x20>
 8002474:	1e43      	subs	r3, r0, #1
 8002476:	42a1      	cmp	r1, r4
 8002478:	d008      	beq.n	800248c <memmove+0x28>
 800247a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800247e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002482:	e7f8      	b.n	8002476 <memmove+0x12>
 8002484:	4402      	add	r2, r0
 8002486:	4601      	mov	r1, r0
 8002488:	428a      	cmp	r2, r1
 800248a:	d100      	bne.n	800248e <memmove+0x2a>
 800248c:	bd10      	pop	{r4, pc}
 800248e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002496:	e7f7      	b.n	8002488 <memmove+0x24>

08002498 <_fstat_r>:
 8002498:	b538      	push	{r3, r4, r5, lr}
 800249a:	4d07      	ldr	r5, [pc, #28]	@ (80024b8 <_fstat_r+0x20>)
 800249c:	2300      	movs	r3, #0
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	602b      	str	r3, [r5, #0]
 80024a6:	f7fe fe32 	bl	800110e <_fstat>
 80024aa:	1c43      	adds	r3, r0, #1
 80024ac:	d102      	bne.n	80024b4 <_fstat_r+0x1c>
 80024ae:	682b      	ldr	r3, [r5, #0]
 80024b0:	b103      	cbz	r3, 80024b4 <_fstat_r+0x1c>
 80024b2:	6023      	str	r3, [r4, #0]
 80024b4:	bd38      	pop	{r3, r4, r5, pc}
 80024b6:	bf00      	nop
 80024b8:	200001d8 	.word	0x200001d8

080024bc <_isatty_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	4d06      	ldr	r5, [pc, #24]	@ (80024d8 <_isatty_r+0x1c>)
 80024c0:	2300      	movs	r3, #0
 80024c2:	4604      	mov	r4, r0
 80024c4:	4608      	mov	r0, r1
 80024c6:	602b      	str	r3, [r5, #0]
 80024c8:	f7fe fe31 	bl	800112e <_isatty>
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	d102      	bne.n	80024d6 <_isatty_r+0x1a>
 80024d0:	682b      	ldr	r3, [r5, #0]
 80024d2:	b103      	cbz	r3, 80024d6 <_isatty_r+0x1a>
 80024d4:	6023      	str	r3, [r4, #0]
 80024d6:	bd38      	pop	{r3, r4, r5, pc}
 80024d8:	200001d8 	.word	0x200001d8

080024dc <_sbrk_r>:
 80024dc:	b538      	push	{r3, r4, r5, lr}
 80024de:	4d06      	ldr	r5, [pc, #24]	@ (80024f8 <_sbrk_r+0x1c>)
 80024e0:	2300      	movs	r3, #0
 80024e2:	4604      	mov	r4, r0
 80024e4:	4608      	mov	r0, r1
 80024e6:	602b      	str	r3, [r5, #0]
 80024e8:	f7fe fe3a 	bl	8001160 <_sbrk>
 80024ec:	1c43      	adds	r3, r0, #1
 80024ee:	d102      	bne.n	80024f6 <_sbrk_r+0x1a>
 80024f0:	682b      	ldr	r3, [r5, #0]
 80024f2:	b103      	cbz	r3, 80024f6 <_sbrk_r+0x1a>
 80024f4:	6023      	str	r3, [r4, #0]
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	200001d8 	.word	0x200001d8

080024fc <memcpy>:
 80024fc:	440a      	add	r2, r1
 80024fe:	4291      	cmp	r1, r2
 8002500:	f100 33ff 	add.w	r3, r0, #4294967295
 8002504:	d100      	bne.n	8002508 <memcpy+0xc>
 8002506:	4770      	bx	lr
 8002508:	b510      	push	{r4, lr}
 800250a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800250e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002512:	4291      	cmp	r1, r2
 8002514:	d1f9      	bne.n	800250a <memcpy+0xe>
 8002516:	bd10      	pop	{r4, pc}

08002518 <_realloc_r>:
 8002518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800251c:	4680      	mov	r8, r0
 800251e:	4615      	mov	r5, r2
 8002520:	460c      	mov	r4, r1
 8002522:	b921      	cbnz	r1, 800252e <_realloc_r+0x16>
 8002524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002528:	4611      	mov	r1, r2
 800252a:	f7ff b9a5 	b.w	8001878 <_malloc_r>
 800252e:	b92a      	cbnz	r2, 800253c <_realloc_r+0x24>
 8002530:	f7ff f936 	bl	80017a0 <_free_r>
 8002534:	2400      	movs	r4, #0
 8002536:	4620      	mov	r0, r4
 8002538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800253c:	f000 f81a 	bl	8002574 <_malloc_usable_size_r>
 8002540:	4285      	cmp	r5, r0
 8002542:	4606      	mov	r6, r0
 8002544:	d802      	bhi.n	800254c <_realloc_r+0x34>
 8002546:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800254a:	d8f4      	bhi.n	8002536 <_realloc_r+0x1e>
 800254c:	4629      	mov	r1, r5
 800254e:	4640      	mov	r0, r8
 8002550:	f7ff f992 	bl	8001878 <_malloc_r>
 8002554:	4607      	mov	r7, r0
 8002556:	2800      	cmp	r0, #0
 8002558:	d0ec      	beq.n	8002534 <_realloc_r+0x1c>
 800255a:	42b5      	cmp	r5, r6
 800255c:	462a      	mov	r2, r5
 800255e:	4621      	mov	r1, r4
 8002560:	bf28      	it	cs
 8002562:	4632      	movcs	r2, r6
 8002564:	f7ff ffca 	bl	80024fc <memcpy>
 8002568:	4621      	mov	r1, r4
 800256a:	4640      	mov	r0, r8
 800256c:	f7ff f918 	bl	80017a0 <_free_r>
 8002570:	463c      	mov	r4, r7
 8002572:	e7e0      	b.n	8002536 <_realloc_r+0x1e>

08002574 <_malloc_usable_size_r>:
 8002574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002578:	1f18      	subs	r0, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	bfbc      	itt	lt
 800257e:	580b      	ldrlt	r3, [r1, r0]
 8002580:	18c0      	addlt	r0, r0, r3
 8002582:	4770      	bx	lr

08002584 <_init>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr

08002590 <_fini>:
 8002590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002592:	bf00      	nop
 8002594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002596:	bc08      	pop	{r3}
 8002598:	469e      	mov	lr, r3
 800259a:	4770      	bx	lr
