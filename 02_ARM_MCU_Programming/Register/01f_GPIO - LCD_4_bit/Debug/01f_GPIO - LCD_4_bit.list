
01f_GPIO - LCD_4_bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000584  08000584  00001584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000590  08000590  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000590  08000590  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000590  08000590  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000590  08000590  00001590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000598  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800059c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800059c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013fe  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052f  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00003968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015d  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6d2  00000000  00000000  00003cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022a6  00000000  00000000  00023387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c325b  00000000  00000000  0002562d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8888  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  000e88cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e8ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800056c 	.word	0x0800056c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800056c 	.word	0x0800056c

08000204 <main>:
void PORTS_init(void);



int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  LCD_init(); /* initialize LCD controller */
 8000208:	f000 f828 	bl	800025c <LCD_init>
  while(1)
	{
	  LCD_string("WELCOME ALL");
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <main+0x1c>)
 800020e:	f000 f809 	bl	8000224 <LCD_string>
	  delayMs(500);
 8000212:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000216:	f000 f8e9 	bl	80003ec <delayMs>
	  LCD_string("WELCOME ALL");
 800021a:	bf00      	nop
 800021c:	e7f6      	b.n	800020c <main+0x8>
 800021e:	bf00      	nop
 8000220:	08000584 	.word	0x08000584

08000224 <LCD_string>:
	}
}

void LCD_string(char str[])
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	for(int i=0;str[i]!='\0';i++)
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
 8000230:	e009      	b.n	8000246 <LCD_string+0x22>
	{
	    LCD_data(str[i]);
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f89a 	bl	8000374 <LCD_data>
	for(int i=0;str[i]!='\0';i++)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	3301      	adds	r3, #1
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	687a      	ldr	r2, [r7, #4]
 800024a:	4413      	add	r3, r2
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1ef      	bne.n	8000232 <LCD_string+0xe>
	}

}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <LCD_init>:

void LCD_init(void) /* initialize port pins then initialize LCD controller */
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	PORTS_init();
 8000260:	f000 f812 	bl	8000288 <PORTS_init>
	delayMs(30); /* initialization sequence */
 8000264:	201e      	movs	r0, #30
 8000266:	f000 f8c1 	bl	80003ec <delayMs>
//	LCD_command(0x30);
//	delayMs(10);
//	LCD_command(0x30);
//	delayMs(1);
//	LCD_command(0x30);
	LCD_command(0x28);		/*set 4-bit data, 2-line, 5x7 font */
 800026a:	2028      	movs	r0, #40	@ 0x28
 800026c:	f000 f83e 	bl	80002ec <LCD_command>
	LCD_command(0x06);		/*move cursor right after each char */
 8000270:	2006      	movs	r0, #6
 8000272:	f000 f83b 	bl	80002ec <LCD_command>
	LCD_command(0x01);		/*clear screen, move cursor to home */
 8000276:	2001      	movs	r0, #1
 8000278:	f000 f838 	bl	80002ec <LCD_command>
	LCD_command(0x0F);		/*turn on display, cursor blinking */
 800027c:	200f      	movs	r0, #15
 800027e:	f000 f835 	bl	80002ec <LCD_command>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <PORTS_init>:


void PORTS_init(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x06; 			/* enable GPIOB/C clock */
 800028c:	4b14      	ldr	r3, [pc, #80]	@ (80002e0 <PORTS_init+0x58>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a13      	ldr	r2, [pc, #76]	@ (80002e0 <PORTS_init+0x58>)
 8000292:	f043 0306 	orr.w	r3, r3, #6
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER &= ~0x0000FC00; 		/* clear pin mode */
 8000298:	4b12      	ldr	r3, [pc, #72]	@ (80002e4 <PORTS_init+0x5c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a11      	ldr	r2, [pc, #68]	@ (80002e4 <PORTS_init+0x5c>)
 800029e:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 80002a2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00005400; 		/* set pin output mode */
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <PORTS_init+0x5c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	@ (80002e4 <PORTS_init+0x5c>)
 80002aa:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0x00C00000; 		/*turn off EN and R/W */
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <PORTS_init+0x5c>)
 80002b2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80002b6:	619a      	str	r2, [r3, #24]

	GPIOC->MODER &= ~0x0000FFFF; 		/* clear pin mode */
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <PORTS_init+0x60>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <PORTS_init+0x60>)
 80002be:	0c1b      	lsrs	r3, r3, #16
 80002c0:	041b      	lsls	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00005555; 		/* set pin output mode */
 80002c4:	4b08      	ldr	r3, [pc, #32]	@ (80002e8 <PORTS_init+0x60>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a07      	ldr	r2, [pc, #28]	@ (80002e8 <PORTS_init+0x60>)
 80002ca:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80002ce:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020800 	.word	0x40020800

080002ec <LCD_command>:


void LCD_command(unsigned char command)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = (RS | RW) << 16; 		/* RS = 0, R/W = 0 */
 80002f6:	4b1d      	ldr	r3, [pc, #116]	@ (800036c <LCD_command+0x80>)
 80002f8:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80002fc:	619a      	str	r2, [r3, #24]
	GPIOC->ODR =command; 				/* put command on data bus */
 80002fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000370 <LCD_command+0x84>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN; 				/* pulse E high */
 8000304:	4b19      	ldr	r3, [pc, #100]	@ (800036c <LCD_command+0x80>)
 8000306:	2280      	movs	r2, #128	@ 0x80
 8000308:	619a      	str	r2, [r3, #24]
	delayMs(0);
 800030a:	2000      	movs	r0, #0
 800030c:	f000 f86e 	bl	80003ec <delayMs>
	GPIOB->BSRR = EN << 16; 			/* clear E */
 8000310:	4b16      	ldr	r3, [pc, #88]	@ (800036c <LCD_command+0x80>)
 8000312:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000316:	619a      	str	r2, [r3, #24]
	if (command < 4)
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d803      	bhi.n	8000326 <LCD_command+0x3a>
		delayMs(2); 				/* command 1 and 2 needs up to 1.64ms */
 800031e:	2002      	movs	r0, #2
 8000320:	f000 f864 	bl	80003ec <delayMs>
 8000324:	e002      	b.n	800032c <LCD_command+0x40>
	else
		delayMs(1); 				/* all others 40 us */
 8000326:	2001      	movs	r0, #1
 8000328:	f000 f860 	bl	80003ec <delayMs>


//	-------following again repeated after shifting
	GPIOB->BSRR = (RS | RW) << 16; 		/* RS = 0, R/W = 0 */
 800032c:	4b0f      	ldr	r3, [pc, #60]	@ (800036c <LCD_command+0x80>)
 800032e:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000332:	619a      	str	r2, [r3, #24]
	GPIOC->ODR = (command << 4); 				/* put command on data bus */
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <LCD_command+0x84>)
 8000338:	011b      	lsls	r3, r3, #4
 800033a:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN; 				/* pulse E high */
 800033c:	4b0b      	ldr	r3, [pc, #44]	@ (800036c <LCD_command+0x80>)
 800033e:	2280      	movs	r2, #128	@ 0x80
 8000340:	619a      	str	r2, [r3, #24]
	delayMs(0);
 8000342:	2000      	movs	r0, #0
 8000344:	f000 f852 	bl	80003ec <delayMs>
	GPIOB->BSRR = EN << 16; 			/* clear E */
 8000348:	4b08      	ldr	r3, [pc, #32]	@ (800036c <LCD_command+0x80>)
 800034a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800034e:	619a      	str	r2, [r3, #24]
	if (command < 4)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	2b03      	cmp	r3, #3
 8000354:	d803      	bhi.n	800035e <LCD_command+0x72>
		delayMs(2); 				/* command 1 and 2 needs up to 1.64ms */
 8000356:	2002      	movs	r0, #2
 8000358:	f000 f848 	bl	80003ec <delayMs>
	else
		delayMs(1); 				/* all others 40 us */
}
 800035c:	e002      	b.n	8000364 <LCD_command+0x78>
		delayMs(1); 				/* all others 40 us */
 800035e:	2001      	movs	r0, #1
 8000360:	f000 f844 	bl	80003ec <delayMs>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40020400 	.word	0x40020400
 8000370:	40020800 	.word	0x40020800

08000374 <LCD_data>:

void LCD_data(char data)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = RS; 			/* RS = 1 */
 800037e:	4b19      	ldr	r3, [pc, #100]	@ (80003e4 <LCD_data+0x70>)
 8000380:	2220      	movs	r2, #32
 8000382:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = RW << 16; 		/* R/W = 0 */
 8000384:	4b17      	ldr	r3, [pc, #92]	@ (80003e4 <LCD_data+0x70>)
 8000386:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800038a:	619a      	str	r2, [r3, #24]
	delayMs(1);
 800038c:	2001      	movs	r0, #1
 800038e:	f000 f82d 	bl	80003ec <delayMs>

	GPIOC->ODR = data; 			/* put data on data bus */
 8000392:	4a15      	ldr	r2, [pc, #84]	@ (80003e8 <LCD_data+0x74>)
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN; 			/*pulse E high */
 8000398:	4b12      	ldr	r3, [pc, #72]	@ (80003e4 <LCD_data+0x70>)
 800039a:	2280      	movs	r2, #128	@ 0x80
 800039c:	619a      	str	r2, [r3, #24]
	delayMs(0);
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 f824 	bl	80003ec <delayMs>
	GPIOB->BSRR = EN << 16; 		/* clear E */
 80003a4:	4b0f      	ldr	r3, [pc, #60]	@ (80003e4 <LCD_data+0x70>)
 80003a6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80003aa:	619a      	str	r2, [r3, #24]

	//-------following again repeated after shifting

	GPIOB->BSRR = RS; 			/* RS = 1 */
 80003ac:	4b0d      	ldr	r3, [pc, #52]	@ (80003e4 <LCD_data+0x70>)
 80003ae:	2220      	movs	r2, #32
 80003b0:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = RW << 16; 		/* R/W = 0 */
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <LCD_data+0x70>)
 80003b4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80003b8:	619a      	str	r2, [r3, #24]
	delayMs(1);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f000 f816 	bl	80003ec <delayMs>

	GPIOC->ODR = (data << 4); 			/* put data on data bus */
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	4a09      	ldr	r2, [pc, #36]	@ (80003e8 <LCD_data+0x74>)
 80003c4:	011b      	lsls	r3, r3, #4
 80003c6:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN; 			/*pulse E high */
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <LCD_data+0x70>)
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	619a      	str	r2, [r3, #24]
	delayMs(0);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 f80c 	bl	80003ec <delayMs>
	GPIOB->BSRR = EN << 16; 		/* clear E */
 80003d4:	4b03      	ldr	r3, [pc, #12]	@ (80003e4 <LCD_data+0x70>)
 80003d6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80003da:	619a      	str	r2, [r3, #24]
}
 80003dc:	bf00      	nop
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40020400 	.word	0x40020400
 80003e8:	40020800 	.word	0x40020800

080003ec <delayMs>:

/* delay n milliseconds (16 MHz CPU clock) */
void delayMs(int n)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 80003f4:	e00d      	b.n	8000412 <delayMs+0x26>
		for (i = 0; i < 3195; i++) ;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e002      	b.n	8000402 <delayMs+0x16>
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f640 427a 	movw	r2, #3194	@ 0xc7a
 8000408:	4293      	cmp	r3, r2
 800040a:	ddf7      	ble.n	80003fc <delayMs+0x10>
	for (; n > 0; n--)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	dcee      	bgt.n	80003f6 <delayMs+0xa>
}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr

08000426 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800042a:	bf00      	nop
 800042c:	e7fd      	b.n	800042a <NMI_Handler+0x4>

0800042e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000432:	bf00      	nop
 8000434:	e7fd      	b.n	8000432 <HardFault_Handler+0x4>

08000436 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800043a:	bf00      	nop
 800043c:	e7fd      	b.n	800043a <MemManage_Handler+0x4>

0800043e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000442:	bf00      	nop
 8000444:	e7fd      	b.n	8000442 <BusFault_Handler+0x4>

08000446 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800044a:	bf00      	nop
 800044c:	e7fd      	b.n	800044a <UsageFault_Handler+0x4>

0800044e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047c:	f000 f83e 	bl	80004fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <SystemInit+0x20>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800048e:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <SystemInit+0x20>)
 8000490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004ac:	f7ff ffea 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	@ (80004e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	@ (80004e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	@ (80004ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	@ (80004f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	@ (80004f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80004d6:	f000 f825 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004da:	f7ff fe93 	bl	8000204 <main>
  bx  lr    
 80004de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ec:	08000598 	.word	0x08000598
  ldr r2, =_sbss
 80004f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f4:	20000024 	.word	0x20000024

080004f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <HAL_IncTick+0x20>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <HAL_IncTick+0x24>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4413      	add	r3, r2
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <HAL_IncTick+0x24>)
 800050e:	6013      	str	r3, [r2, #0]
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000020 	.word	0x20000020

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	4d0d      	ldr	r5, [pc, #52]	@ (800055c <__libc_init_array+0x38>)
 8000528:	4c0d      	ldr	r4, [pc, #52]	@ (8000560 <__libc_init_array+0x3c>)
 800052a:	1b64      	subs	r4, r4, r5
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	2600      	movs	r6, #0
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	4d0b      	ldr	r5, [pc, #44]	@ (8000564 <__libc_init_array+0x40>)
 8000536:	4c0c      	ldr	r4, [pc, #48]	@ (8000568 <__libc_init_array+0x44>)
 8000538:	f000 f818 	bl	800056c <_init>
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	2600      	movs	r6, #0
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	f855 3b04 	ldr.w	r3, [r5], #4
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	f855 3b04 	ldr.w	r3, [r5], #4
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000590 	.word	0x08000590
 8000560:	08000590 	.word	0x08000590
 8000564:	08000590 	.word	0x08000590
 8000568:	08000594 	.word	0x08000594

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	bf00      	nop
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
