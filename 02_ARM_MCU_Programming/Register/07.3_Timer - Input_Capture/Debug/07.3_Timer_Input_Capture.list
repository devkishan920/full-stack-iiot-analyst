
07.3_Timer_Input_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000031c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000014e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004e8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004ec  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004ec  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000145d  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a7  00000000  00000000  00003491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000145  00000000  00000000  00003b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f41  00000000  00000000  00003c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fcb  00000000  00000000  0001cb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3236  00000000  00000000  0001eb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1d8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000568  00000000  00000000  000e1dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000e233c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004c8 	.word	0x080004c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004c8 	.word	0x080004c8

08000204 <gpio_init>:
#include "stm32f446xx.h"

volatile unsigned int time_count = 0;

void gpio_init() // Step 1 : Configure PA6 to Alternate Function
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (1<<0); // Enable clock to Port A
 8000208:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <gpio_init+0x4c>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020c:	4a10      	ldr	r2, [pc, #64]	@ (8000250 <gpio_init+0x4c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOA->MODER &= ~(0x3 << (2*6));
 8000214:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <gpio_init+0x50>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0e      	ldr	r2, [pc, #56]	@ (8000254 <gpio_init+0x50>)
 800021a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800021e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0x2 << (2*6)); // Set PA6 to Alternate Mode
 8000220:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <gpio_init+0x50>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0b      	ldr	r2, [pc, #44]	@ (8000254 <gpio_init+0x50>)
 8000226:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800022a:	6013      	str	r3, [r2, #0]

  GPIOA->AFR[0] &= ~(0xF000000);
 800022c:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <gpio_init+0x50>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <gpio_init+0x50>)
 8000232:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8000236:	6213      	str	r3, [r2, #32]
  GPIOA->AFR[0] |= (0x2000000); // PA6 to AF2 : Timer3 Ch1
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <gpio_init+0x50>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a05      	ldr	r2, [pc, #20]	@ (8000254 <gpio_init+0x50>)
 800023e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000242:	6213      	str	r3, [r2, #32]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800
 8000254:	40020000 	.word	0x40020000

08000258 <tim3_init>:

// PreScaler : division factor useful for setting the frequency, at which timer operates

void tim3_init() // Step 2 : Timer Configuration - Timer3 Ch1 for Input Capture Mode
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= (1<<1); // Giving clock to Timer3
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <tim3_init+0x60>)
 800025e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000260:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <tim3_init+0x60>)
 8000262:	f043 0302 	orr.w	r3, r3, #2
 8000266:	6413      	str	r3, [r2, #64]	@ 0x40

  TIM3->PSC = (1600-1); // 16000000/1600 = 10KHz. Timer frequency is set to 10KHz, For Capturing Time Stamps
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <tim3_init+0x64>)
 800026a:	f240 623f 	movw	r2, #1599	@ 0x63f
 800026e:	629a      	str	r2, [r3, #40]	@ 0x28

  //** Set Tim3 Ch1 to "Input Capture Mode", using "TIMx capture/compare mode register 1 (TIMx_CCMR1)" See Pg. - 569
  TIM3->CCMR1 &= ~(0x3); // Cleared Bit 0,1
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <tim3_init+0x64>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a11      	ldr	r2, [pc, #68]	@ (80002bc <tim3_init+0x64>)
 8000276:	f023 0303 	bic.w	r3, r3, #3
 800027a:	6193      	str	r3, [r2, #24]
  TIM3->CCMR1 |= (0x1); //  CC1 channel is configured as input, IC1 is mapped on TI1 Bit0-1, Bit1-0
 800027c:	4b0f      	ldr	r3, [pc, #60]	@ (80002bc <tim3_init+0x64>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <tim3_init+0x64>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6193      	str	r3, [r2, #24]

  //** Setting POLARITY of Input Capture Module, i.e., Capturing Interrupt should be either at Rising, Falling or Both. This is done using "TIMx capture/compare enable register (TIMx_CCER)" bit0 see pg.- 571
  TIM3->CCER |= (1<<0); // Enable Input Capture Mode
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <tim3_init+0x64>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	4a0b      	ldr	r2, [pc, #44]	@ (80002bc <tim3_init+0x64>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6213      	str	r3, [r2, #32]

// Using bit 1,3 setting rising or falling edge
  TIM3->CCER &= ~(1<<1) & ~(1<<3);
 8000294:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <tim3_init+0x64>)
 8000296:	6a1b      	ldr	r3, [r3, #32]
 8000298:	4a08      	ldr	r2, [pc, #32]	@ (80002bc <tim3_init+0x64>)
 800029a:	f023 030a 	bic.w	r3, r3, #10
 800029e:	6213      	str	r3, [r2, #32]

  // Enable TImer3
  TIM3->CR1 |= (1<<0);
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <tim3_init+0x64>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a05      	ldr	r2, [pc, #20]	@ (80002bc <tim3_init+0x64>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40000400 	.word	0x40000400

080002c0 <main>:

int main()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  gpio_init();
 80002c4:	f7ff ff9e 	bl	8000204 <gpio_init>
  tim3_init();
 80002c8:	f7ff ffc6 	bl	8000258 <tim3_init>

//  ------------------------------------------ Output Compare Code
  // Configuring PA5 to to Output Timer Compare Mode
   RCC->AHB1ENR |= (1 << 0); // Enable GPIOA clock
 80002cc:	4b28      	ldr	r3, [pc, #160]	@ (8000370 <main+0xb0>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d0:	4a27      	ldr	r2, [pc, #156]	@ (8000370 <main+0xb0>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	@ 0x30

   GPIOA->MODER &= ~(3 << (2 * 5)); // Clear mode for PA5
 80002d8:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <main+0xb4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a25      	ldr	r2, [pc, #148]	@ (8000374 <main+0xb4>)
 80002de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002e2:	6013      	str	r3, [r2, #0]

   GPIOA->MODER |= (2 << (2 * 5)); // Set PA5 to alternate function mode
 80002e4:	4b23      	ldr	r3, [pc, #140]	@ (8000374 <main+0xb4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a22      	ldr	r2, [pc, #136]	@ (8000374 <main+0xb4>)
 80002ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002ee:	6013      	str	r3, [r2, #0]
   // OR
   // GPIOA->MODER |= (1 << ((2 * 5)+1));


   GPIOA->AFR[0] &= ~(0xF << (4 * 5)); // Clear pin alternate function bits for PA5
 80002f0:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <main+0xb4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000374 <main+0xb4>)
 80002f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80002fa:	6213      	str	r3, [r2, #32]
   // OR
 //  GPIOA->AFR[0] &= ~(0xF00000);

   // AF1 PA5 : Timer2 Ch1
   GPIOA->AFR[0] |= (1 << (4 * 5)); // Set pin to AF1 for TIM2 CH1
 80002fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <main+0xb4>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a1c      	ldr	r2, [pc, #112]	@ (8000374 <main+0xb4>)
 8000302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000306:	6213      	str	r3, [r2, #32]
   // OR
 //  GPIOA->AFR[0] |= (0x100000);


 // Step 2 - Configure TIM2 to 1 Hz and
   RCC->APB1ENR |= (1 << 0); // Enable TIM2 clock
 8000308:	4b19      	ldr	r3, [pc, #100]	@ (8000370 <main+0xb0>)
 800030a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800030c:	4a18      	ldr	r2, [pc, #96]	@ (8000370 <main+0xb0>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6413      	str	r3, [r2, #64]	@ 0x40
   TIM2->PSC = (16000 - 1); // Set Pre-Scaler (16000000/16000 = 1KHz). Timer frequency is set to 1KHz, For Generating Pulses
 8000314:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000318:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800031c:	629a      	str	r2, [r3, #40]	@ 0x28
   TIM2->ARR = 1000; // Set auto-reload register to 1000
 800031e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000322:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000326:	62da      	str	r2, [r3, #44]	@ 0x2c

 // Step 3 - Toggle CH1 output when the counter value is 0
   TIM2->CCMR1 = 0x30; //(3 << 4); // Set output to toggle on match (OC1M = 0110)
 8000328:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800032c:	2230      	movs	r2, #48	@ 0x30
 800032e:	619a      	str	r2, [r3, #24]
   TIM2->CCR1 = 0; // Set compare match value to 0 (CCR1 = 0)
 8000330:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000334:	2200      	movs	r2, #0
 8000336:	635a      	str	r2, [r3, #52]	@ 0x34
   TIM2->CCER |= (1 << 0); // Enable CH1 compare mode (CC1E = 1)
 8000338:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000342:	f043 0301 	orr.w	r3, r3, #1
 8000346:	6213      	str	r3, [r2, #32]
   TIM2->CNT = 0; // Clear counter (CNT = 0)
 8000348:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800034c:	2200      	movs	r2, #0
 800034e:	625a      	str	r2, [r3, #36]	@ 0x24
   TIM2->CR1 = (1 << 0);
 8000350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]

  // Step 3 : Capture Timer Count Value at each rising edge. This is using "TIMx status register (TIMx_SR)", see pg.-564

  while(1)
    {
      while(!(TIM3->SR & (1<<0))) // Wait till Input Capture Rising Edge Interrupt Detected
 8000358:	bf00      	nop
 800035a:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <main+0xb8>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <main+0x9a>
	{

	}
      // Holding Capture value in "TIMx capture/compare register 1 (TIMx_CCR1)"
      time_count = TIM3->CCR1; // reading the capture register
 8000366:	4b04      	ldr	r3, [pc, #16]	@ (8000378 <main+0xb8>)
 8000368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800036a:	4a04      	ldr	r2, [pc, #16]	@ (800037c <main+0xbc>)
 800036c:	6013      	str	r3, [r2, #0]
      while(!(TIM3->SR & (1<<0))) // Wait till Input Capture Rising Edge Interrupt Detected
 800036e:	e7f3      	b.n	8000358 <main+0x98>
 8000370:	40023800 	.word	0x40023800
 8000374:	40020000 	.word	0x40020000
 8000378:	40000400 	.word	0x40000400
 800037c:	20000020 	.word	0x20000020

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <NMI_Handler+0x4>

08000388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <HardFault_Handler+0x4>

08000390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <MemManage_Handler+0x4>

08000398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d6:	f000 f83f 	bl	8000458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <SystemInit+0x20>)
 80003e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ea:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <SystemInit+0x20>)
 80003ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800043c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000408:	f7ff ffea 	bl	80003e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	@ (8000440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	@ (8000444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	@ (8000448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	@ (8000450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000432:	f000 f825 	bl	8000480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000436:	f7ff ff43 	bl	80002c0 <main>
  bx  lr    
 800043a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800043c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000448:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 800044c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000450:	20000028 	.word	0x20000028

08000454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC_IRQHandler>
	...

08000458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <HAL_IncTick+0x20>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	461a      	mov	r2, r3
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_IncTick+0x24>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4413      	add	r3, r2
 8000468:	4a04      	ldr	r2, [pc, #16]	@ (800047c <HAL_IncTick+0x24>)
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	20000000 	.word	0x20000000
 800047c:	20000024 	.word	0x20000024

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	4d0d      	ldr	r5, [pc, #52]	@ (80004b8 <__libc_init_array+0x38>)
 8000484:	4c0d      	ldr	r4, [pc, #52]	@ (80004bc <__libc_init_array+0x3c>)
 8000486:	1b64      	subs	r4, r4, r5
 8000488:	10a4      	asrs	r4, r4, #2
 800048a:	2600      	movs	r6, #0
 800048c:	42a6      	cmp	r6, r4
 800048e:	d109      	bne.n	80004a4 <__libc_init_array+0x24>
 8000490:	4d0b      	ldr	r5, [pc, #44]	@ (80004c0 <__libc_init_array+0x40>)
 8000492:	4c0c      	ldr	r4, [pc, #48]	@ (80004c4 <__libc_init_array+0x44>)
 8000494:	f000 f818 	bl	80004c8 <_init>
 8000498:	1b64      	subs	r4, r4, r5
 800049a:	10a4      	asrs	r4, r4, #2
 800049c:	2600      	movs	r6, #0
 800049e:	42a6      	cmp	r6, r4
 80004a0:	d105      	bne.n	80004ae <__libc_init_array+0x2e>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a8:	4798      	blx	r3
 80004aa:	3601      	adds	r6, #1
 80004ac:	e7ee      	b.n	800048c <__libc_init_array+0xc>
 80004ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b2:	4798      	blx	r3
 80004b4:	3601      	adds	r6, #1
 80004b6:	e7f2      	b.n	800049e <__libc_init_array+0x1e>
 80004b8:	080004e0 	.word	0x080004e0
 80004bc:	080004e0 	.word	0x080004e0
 80004c0:	080004e0 	.word	0x080004e0
 80004c4:	080004e4 	.word	0x080004e4

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
