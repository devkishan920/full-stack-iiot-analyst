
07.14_Timer - PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000310  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d4  080004d4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000014d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004d8  080004d8  000014d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004dc  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004e0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004e0  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ef  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000512  00000000  00000000  00003523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f41  00000000  00000000  00003d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fd8  00000000  00000000  0001ccaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c324d  00000000  00000000  0001ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005bc  00000000  00000000  000e1f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000e24d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004bc 	.word	0x080004bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004bc 	.word	0x080004bc

08000204 <delay>:
//// Using General Purpose Timer2 Ch1 AF1

#include "stm32f446xx.h"

void delay(int d)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  for(int i=0; i<d*500; i++);
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	e002      	b.n	8000218 <delay+0x14>
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	3301      	adds	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800021e:	fb02 f303 	mul.w	r3, r2, r3
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	429a      	cmp	r2, r3
 8000226:	dbf4      	blt.n	8000212 <delay+0xe>
}
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <gpio_init>:

void gpio_init() // Setting PA5 to Alternate Mode
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (1<<0);
 800023c:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <gpio_init+0x40>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <gpio_init+0x40>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOA->MODER &= ~(0x3<<(2*5));
 8000248:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <gpio_init+0x44>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a0b      	ldr	r2, [pc, #44]	@ (800027c <gpio_init+0x44>)
 800024e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000252:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0x2<<(2*5));
 8000254:	4b09      	ldr	r3, [pc, #36]	@ (800027c <gpio_init+0x44>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a08      	ldr	r2, [pc, #32]	@ (800027c <gpio_init+0x44>)
 800025a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800025e:	6013      	str	r3, [r2, #0]

  GPIOA->AFR[0] |= (0x100000); // set to alternate function of timer2_ch1
 8000260:	4b06      	ldr	r3, [pc, #24]	@ (800027c <gpio_init+0x44>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a05      	ldr	r2, [pc, #20]	@ (800027c <gpio_init+0x44>)
 8000266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800026a:	6213      	str	r3, [r2, #32]
}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000

08000280 <tim2_pwm_init>:

void tim2_pwm_init()
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= (1<<0); // Enabling Clock to Timer2
 8000284:	4b1d      	ldr	r3, [pc, #116]	@ (80002fc <tim2_pwm_init+0x7c>)
 8000286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000288:	4a1c      	ldr	r2, [pc, #112]	@ (80002fc <tim2_pwm_init+0x7c>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6413      	str	r3, [r2, #64]	@ 0x40

  TIM2->PSC = 15; // Set PreScaler Value = 15 (16-1) , i.e., fck/16 = 1MHz
 8000290:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000294:	220f      	movs	r2, #15
 8000296:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = 1000-1; // Set ARR Value
 8000298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  TIM2->CCMR1 |= (0x60);// Set timer to PWM, using TIMx capture/compare mode register 1 (TIMx_CCMR1) - OB1M (bit 4,5,6)
 80002a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002b0:	6193      	str	r3, [r2, #24]

  TIM2->CCMR1 |= (0x8);//Enable PreLoad; Bit 3 OC1PE: Output compare 1 preload enable
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002bc:	f043 0308 	orr.w	r3, r3, #8
 80002c0:	6193      	str	r3, [r2, #24]

  TIM2->CCER |= (1<<0); // Set timer_pwm to output capture mode using, TIMx capture/compare enable register (TIMx_CCER) - bit 0 (CC1E) = enable output
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6213      	str	r3, [r2, #32]

  TIM2->CR1 |= (1 << 7);      // Enable auto-reload preload
 80002d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002e0:	6013      	str	r3, [r2, #0]
  TIM2->CR1 |= (1<<0); // Enable Timer2
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6013      	str	r3, [r2, #0]
}
 80002f2:	bf00      	nop
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	40023800 	.word	0x40023800

08000300 <pwm_duty_cycle>:

void pwm_duty_cycle(uint16_t duty)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	80fb      	strh	r3, [r7, #6]
  TIM2->CCR1 = duty; // writing preload value, TIMx capture/compare register 1 (TIMx_CCR1). Preload Register Assignment: When setting the duty cycle, you should use the assignment operator (=) instead of the OR assignment operator (|=). This ensures that the CCR1 register is directly set to the desired value.
 800030a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800030e:	88fb      	ldrh	r3, [r7, #6]
 8000310:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <main>:


int main()
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
  gpio_init();
 8000324:	f7ff ff88 	bl	8000238 <gpio_init>
  tim2_pwm_init();
 8000328:	f7ff ffaa 	bl	8000280 <tim2_pwm_init>

    while (1)
      {

        for(int i=0; i<500; i++)
 800032c:	2300      	movs	r3, #0
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	e00a      	b.n	8000348 <main+0x2a>
          {
            pwm_duty_cycle(i);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ffe2 	bl	8000300 <pwm_duty_cycle>
            delay(50);
 800033c:	2032      	movs	r0, #50	@ 0x32
 800033e:	f7ff ff61 	bl	8000204 <delay>
        for(int i=0; i<500; i++)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3301      	adds	r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800034e:	dbf0      	blt.n	8000332 <main+0x14>
          }

        for(int i=1000; i>0; i--)
 8000350:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	e00a      	b.n	800036e <main+0x50>
          {
            pwm_duty_cycle(i);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b29b      	uxth	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ffcf 	bl	8000300 <pwm_duty_cycle>
            delay(50);
 8000362:	2032      	movs	r0, #50	@ 0x32
 8000364:	f7ff ff4e 	bl	8000204 <delay>
        for(int i=1000; i>0; i--)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	603b      	str	r3, [r7, #0]
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	dcf1      	bgt.n	8000358 <main+0x3a>
        for(int i=0; i<500; i++)
 8000374:	e7da      	b.n	800032c <main+0xe>

08000376 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800037a:	bf00      	nop
 800037c:	e7fd      	b.n	800037a <NMI_Handler+0x4>

0800037e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800037e:	b480      	push	{r7}
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000382:	bf00      	nop
 8000384:	e7fd      	b.n	8000382 <HardFault_Handler+0x4>

08000386 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800038a:	bf00      	nop
 800038c:	e7fd      	b.n	800038a <MemManage_Handler+0x4>

0800038e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000392:	bf00      	nop
 8000394:	e7fd      	b.n	8000392 <BusFault_Handler+0x4>

08000396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039a:	bf00      	nop
 800039c:	e7fd      	b.n	800039a <UsageFault_Handler+0x4>

0800039e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003cc:	f000 f83e 	bl	800044c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <SystemInit+0x20>)
 80003da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003de:	4a05      	ldr	r2, [pc, #20]	@ (80003f4 <SystemInit+0x20>)
 80003e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000430 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003fc:	f7ff ffea 	bl	80003d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	@ (8000434 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	@ (8000438 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	@ (800043c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	@ (8000440 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	@ (8000444 <LoopFillZerobss+0x22>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000426:	f000 f825 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800042a:	f7ff ff78 	bl	800031e <main>
  bx  lr    
 800042e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800043c:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 8000440:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000444:	20000024 	.word	0x20000024

08000448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_IncTick+0x20>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <HAL_IncTick+0x24>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4413      	add	r3, r2
 800045c:	4a04      	ldr	r2, [pc, #16]	@ (8000470 <HAL_IncTick+0x24>)
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000
 8000470:	20000020 	.word	0x20000020

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	@ (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	@ (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	@ (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	@ (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004d4 	.word	0x080004d4
 80004b0:	080004d4 	.word	0x080004d4
 80004b4:	080004d4 	.word	0x080004d4
 80004b8:	080004d8 	.word	0x080004d8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
