
10.1_SPI - Try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080019c4  080019c4  000029c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019fc  080019fc  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  080019fc  080019fc  000029fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a04  08001a04  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a04  08001a04  00002a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a08  08001a08  00002a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001a0c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000060  08001a6c  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08001a6c  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d8c  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e2  00000000  00000000  00004e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00005600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000207  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f84  00000000  00000000  00005ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000031ef  00000000  00000000  00026a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8b52  00000000  00000000  00029c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f27ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012d0  00000000  00000000  000f27f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f3ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080019ac 	.word	0x080019ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080019ac 	.word	0x080019ac

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <spi1_config>:
#include "stm32f4xx.h"

void spi1_config()
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= (1<<12); // enable clock to SPI1
 80002b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000324 <spi1_config+0x74>)
 80002b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000324 <spi1_config+0x74>)
 80002ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80002be:	6453      	str	r3, [r2, #68]	@ 0x44

  SPI1->CR1 |= (1<<0) | (1<<1);// setting clk phase and clk polarity - acc. to slave device
 80002c0:	4b19      	ldr	r3, [pc, #100]	@ (8000328 <spi1_config+0x78>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a18      	ldr	r2, [pc, #96]	@ (8000328 <spi1_config+0x78>)
 80002c6:	f043 0303 	orr.w	r3, r3, #3
 80002ca:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= (1<<2); // master mode
 80002cc:	4b16      	ldr	r3, [pc, #88]	@ (8000328 <spi1_config+0x78>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a15      	ldr	r2, [pc, #84]	@ (8000328 <spi1_config+0x78>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= (0x3 << 3);// setting baud rate to 5MHz - since apb2 running at 90MHz. so (90/16 ~ 5) - it's also acc. to slave device
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <spi1_config+0x78>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <spi1_config+0x78>)
 80002de:	f043 0318 	orr.w	r3, r3, #24
 80002e2:	6013      	str	r3, [r2, #0]

  SPI1->CR1 &= ~(1<<7);// Set frame format - it's again ACC to slave device
 80002e4:	4b10      	ldr	r3, [pc, #64]	@ (8000328 <spi1_config+0x78>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000328 <spi1_config+0x78>)
 80002ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80002ee:	6013      	str	r3, [r2, #0]

  SPI1->CR1 |= (1<<9) | (1<<8); // using software slave management
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <spi1_config+0x78>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000328 <spi1_config+0x78>)
 80002f6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80002fa:	6013      	str	r3, [r2, #0]

  SPI1->CR1 &= ~(1<<10); // full duplex mode
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <spi1_config+0x78>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a09      	ldr	r2, [pc, #36]	@ (8000328 <spi1_config+0x78>)
 8000302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000306:	6013      	str	r3, [r2, #0]
  SPI1->CR1 &= ~(1<<11); // 8-bit data format
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <spi1_config+0x78>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a06      	ldr	r2, [pc, #24]	@ (8000328 <spi1_config+0x78>)
 800030e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000312:	6013      	str	r3, [r2, #0]

  SPI1->CR2 = 0; // since CR2 is for DMA and Interrupt purpose
 8000314:	4b04      	ldr	r3, [pc, #16]	@ (8000328 <spi1_config+0x78>)
 8000316:	2200      	movs	r2, #0
 8000318:	605a      	str	r2, [r3, #4]
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40023800 	.word	0x40023800
 8000328:	40013000 	.word	0x40013000

0800032c <gpio_config>:

// PA 5, 6, 7, 9 : SCK, MISO, MOSI, SS

void gpio_config()
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (1<<0); // enable clock to port A
 8000330:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <gpio_config+0x44>)
 8000332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000334:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <gpio_config+0x44>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOA->MODER &= ~(0x3 << (2*5)) & ~(0x3 << (2*6)) & (~0x3 << (2*7)) & ~(0x3 << (2*9));
 800033c:	4b0d      	ldr	r3, [pc, #52]	@ (8000374 <gpio_config+0x48>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	490c      	ldr	r1, [pc, #48]	@ (8000374 <gpio_config+0x48>)
 8000342:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <gpio_config+0x4c>)
 8000344:	4013      	ands	r3, r2
 8000346:	600b      	str	r3, [r1, #0]

  GPIOA->MODER |= (2 << (2*5)) | (2 << (2*6)) | (2 << (2*7)) | (1 << (2*9));
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <gpio_config+0x48>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a09      	ldr	r2, [pc, #36]	@ (8000374 <gpio_config+0x48>)
 800034e:	f443 2395 	orr.w	r3, r3, #305152	@ 0x4a800
 8000352:	6013      	str	r3, [r2, #0]

  // ospeeder register to fast

  GPIOA->AFR[0] |= (5 << 20) | (5 << 24) | (5 << 28); // alternate function AF5
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <gpio_config+0x48>)
 8000356:	6a1b      	ldr	r3, [r3, #32]
 8000358:	4a06      	ldr	r2, [pc, #24]	@ (8000374 <gpio_config+0x48>)
 800035a:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800035e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000362:	6213      	str	r3, [r2, #32]
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800
 8000374:	40020000 	.word	0x40020000
 8000378:	fff30000 	.word	0xfff30000

0800037c <spi1_enable>:

void spi1_enable()
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  SPI1->CR1 |= (1<<6);
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <spi1_enable+0x1c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <spi1_enable+0x1c>)
 8000386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40013000 	.word	0x40013000

0800039c <spi1_transmit>:
{
  GPIOA->ODR &= ~(1<<9);
}

void spi1_transmit(uint8_t *data, int size)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  int i=0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]

  while(i < size)
 80003aa:	e00f      	b.n	80003cc <spi1_transmit+0x30>
    {
      while(!(SPI1->SR & (1<<1))); // wait for TXE to set, i.e, wait till tx register is empty
 80003ac:	bf00      	nop
 80003ae:	4b17      	ldr	r3, [pc, #92]	@ (800040c <spi1_transmit+0x70>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f003 0302 	and.w	r3, r3, #2
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d0f9      	beq.n	80003ae <spi1_transmit+0x12>

      SPI1->DR = data[i]; // load data into Data register
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	4b12      	ldr	r3, [pc, #72]	@ (800040c <spi1_transmit+0x70>)
 80003c4:	60da      	str	r2, [r3, #12]
      i++;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	3301      	adds	r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
  while(i < size)
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbeb      	blt.n	80003ac <spi1_transmit+0x10>
    }
//  During discontinuous communications, there is a 2 APB clock period delay between the write operation to the SPI_DR register and BSY bit setting. As a consequence it is mandatory to wait first until TXE is set and then until BSY is cleared after writing the last data.
  while(!(SPI1->SR & (1<<1))); // wait for txe bit to set
 80003d4:	bf00      	nop
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <spi1_transmit+0x70>)
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <spi1_transmit+0x3a>
  while(SPI1->SR & (1<<7)); // wait for bsy bit to reset, i.e., SPI is not busy
 80003e2:	bf00      	nop
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <spi1_transmit+0x70>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f9      	bne.n	80003e4 <spi1_transmit+0x48>

  // clear overrun flag by reading DR and SR
  uint8_t temp=0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	72fb      	strb	r3, [r7, #11]
  temp = SPI1->DR;
 80003f4:	4b05      	ldr	r3, [pc, #20]	@ (800040c <spi1_transmit+0x70>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	72fb      	strb	r3, [r7, #11]
  temp = SPI1->SR;
 80003fa:	4b04      	ldr	r3, [pc, #16]	@ (800040c <spi1_transmit+0x70>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	72fb      	strb	r3, [r7, #11]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40013000 	.word	0x40013000

08000410 <spi2_slave_config>:
      size--;
    }
}

void spi2_slave_config()
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 1);      // Enable clock to port B
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <spi2_slave_config+0x74>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a1a      	ldr	r2, [pc, #104]	@ (8000484 <spi2_slave_config+0x74>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(0xFC000000); // Clear MODER PB 13,14,15
 8000420:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <spi2_slave_config+0x78>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a18      	ldr	r2, [pc, #96]	@ (8000488 <spi2_slave_config+0x78>)
 8000426:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800042a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0xA8000000);  // Set to Alternate mode for PB 13(SCK),14(MISO),15(MOSI)
 800042c:	4b16      	ldr	r3, [pc, #88]	@ (8000488 <spi2_slave_config+0x78>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a15      	ldr	r2, [pc, #84]	@ (8000488 <spi2_slave_config+0x78>)
 8000432:	f043 4328 	orr.w	r3, r3, #2818572288	@ 0xa8000000
 8000436:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[1] |= (0x55500000); // Set AF5 for PB 13,14,15
 8000438:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <spi2_slave_config+0x78>)
 800043a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800043c:	4a12      	ldr	r2, [pc, #72]	@ (8000488 <spi2_slave_config+0x78>)
 800043e:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 8000442:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000446:	6253      	str	r3, [r2, #36]	@ 0x24

    RCC->APB1ENR |= (1 << 14); // Enable clock to SPI2
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <spi2_slave_config+0x74>)
 800044a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <spi2_slave_config+0x74>)
 800044e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000452:	6413      	str	r3, [r2, #64]	@ 0x40

    SPI2->CR1 &= ~(1 << 2);  // Slave mode
 8000454:	4b0d      	ldr	r3, [pc, #52]	@ (800048c <spi2_slave_config+0x7c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <spi2_slave_config+0x7c>)
 800045a:	f023 0304 	bic.w	r3, r3, #4
 800045e:	6013      	str	r3, [r2, #0]
    SPI2->CR1 &= ~(1 << 11); // 8-bit data frame
 8000460:	4b0a      	ldr	r3, [pc, #40]	@ (800048c <spi2_slave_config+0x7c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a09      	ldr	r2, [pc, #36]	@ (800048c <spi2_slave_config+0x7c>)
 8000466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800046a:	6013      	str	r3, [r2, #0]
    SPI2->CR1 |= (1 << 6);   // Enable SPI2
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <spi2_slave_config+0x7c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a06      	ldr	r2, [pc, #24]	@ (800048c <spi2_slave_config+0x7c>)
 8000472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40023800 	.word	0x40023800
 8000488:	40020400 	.word	0x40020400
 800048c:	40003800 	.word	0x40003800

08000490 <spi2_receive>:

char spi2_receive()
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
    while (!(SPI2->SR & (1 << 0))); // Wait till RXNE flag is set
 8000494:	bf00      	nop
 8000496:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <spi2_receive+0x24>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <spi2_receive+0x6>
    return SPI2->DR; // Receive data
 80004a2:	4b04      	ldr	r3, [pc, #16]	@ (80004b4 <spi2_receive+0x24>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	b2db      	uxtb	r3, r3
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40003800 	.word	0x40003800

080004b8 <main>:
 * PA9 : SS	:
 */


int main()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  gpio_config();
 80004bc:	f7ff ff36 	bl	800032c <gpio_config>
  spi1_config();
 80004c0:	f7ff fef6 	bl	80002b0 <spi1_config>
  spi1_enable();
 80004c4:	f7ff ff5a 	bl	800037c <spi1_enable>
  spi2_slave_config();
 80004c8:	f7ff ffa2 	bl	8000410 <spi2_slave_config>
  while(1)
    {
      spi1_transmit(data, 1);
 80004cc:	2101      	movs	r1, #1
 80004ce:	480a      	ldr	r0, [pc, #40]	@ (80004f8 <main+0x40>)
 80004d0:	f7ff ff64 	bl	800039c <spi1_transmit>
      rx[0] = spi2_receive();
 80004d4:	f7ff ffdc 	bl	8000490 <spi2_receive>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <main+0x44>)
 80004de:	701a      	strb	r2, [r3, #0]
      sprintf(new_rx, "%c", rx);
 80004e0:	4a06      	ldr	r2, [pc, #24]	@ (80004fc <main+0x44>)
 80004e2:	4907      	ldr	r1, [pc, #28]	@ (8000500 <main+0x48>)
 80004e4:	4807      	ldr	r0, [pc, #28]	@ (8000504 <main+0x4c>)
 80004e6:	f000 fa2f 	bl	8000948 <siprintf>
//      printf("%d",rx);
      printf("%c",new_rx);
 80004ea:	4906      	ldr	r1, [pc, #24]	@ (8000504 <main+0x4c>)
 80004ec:	4804      	ldr	r0, [pc, #16]	@ (8000500 <main+0x48>)
 80004ee:	f000 fa19 	bl	8000924 <iprintf>
    {
 80004f2:	bf00      	nop
 80004f4:	e7ea      	b.n	80004cc <main+0x14>
 80004f6:	bf00      	nop
 80004f8:	20000000 	.word	0x20000000
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	080019c4 	.word	0x080019c4
 8000504:	20000080 	.word	0x20000080

08000508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <NMI_Handler+0x4>

08000510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <MemManage_Handler+0x4>

08000520 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <UsageFault_Handler+0x4>

08000530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f90b 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <ITM_SendChar>:
// ITM Register Addresses
#define ITM_STIMULUS_PORT0 *((volatile uint32_t *)0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t *)0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
    DEMCR |= (1 << 24); // Enable TRACENA
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <ITM_SendChar+0x48>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <ITM_SendChar+0x48>)
 8000578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800057c:	6013      	str	r3, [r2, #0]

    ITM_TRACE_EN |= (1 << 0); // Enable Stimulus Port 0
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <ITM_SendChar+0x4c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <ITM_SendChar+0x4c>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

    while (!(ITM_STIMULUS_PORT0 & 1))
 800058a:	bf00      	nop
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <ITM_SendChar+0x24>
        ; // read FIFO Status in bit[0]

    ITM_STIMULUS_PORT0 = ch;
 800059a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000edfc 	.word	0xe000edfc
 80005b4:	e0000e00 	.word	0xe0000e00

080005b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	e00a      	b.n	80005e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ca:	f3af 8000 	nop.w
 80005ce:	4601      	mov	r1, r0
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	60ba      	str	r2, [r7, #8]
 80005d6:	b2ca      	uxtb	r2, r1
 80005d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	dbf0      	blt.n	80005ca <_read+0x12>
  }

  return len;
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	e009      	b.n	8000618 <_write+0x26>
  {
//    __io_putchar(*ptr++);
      ITM_SendChar(*ptr++);
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	1c5a      	adds	r2, r3, #1
 8000608:	60ba      	str	r2, [r7, #8]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffab 	bl	8000568 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbf1      	blt.n	8000604 <_write+0x12>
  }
  return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_close>:

int _close(int file)
{
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000652:	605a      	str	r2, [r3, #4]
  return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <_isatty>:

int _isatty(int file)
{
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800069c:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <_sbrk+0x5c>)
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <_sbrk+0x60>)
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <_sbrk+0x64>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <_sbrk+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d207      	bcs.n	80006d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c4:	f000 f9f2 	bl	8000aac <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e009      	b.n	80006e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <_sbrk+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20020000 	.word	0x20020000
 80006f4:	00000400 	.word	0x00000400
 80006f8:	20000084 	.word	0x20000084
 80006fc:	200001d8 	.word	0x200001d8

08000700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <SystemInit+0x20>)
 8000706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800070a:	4a05      	ldr	r2, [pc, #20]	@ (8000720 <SystemInit+0x20>)
 800070c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800075c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000728:	f7ff ffea 	bl	8000700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	@ (8000760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	@ (8000764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	@ (8000770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000752:	f000 f9b1 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000756:	f7ff feaf 	bl	80004b8 <main>
  bx  lr    
 800075a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800075c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000768:	08001a0c 	.word	0x08001a0c
  ldr r2, =_sbss
 800076c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000770:	200001d8 	.word	0x200001d8

08000774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC_IRQHandler>
	...

08000778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <HAL_IncTick+0x20>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_IncTick+0x24>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <HAL_IncTick+0x24>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000001 	.word	0x20000001
 800079c:	20000088 	.word	0x20000088

080007a0 <std>:
 80007a0:	2300      	movs	r3, #0
 80007a2:	b510      	push	{r4, lr}
 80007a4:	4604      	mov	r4, r0
 80007a6:	e9c0 3300 	strd	r3, r3, [r0]
 80007aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007ae:	6083      	str	r3, [r0, #8]
 80007b0:	8181      	strh	r1, [r0, #12]
 80007b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80007b4:	81c2      	strh	r2, [r0, #14]
 80007b6:	6183      	str	r3, [r0, #24]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2208      	movs	r2, #8
 80007bc:	305c      	adds	r0, #92	@ 0x5c
 80007be:	f000 f926 	bl	8000a0e <memset>
 80007c2:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <std+0x58>)
 80007c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <std+0x5c>)
 80007c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <std+0x60>)
 80007cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <std+0x64>)
 80007d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <std+0x68>)
 80007d4:	6224      	str	r4, [r4, #32]
 80007d6:	429c      	cmp	r4, r3
 80007d8:	d006      	beq.n	80007e8 <std+0x48>
 80007da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007de:	4294      	cmp	r4, r2
 80007e0:	d002      	beq.n	80007e8 <std+0x48>
 80007e2:	33d0      	adds	r3, #208	@ 0xd0
 80007e4:	429c      	cmp	r4, r3
 80007e6:	d105      	bne.n	80007f4 <std+0x54>
 80007e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f0:	f000 b986 	b.w	8000b00 <__retarget_lock_init_recursive>
 80007f4:	bd10      	pop	{r4, pc}
 80007f6:	bf00      	nop
 80007f8:	08000989 	.word	0x08000989
 80007fc:	080009ab 	.word	0x080009ab
 8000800:	080009e3 	.word	0x080009e3
 8000804:	08000a07 	.word	0x08000a07
 8000808:	2000008c 	.word	0x2000008c

0800080c <stdio_exit_handler>:
 800080c:	4a02      	ldr	r2, [pc, #8]	@ (8000818 <stdio_exit_handler+0xc>)
 800080e:	4903      	ldr	r1, [pc, #12]	@ (800081c <stdio_exit_handler+0x10>)
 8000810:	4803      	ldr	r0, [pc, #12]	@ (8000820 <stdio_exit_handler+0x14>)
 8000812:	f000 b869 	b.w	80008e8 <_fwalk_sglue>
 8000816:	bf00      	nop
 8000818:	20000004 	.word	0x20000004
 800081c:	08001651 	.word	0x08001651
 8000820:	20000014 	.word	0x20000014

08000824 <cleanup_stdio>:
 8000824:	6841      	ldr	r1, [r0, #4]
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <cleanup_stdio+0x34>)
 8000828:	4299      	cmp	r1, r3
 800082a:	b510      	push	{r4, lr}
 800082c:	4604      	mov	r4, r0
 800082e:	d001      	beq.n	8000834 <cleanup_stdio+0x10>
 8000830:	f000 ff0e 	bl	8001650 <_fflush_r>
 8000834:	68a1      	ldr	r1, [r4, #8]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <cleanup_stdio+0x38>)
 8000838:	4299      	cmp	r1, r3
 800083a:	d002      	beq.n	8000842 <cleanup_stdio+0x1e>
 800083c:	4620      	mov	r0, r4
 800083e:	f000 ff07 	bl	8001650 <_fflush_r>
 8000842:	68e1      	ldr	r1, [r4, #12]
 8000844:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <cleanup_stdio+0x3c>)
 8000846:	4299      	cmp	r1, r3
 8000848:	d004      	beq.n	8000854 <cleanup_stdio+0x30>
 800084a:	4620      	mov	r0, r4
 800084c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000850:	f000 befe 	b.w	8001650 <_fflush_r>
 8000854:	bd10      	pop	{r4, pc}
 8000856:	bf00      	nop
 8000858:	2000008c 	.word	0x2000008c
 800085c:	200000f4 	.word	0x200000f4
 8000860:	2000015c 	.word	0x2000015c

08000864 <global_stdio_init.part.0>:
 8000864:	b510      	push	{r4, lr}
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <global_stdio_init.part.0+0x30>)
 8000868:	4c0b      	ldr	r4, [pc, #44]	@ (8000898 <global_stdio_init.part.0+0x34>)
 800086a:	4a0c      	ldr	r2, [pc, #48]	@ (800089c <global_stdio_init.part.0+0x38>)
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	4620      	mov	r0, r4
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	f7ff ff94 	bl	80007a0 <std>
 8000878:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800087c:	2201      	movs	r2, #1
 800087e:	2109      	movs	r1, #9
 8000880:	f7ff ff8e 	bl	80007a0 <std>
 8000884:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000888:	2202      	movs	r2, #2
 800088a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800088e:	2112      	movs	r1, #18
 8000890:	f7ff bf86 	b.w	80007a0 <std>
 8000894:	200001c4 	.word	0x200001c4
 8000898:	2000008c 	.word	0x2000008c
 800089c:	0800080d 	.word	0x0800080d

080008a0 <__sfp_lock_acquire>:
 80008a0:	4801      	ldr	r0, [pc, #4]	@ (80008a8 <__sfp_lock_acquire+0x8>)
 80008a2:	f000 b92e 	b.w	8000b02 <__retarget_lock_acquire_recursive>
 80008a6:	bf00      	nop
 80008a8:	200001cd 	.word	0x200001cd

080008ac <__sfp_lock_release>:
 80008ac:	4801      	ldr	r0, [pc, #4]	@ (80008b4 <__sfp_lock_release+0x8>)
 80008ae:	f000 b929 	b.w	8000b04 <__retarget_lock_release_recursive>
 80008b2:	bf00      	nop
 80008b4:	200001cd 	.word	0x200001cd

080008b8 <__sinit>:
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4604      	mov	r4, r0
 80008bc:	f7ff fff0 	bl	80008a0 <__sfp_lock_acquire>
 80008c0:	6a23      	ldr	r3, [r4, #32]
 80008c2:	b11b      	cbz	r3, 80008cc <__sinit+0x14>
 80008c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c8:	f7ff bff0 	b.w	80008ac <__sfp_lock_release>
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <__sinit+0x28>)
 80008ce:	6223      	str	r3, [r4, #32]
 80008d0:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <__sinit+0x2c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d1f5      	bne.n	80008c4 <__sinit+0xc>
 80008d8:	f7ff ffc4 	bl	8000864 <global_stdio_init.part.0>
 80008dc:	e7f2      	b.n	80008c4 <__sinit+0xc>
 80008de:	bf00      	nop
 80008e0:	08000825 	.word	0x08000825
 80008e4:	200001c4 	.word	0x200001c4

080008e8 <_fwalk_sglue>:
 80008e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008ec:	4607      	mov	r7, r0
 80008ee:	4688      	mov	r8, r1
 80008f0:	4614      	mov	r4, r2
 80008f2:	2600      	movs	r6, #0
 80008f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008f8:	f1b9 0901 	subs.w	r9, r9, #1
 80008fc:	d505      	bpl.n	800090a <_fwalk_sglue+0x22>
 80008fe:	6824      	ldr	r4, [r4, #0]
 8000900:	2c00      	cmp	r4, #0
 8000902:	d1f7      	bne.n	80008f4 <_fwalk_sglue+0xc>
 8000904:	4630      	mov	r0, r6
 8000906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800090a:	89ab      	ldrh	r3, [r5, #12]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d907      	bls.n	8000920 <_fwalk_sglue+0x38>
 8000910:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000914:	3301      	adds	r3, #1
 8000916:	d003      	beq.n	8000920 <_fwalk_sglue+0x38>
 8000918:	4629      	mov	r1, r5
 800091a:	4638      	mov	r0, r7
 800091c:	47c0      	blx	r8
 800091e:	4306      	orrs	r6, r0
 8000920:	3568      	adds	r5, #104	@ 0x68
 8000922:	e7e9      	b.n	80008f8 <_fwalk_sglue+0x10>

08000924 <iprintf>:
 8000924:	b40f      	push	{r0, r1, r2, r3}
 8000926:	b507      	push	{r0, r1, r2, lr}
 8000928:	4906      	ldr	r1, [pc, #24]	@ (8000944 <iprintf+0x20>)
 800092a:	ab04      	add	r3, sp, #16
 800092c:	6808      	ldr	r0, [r1, #0]
 800092e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000932:	6881      	ldr	r1, [r0, #8]
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	f000 fb61 	bl	8000ffc <_vfiprintf_r>
 800093a:	b003      	add	sp, #12
 800093c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000940:	b004      	add	sp, #16
 8000942:	4770      	bx	lr
 8000944:	20000010 	.word	0x20000010

08000948 <siprintf>:
 8000948:	b40e      	push	{r1, r2, r3}
 800094a:	b500      	push	{lr}
 800094c:	b09c      	sub	sp, #112	@ 0x70
 800094e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000950:	9002      	str	r0, [sp, #8]
 8000952:	9006      	str	r0, [sp, #24]
 8000954:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <siprintf+0x38>)
 800095a:	9107      	str	r1, [sp, #28]
 800095c:	9104      	str	r1, [sp, #16]
 800095e:	4909      	ldr	r1, [pc, #36]	@ (8000984 <siprintf+0x3c>)
 8000960:	f853 2b04 	ldr.w	r2, [r3], #4
 8000964:	9105      	str	r1, [sp, #20]
 8000966:	6800      	ldr	r0, [r0, #0]
 8000968:	9301      	str	r3, [sp, #4]
 800096a:	a902      	add	r1, sp, #8
 800096c:	f000 fa20 	bl	8000db0 <_svfiprintf_r>
 8000970:	9b02      	ldr	r3, [sp, #8]
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	b01c      	add	sp, #112	@ 0x70
 8000978:	f85d eb04 	ldr.w	lr, [sp], #4
 800097c:	b003      	add	sp, #12
 800097e:	4770      	bx	lr
 8000980:	20000010 	.word	0x20000010
 8000984:	ffff0208 	.word	0xffff0208

08000988 <__sread>:
 8000988:	b510      	push	{r4, lr}
 800098a:	460c      	mov	r4, r1
 800098c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000990:	f000 f868 	bl	8000a64 <_read_r>
 8000994:	2800      	cmp	r0, #0
 8000996:	bfab      	itete	ge
 8000998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800099a:	89a3      	ldrhlt	r3, [r4, #12]
 800099c:	181b      	addge	r3, r3, r0
 800099e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80009a2:	bfac      	ite	ge
 80009a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80009a6:	81a3      	strhlt	r3, [r4, #12]
 80009a8:	bd10      	pop	{r4, pc}

080009aa <__swrite>:
 80009aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009ae:	461f      	mov	r7, r3
 80009b0:	898b      	ldrh	r3, [r1, #12]
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	4605      	mov	r5, r0
 80009b6:	460c      	mov	r4, r1
 80009b8:	4616      	mov	r6, r2
 80009ba:	d505      	bpl.n	80009c8 <__swrite+0x1e>
 80009bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009c0:	2302      	movs	r3, #2
 80009c2:	2200      	movs	r2, #0
 80009c4:	f000 f83c 	bl	8000a40 <_lseek_r>
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80009ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009d2:	81a3      	strh	r3, [r4, #12]
 80009d4:	4632      	mov	r2, r6
 80009d6:	463b      	mov	r3, r7
 80009d8:	4628      	mov	r0, r5
 80009da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009de:	f000 b853 	b.w	8000a88 <_write_r>

080009e2 <__sseek>:
 80009e2:	b510      	push	{r4, lr}
 80009e4:	460c      	mov	r4, r1
 80009e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ea:	f000 f829 	bl	8000a40 <_lseek_r>
 80009ee:	1c43      	adds	r3, r0, #1
 80009f0:	89a3      	ldrh	r3, [r4, #12]
 80009f2:	bf15      	itete	ne
 80009f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80009f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80009fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009fe:	81a3      	strheq	r3, [r4, #12]
 8000a00:	bf18      	it	ne
 8000a02:	81a3      	strhne	r3, [r4, #12]
 8000a04:	bd10      	pop	{r4, pc}

08000a06 <__sclose>:
 8000a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a0a:	f000 b809 	b.w	8000a20 <_close_r>

08000a0e <memset>:
 8000a0e:	4402      	add	r2, r0
 8000a10:	4603      	mov	r3, r0
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d100      	bne.n	8000a18 <memset+0xa>
 8000a16:	4770      	bx	lr
 8000a18:	f803 1b01 	strb.w	r1, [r3], #1
 8000a1c:	e7f9      	b.n	8000a12 <memset+0x4>
	...

08000a20 <_close_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4d06      	ldr	r5, [pc, #24]	@ (8000a3c <_close_r+0x1c>)
 8000a24:	2300      	movs	r3, #0
 8000a26:	4604      	mov	r4, r0
 8000a28:	4608      	mov	r0, r1
 8000a2a:	602b      	str	r3, [r5, #0]
 8000a2c:	f7ff fdfd 	bl	800062a <_close>
 8000a30:	1c43      	adds	r3, r0, #1
 8000a32:	d102      	bne.n	8000a3a <_close_r+0x1a>
 8000a34:	682b      	ldr	r3, [r5, #0]
 8000a36:	b103      	cbz	r3, 8000a3a <_close_r+0x1a>
 8000a38:	6023      	str	r3, [r4, #0]
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
 8000a3c:	200001c8 	.word	0x200001c8

08000a40 <_lseek_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	4d07      	ldr	r5, [pc, #28]	@ (8000a60 <_lseek_r+0x20>)
 8000a44:	4604      	mov	r4, r0
 8000a46:	4608      	mov	r0, r1
 8000a48:	4611      	mov	r1, r2
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	602a      	str	r2, [r5, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	f7ff fe12 	bl	8000678 <_lseek>
 8000a54:	1c43      	adds	r3, r0, #1
 8000a56:	d102      	bne.n	8000a5e <_lseek_r+0x1e>
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	b103      	cbz	r3, 8000a5e <_lseek_r+0x1e>
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}
 8000a60:	200001c8 	.word	0x200001c8

08000a64 <_read_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4d07      	ldr	r5, [pc, #28]	@ (8000a84 <_read_r+0x20>)
 8000a68:	4604      	mov	r4, r0
 8000a6a:	4608      	mov	r0, r1
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	602a      	str	r2, [r5, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	f7ff fda0 	bl	80005b8 <_read>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d102      	bne.n	8000a82 <_read_r+0x1e>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	b103      	cbz	r3, 8000a82 <_read_r+0x1e>
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001c8 	.word	0x200001c8

08000a88 <_write_r>:
 8000a88:	b538      	push	{r3, r4, r5, lr}
 8000a8a:	4d07      	ldr	r5, [pc, #28]	@ (8000aa8 <_write_r+0x20>)
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	602a      	str	r2, [r5, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff fdab 	bl	80005f2 <_write>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d102      	bne.n	8000aa6 <_write_r+0x1e>
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	b103      	cbz	r3, 8000aa6 <_write_r+0x1e>
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	200001c8 	.word	0x200001c8

08000aac <__errno>:
 8000aac:	4b01      	ldr	r3, [pc, #4]	@ (8000ab4 <__errno+0x8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000010 	.word	0x20000010

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4d0d      	ldr	r5, [pc, #52]	@ (8000af0 <__libc_init_array+0x38>)
 8000abc:	4c0d      	ldr	r4, [pc, #52]	@ (8000af4 <__libc_init_array+0x3c>)
 8000abe:	1b64      	subs	r4, r4, r5
 8000ac0:	10a4      	asrs	r4, r4, #2
 8000ac2:	2600      	movs	r6, #0
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8000af8 <__libc_init_array+0x40>)
 8000aca:	4c0c      	ldr	r4, [pc, #48]	@ (8000afc <__libc_init_array+0x44>)
 8000acc:	f000 ff6e 	bl	80019ac <_init>
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	10a4      	asrs	r4, r4, #2
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08001a04 	.word	0x08001a04
 8000af4:	08001a04 	.word	0x08001a04
 8000af8:	08001a04 	.word	0x08001a04
 8000afc:	08001a08 	.word	0x08001a08

08000b00 <__retarget_lock_init_recursive>:
 8000b00:	4770      	bx	lr

08000b02 <__retarget_lock_acquire_recursive>:
 8000b02:	4770      	bx	lr

08000b04 <__retarget_lock_release_recursive>:
 8000b04:	4770      	bx	lr
	...

08000b08 <_free_r>:
 8000b08:	b538      	push	{r3, r4, r5, lr}
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	d041      	beq.n	8000b94 <_free_r+0x8c>
 8000b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b14:	1f0c      	subs	r4, r1, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bfb8      	it	lt
 8000b1a:	18e4      	addlt	r4, r4, r3
 8000b1c:	f000 f8e0 	bl	8000ce0 <__malloc_lock>
 8000b20:	4a1d      	ldr	r2, [pc, #116]	@ (8000b98 <_free_r+0x90>)
 8000b22:	6813      	ldr	r3, [r2, #0]
 8000b24:	b933      	cbnz	r3, 8000b34 <_free_r+0x2c>
 8000b26:	6063      	str	r3, [r4, #4]
 8000b28:	6014      	str	r4, [r2, #0]
 8000b2a:	4628      	mov	r0, r5
 8000b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b30:	f000 b8dc 	b.w	8000cec <__malloc_unlock>
 8000b34:	42a3      	cmp	r3, r4
 8000b36:	d908      	bls.n	8000b4a <_free_r+0x42>
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	1821      	adds	r1, r4, r0
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf01      	itttt	eq
 8000b40:	6819      	ldreq	r1, [r3, #0]
 8000b42:	685b      	ldreq	r3, [r3, #4]
 8000b44:	1809      	addeq	r1, r1, r0
 8000b46:	6021      	streq	r1, [r4, #0]
 8000b48:	e7ed      	b.n	8000b26 <_free_r+0x1e>
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	b10b      	cbz	r3, 8000b54 <_free_r+0x4c>
 8000b50:	42a3      	cmp	r3, r4
 8000b52:	d9fa      	bls.n	8000b4a <_free_r+0x42>
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	1850      	adds	r0, r2, r1
 8000b58:	42a0      	cmp	r0, r4
 8000b5a:	d10b      	bne.n	8000b74 <_free_r+0x6c>
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	4401      	add	r1, r0
 8000b60:	1850      	adds	r0, r2, r1
 8000b62:	4283      	cmp	r3, r0
 8000b64:	6011      	str	r1, [r2, #0]
 8000b66:	d1e0      	bne.n	8000b2a <_free_r+0x22>
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	6053      	str	r3, [r2, #4]
 8000b6e:	4408      	add	r0, r1
 8000b70:	6010      	str	r0, [r2, #0]
 8000b72:	e7da      	b.n	8000b2a <_free_r+0x22>
 8000b74:	d902      	bls.n	8000b7c <_free_r+0x74>
 8000b76:	230c      	movs	r3, #12
 8000b78:	602b      	str	r3, [r5, #0]
 8000b7a:	e7d6      	b.n	8000b2a <_free_r+0x22>
 8000b7c:	6820      	ldr	r0, [r4, #0]
 8000b7e:	1821      	adds	r1, r4, r0
 8000b80:	428b      	cmp	r3, r1
 8000b82:	bf04      	itt	eq
 8000b84:	6819      	ldreq	r1, [r3, #0]
 8000b86:	685b      	ldreq	r3, [r3, #4]
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	bf04      	itt	eq
 8000b8c:	1809      	addeq	r1, r1, r0
 8000b8e:	6021      	streq	r1, [r4, #0]
 8000b90:	6054      	str	r4, [r2, #4]
 8000b92:	e7ca      	b.n	8000b2a <_free_r+0x22>
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop
 8000b98:	200001d4 	.word	0x200001d4

08000b9c <sbrk_aligned>:
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bdc <sbrk_aligned+0x40>)
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	6831      	ldr	r1, [r6, #0]
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	b911      	cbnz	r1, 8000bae <sbrk_aligned+0x12>
 8000ba8:	f000 fe28 	bl	80017fc <_sbrk_r>
 8000bac:	6030      	str	r0, [r6, #0]
 8000bae:	4621      	mov	r1, r4
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	f000 fe23 	bl	80017fc <_sbrk_r>
 8000bb6:	1c43      	adds	r3, r0, #1
 8000bb8:	d103      	bne.n	8000bc2 <sbrk_aligned+0x26>
 8000bba:	f04f 34ff 	mov.w	r4, #4294967295
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
 8000bc2:	1cc4      	adds	r4, r0, #3
 8000bc4:	f024 0403 	bic.w	r4, r4, #3
 8000bc8:	42a0      	cmp	r0, r4
 8000bca:	d0f8      	beq.n	8000bbe <sbrk_aligned+0x22>
 8000bcc:	1a21      	subs	r1, r4, r0
 8000bce:	4628      	mov	r0, r5
 8000bd0:	f000 fe14 	bl	80017fc <_sbrk_r>
 8000bd4:	3001      	adds	r0, #1
 8000bd6:	d1f2      	bne.n	8000bbe <sbrk_aligned+0x22>
 8000bd8:	e7ef      	b.n	8000bba <sbrk_aligned+0x1e>
 8000bda:	bf00      	nop
 8000bdc:	200001d0 	.word	0x200001d0

08000be0 <_malloc_r>:
 8000be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be4:	1ccd      	adds	r5, r1, #3
 8000be6:	f025 0503 	bic.w	r5, r5, #3
 8000bea:	3508      	adds	r5, #8
 8000bec:	2d0c      	cmp	r5, #12
 8000bee:	bf38      	it	cc
 8000bf0:	250c      	movcc	r5, #12
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	db01      	blt.n	8000bfc <_malloc_r+0x1c>
 8000bf8:	42a9      	cmp	r1, r5
 8000bfa:	d904      	bls.n	8000c06 <_malloc_r+0x26>
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	6033      	str	r3, [r6, #0]
 8000c00:	2000      	movs	r0, #0
 8000c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cdc <_malloc_r+0xfc>
 8000c0a:	f000 f869 	bl	8000ce0 <__malloc_lock>
 8000c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c12:	461c      	mov	r4, r3
 8000c14:	bb44      	cbnz	r4, 8000c68 <_malloc_r+0x88>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4630      	mov	r0, r6
 8000c1a:	f7ff ffbf 	bl	8000b9c <sbrk_aligned>
 8000c1e:	1c43      	adds	r3, r0, #1
 8000c20:	4604      	mov	r4, r0
 8000c22:	d158      	bne.n	8000cd6 <_malloc_r+0xf6>
 8000c24:	f8d8 4000 	ldr.w	r4, [r8]
 8000c28:	4627      	mov	r7, r4
 8000c2a:	2f00      	cmp	r7, #0
 8000c2c:	d143      	bne.n	8000cb6 <_malloc_r+0xd6>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d04b      	beq.n	8000cca <_malloc_r+0xea>
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	4639      	mov	r1, r7
 8000c36:	4630      	mov	r0, r6
 8000c38:	eb04 0903 	add.w	r9, r4, r3
 8000c3c:	f000 fdde 	bl	80017fc <_sbrk_r>
 8000c40:	4581      	cmp	r9, r0
 8000c42:	d142      	bne.n	8000cca <_malloc_r+0xea>
 8000c44:	6821      	ldr	r1, [r4, #0]
 8000c46:	1a6d      	subs	r5, r5, r1
 8000c48:	4629      	mov	r1, r5
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f7ff ffa6 	bl	8000b9c <sbrk_aligned>
 8000c50:	3001      	adds	r0, #1
 8000c52:	d03a      	beq.n	8000cca <_malloc_r+0xea>
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	442b      	add	r3, r5
 8000c58:	6023      	str	r3, [r4, #0]
 8000c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	bb62      	cbnz	r2, 8000cbc <_malloc_r+0xdc>
 8000c62:	f8c8 7000 	str.w	r7, [r8]
 8000c66:	e00f      	b.n	8000c88 <_malloc_r+0xa8>
 8000c68:	6822      	ldr	r2, [r4, #0]
 8000c6a:	1b52      	subs	r2, r2, r5
 8000c6c:	d420      	bmi.n	8000cb0 <_malloc_r+0xd0>
 8000c6e:	2a0b      	cmp	r2, #11
 8000c70:	d917      	bls.n	8000ca2 <_malloc_r+0xc2>
 8000c72:	1961      	adds	r1, r4, r5
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	6025      	str	r5, [r4, #0]
 8000c78:	bf18      	it	ne
 8000c7a:	6059      	strne	r1, [r3, #4]
 8000c7c:	6863      	ldr	r3, [r4, #4]
 8000c7e:	bf08      	it	eq
 8000c80:	f8c8 1000 	streq.w	r1, [r8]
 8000c84:	5162      	str	r2, [r4, r5]
 8000c86:	604b      	str	r3, [r1, #4]
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f000 f82f 	bl	8000cec <__malloc_unlock>
 8000c8e:	f104 000b 	add.w	r0, r4, #11
 8000c92:	1d23      	adds	r3, r4, #4
 8000c94:	f020 0007 	bic.w	r0, r0, #7
 8000c98:	1ac2      	subs	r2, r0, r3
 8000c9a:	bf1c      	itt	ne
 8000c9c:	1a1b      	subne	r3, r3, r0
 8000c9e:	50a3      	strne	r3, [r4, r2]
 8000ca0:	e7af      	b.n	8000c02 <_malloc_r+0x22>
 8000ca2:	6862      	ldr	r2, [r4, #4]
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	bf0c      	ite	eq
 8000ca8:	f8c8 2000 	streq.w	r2, [r8]
 8000cac:	605a      	strne	r2, [r3, #4]
 8000cae:	e7eb      	b.n	8000c88 <_malloc_r+0xa8>
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	6864      	ldr	r4, [r4, #4]
 8000cb4:	e7ae      	b.n	8000c14 <_malloc_r+0x34>
 8000cb6:	463c      	mov	r4, r7
 8000cb8:	687f      	ldr	r7, [r7, #4]
 8000cba:	e7b6      	b.n	8000c2a <_malloc_r+0x4a>
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	42a3      	cmp	r3, r4
 8000cc2:	d1fb      	bne.n	8000cbc <_malloc_r+0xdc>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6053      	str	r3, [r2, #4]
 8000cc8:	e7de      	b.n	8000c88 <_malloc_r+0xa8>
 8000cca:	230c      	movs	r3, #12
 8000ccc:	6033      	str	r3, [r6, #0]
 8000cce:	4630      	mov	r0, r6
 8000cd0:	f000 f80c 	bl	8000cec <__malloc_unlock>
 8000cd4:	e794      	b.n	8000c00 <_malloc_r+0x20>
 8000cd6:	6005      	str	r5, [r0, #0]
 8000cd8:	e7d6      	b.n	8000c88 <_malloc_r+0xa8>
 8000cda:	bf00      	nop
 8000cdc:	200001d4 	.word	0x200001d4

08000ce0 <__malloc_lock>:
 8000ce0:	4801      	ldr	r0, [pc, #4]	@ (8000ce8 <__malloc_lock+0x8>)
 8000ce2:	f7ff bf0e 	b.w	8000b02 <__retarget_lock_acquire_recursive>
 8000ce6:	bf00      	nop
 8000ce8:	200001cc 	.word	0x200001cc

08000cec <__malloc_unlock>:
 8000cec:	4801      	ldr	r0, [pc, #4]	@ (8000cf4 <__malloc_unlock+0x8>)
 8000cee:	f7ff bf09 	b.w	8000b04 <__retarget_lock_release_recursive>
 8000cf2:	bf00      	nop
 8000cf4:	200001cc 	.word	0x200001cc

08000cf8 <__ssputs_r>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	688e      	ldr	r6, [r1, #8]
 8000cfe:	461f      	mov	r7, r3
 8000d00:	42be      	cmp	r6, r7
 8000d02:	680b      	ldr	r3, [r1, #0]
 8000d04:	4682      	mov	sl, r0
 8000d06:	460c      	mov	r4, r1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	d82d      	bhi.n	8000d68 <__ssputs_r+0x70>
 8000d0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000d14:	d026      	beq.n	8000d64 <__ssputs_r+0x6c>
 8000d16:	6965      	ldr	r5, [r4, #20]
 8000d18:	6909      	ldr	r1, [r1, #16]
 8000d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d1e:	eba3 0901 	sub.w	r9, r3, r1
 8000d22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d26:	1c7b      	adds	r3, r7, #1
 8000d28:	444b      	add	r3, r9
 8000d2a:	106d      	asrs	r5, r5, #1
 8000d2c:	429d      	cmp	r5, r3
 8000d2e:	bf38      	it	cc
 8000d30:	461d      	movcc	r5, r3
 8000d32:	0553      	lsls	r3, r2, #21
 8000d34:	d527      	bpl.n	8000d86 <__ssputs_r+0x8e>
 8000d36:	4629      	mov	r1, r5
 8000d38:	f7ff ff52 	bl	8000be0 <_malloc_r>
 8000d3c:	4606      	mov	r6, r0
 8000d3e:	b360      	cbz	r0, 8000d9a <__ssputs_r+0xa2>
 8000d40:	6921      	ldr	r1, [r4, #16]
 8000d42:	464a      	mov	r2, r9
 8000d44:	f000 fd6a 	bl	800181c <memcpy>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d52:	81a3      	strh	r3, [r4, #12]
 8000d54:	6126      	str	r6, [r4, #16]
 8000d56:	6165      	str	r5, [r4, #20]
 8000d58:	444e      	add	r6, r9
 8000d5a:	eba5 0509 	sub.w	r5, r5, r9
 8000d5e:	6026      	str	r6, [r4, #0]
 8000d60:	60a5      	str	r5, [r4, #8]
 8000d62:	463e      	mov	r6, r7
 8000d64:	42be      	cmp	r6, r7
 8000d66:	d900      	bls.n	8000d6a <__ssputs_r+0x72>
 8000d68:	463e      	mov	r6, r7
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	4632      	mov	r2, r6
 8000d6e:	4641      	mov	r1, r8
 8000d70:	f000 fd2a 	bl	80017c8 <memmove>
 8000d74:	68a3      	ldr	r3, [r4, #8]
 8000d76:	1b9b      	subs	r3, r3, r6
 8000d78:	60a3      	str	r3, [r4, #8]
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	4433      	add	r3, r6
 8000d7e:	6023      	str	r3, [r4, #0]
 8000d80:	2000      	movs	r0, #0
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	462a      	mov	r2, r5
 8000d88:	f000 fd56 	bl	8001838 <_realloc_r>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d1e0      	bne.n	8000d54 <__ssputs_r+0x5c>
 8000d92:	6921      	ldr	r1, [r4, #16]
 8000d94:	4650      	mov	r0, sl
 8000d96:	f7ff feb7 	bl	8000b08 <_free_r>
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	f8ca 3000 	str.w	r3, [sl]
 8000da0:	89a3      	ldrh	r3, [r4, #12]
 8000da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da6:	81a3      	strh	r3, [r4, #12]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	e7e9      	b.n	8000d82 <__ssputs_r+0x8a>
	...

08000db0 <_svfiprintf_r>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	4698      	mov	r8, r3
 8000db6:	898b      	ldrh	r3, [r1, #12]
 8000db8:	061b      	lsls	r3, r3, #24
 8000dba:	b09d      	sub	sp, #116	@ 0x74
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	460d      	mov	r5, r1
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	d510      	bpl.n	8000de6 <_svfiprintf_r+0x36>
 8000dc4:	690b      	ldr	r3, [r1, #16]
 8000dc6:	b973      	cbnz	r3, 8000de6 <_svfiprintf_r+0x36>
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	f7ff ff09 	bl	8000be0 <_malloc_r>
 8000dce:	6028      	str	r0, [r5, #0]
 8000dd0:	6128      	str	r0, [r5, #16]
 8000dd2:	b930      	cbnz	r0, 8000de2 <_svfiprintf_r+0x32>
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	b01d      	add	sp, #116	@ 0x74
 8000dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de2:	2340      	movs	r3, #64	@ 0x40
 8000de4:	616b      	str	r3, [r5, #20]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dea:	2320      	movs	r3, #32
 8000dec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000df4:	2330      	movs	r3, #48	@ 0x30
 8000df6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000f94 <_svfiprintf_r+0x1e4>
 8000dfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000dfe:	f04f 0901 	mov.w	r9, #1
 8000e02:	4623      	mov	r3, r4
 8000e04:	469a      	mov	sl, r3
 8000e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e0a:	b10a      	cbz	r2, 8000e10 <_svfiprintf_r+0x60>
 8000e0c:	2a25      	cmp	r2, #37	@ 0x25
 8000e0e:	d1f9      	bne.n	8000e04 <_svfiprintf_r+0x54>
 8000e10:	ebba 0b04 	subs.w	fp, sl, r4
 8000e14:	d00b      	beq.n	8000e2e <_svfiprintf_r+0x7e>
 8000e16:	465b      	mov	r3, fp
 8000e18:	4622      	mov	r2, r4
 8000e1a:	4629      	mov	r1, r5
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	f7ff ff6b 	bl	8000cf8 <__ssputs_r>
 8000e22:	3001      	adds	r0, #1
 8000e24:	f000 80a7 	beq.w	8000f76 <_svfiprintf_r+0x1c6>
 8000e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e2a:	445a      	add	r2, fp
 8000e2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 809f 	beq.w	8000f76 <_svfiprintf_r+0x1c6>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e42:	f10a 0a01 	add.w	sl, sl, #1
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	9307      	str	r3, [sp, #28]
 8000e4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e50:	4654      	mov	r4, sl
 8000e52:	2205      	movs	r2, #5
 8000e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e58:	484e      	ldr	r0, [pc, #312]	@ (8000f94 <_svfiprintf_r+0x1e4>)
 8000e5a:	f7ff f9d9 	bl	8000210 <memchr>
 8000e5e:	9a04      	ldr	r2, [sp, #16]
 8000e60:	b9d8      	cbnz	r0, 8000e9a <_svfiprintf_r+0xea>
 8000e62:	06d0      	lsls	r0, r2, #27
 8000e64:	bf44      	itt	mi
 8000e66:	2320      	movmi	r3, #32
 8000e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e6c:	0711      	lsls	r1, r2, #28
 8000e6e:	bf44      	itt	mi
 8000e70:	232b      	movmi	r3, #43	@ 0x2b
 8000e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e76:	f89a 3000 	ldrb.w	r3, [sl]
 8000e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e7c:	d015      	beq.n	8000eaa <_svfiprintf_r+0xfa>
 8000e7e:	9a07      	ldr	r2, [sp, #28]
 8000e80:	4654      	mov	r4, sl
 8000e82:	2000      	movs	r0, #0
 8000e84:	f04f 0c0a 	mov.w	ip, #10
 8000e88:	4621      	mov	r1, r4
 8000e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e8e:	3b30      	subs	r3, #48	@ 0x30
 8000e90:	2b09      	cmp	r3, #9
 8000e92:	d94b      	bls.n	8000f2c <_svfiprintf_r+0x17c>
 8000e94:	b1b0      	cbz	r0, 8000ec4 <_svfiprintf_r+0x114>
 8000e96:	9207      	str	r2, [sp, #28]
 8000e98:	e014      	b.n	8000ec4 <_svfiprintf_r+0x114>
 8000e9a:	eba0 0308 	sub.w	r3, r0, r8
 8000e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	9304      	str	r3, [sp, #16]
 8000ea6:	46a2      	mov	sl, r4
 8000ea8:	e7d2      	b.n	8000e50 <_svfiprintf_r+0xa0>
 8000eaa:	9b03      	ldr	r3, [sp, #12]
 8000eac:	1d19      	adds	r1, r3, #4
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	9103      	str	r1, [sp, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bfbb      	ittet	lt
 8000eb6:	425b      	neglt	r3, r3
 8000eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8000ebc:	9307      	strge	r3, [sp, #28]
 8000ebe:	9307      	strlt	r3, [sp, #28]
 8000ec0:	bfb8      	it	lt
 8000ec2:	9204      	strlt	r2, [sp, #16]
 8000ec4:	7823      	ldrb	r3, [r4, #0]
 8000ec6:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ec8:	d10a      	bne.n	8000ee0 <_svfiprintf_r+0x130>
 8000eca:	7863      	ldrb	r3, [r4, #1]
 8000ecc:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ece:	d132      	bne.n	8000f36 <_svfiprintf_r+0x186>
 8000ed0:	9b03      	ldr	r3, [sp, #12]
 8000ed2:	1d1a      	adds	r2, r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	9203      	str	r2, [sp, #12]
 8000ed8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000edc:	3402      	adds	r4, #2
 8000ede:	9305      	str	r3, [sp, #20]
 8000ee0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000fa4 <_svfiprintf_r+0x1f4>
 8000ee4:	7821      	ldrb	r1, [r4, #0]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4650      	mov	r0, sl
 8000eea:	f7ff f991 	bl	8000210 <memchr>
 8000eee:	b138      	cbz	r0, 8000f00 <_svfiprintf_r+0x150>
 8000ef0:	9b04      	ldr	r3, [sp, #16]
 8000ef2:	eba0 000a 	sub.w	r0, r0, sl
 8000ef6:	2240      	movs	r2, #64	@ 0x40
 8000ef8:	4082      	lsls	r2, r0
 8000efa:	4313      	orrs	r3, r2
 8000efc:	3401      	adds	r4, #1
 8000efe:	9304      	str	r3, [sp, #16]
 8000f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f04:	4824      	ldr	r0, [pc, #144]	@ (8000f98 <_svfiprintf_r+0x1e8>)
 8000f06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f0a:	2206      	movs	r2, #6
 8000f0c:	f7ff f980 	bl	8000210 <memchr>
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d036      	beq.n	8000f82 <_svfiprintf_r+0x1d2>
 8000f14:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <_svfiprintf_r+0x1ec>)
 8000f16:	bb1b      	cbnz	r3, 8000f60 <_svfiprintf_r+0x1b0>
 8000f18:	9b03      	ldr	r3, [sp, #12]
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	f023 0307 	bic.w	r3, r3, #7
 8000f20:	3308      	adds	r3, #8
 8000f22:	9303      	str	r3, [sp, #12]
 8000f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f26:	4433      	add	r3, r6
 8000f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f2a:	e76a      	b.n	8000e02 <_svfiprintf_r+0x52>
 8000f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f30:	460c      	mov	r4, r1
 8000f32:	2001      	movs	r0, #1
 8000f34:	e7a8      	b.n	8000e88 <_svfiprintf_r+0xd8>
 8000f36:	2300      	movs	r3, #0
 8000f38:	3401      	adds	r4, #1
 8000f3a:	9305      	str	r3, [sp, #20]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 0c0a 	mov.w	ip, #10
 8000f42:	4620      	mov	r0, r4
 8000f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f48:	3a30      	subs	r2, #48	@ 0x30
 8000f4a:	2a09      	cmp	r2, #9
 8000f4c:	d903      	bls.n	8000f56 <_svfiprintf_r+0x1a6>
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d0c6      	beq.n	8000ee0 <_svfiprintf_r+0x130>
 8000f52:	9105      	str	r1, [sp, #20]
 8000f54:	e7c4      	b.n	8000ee0 <_svfiprintf_r+0x130>
 8000f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e7f0      	b.n	8000f42 <_svfiprintf_r+0x192>
 8000f60:	ab03      	add	r3, sp, #12
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	462a      	mov	r2, r5
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <_svfiprintf_r+0x1f0>)
 8000f68:	a904      	add	r1, sp, #16
 8000f6a:	4638      	mov	r0, r7
 8000f6c:	f3af 8000 	nop.w
 8000f70:	1c42      	adds	r2, r0, #1
 8000f72:	4606      	mov	r6, r0
 8000f74:	d1d6      	bne.n	8000f24 <_svfiprintf_r+0x174>
 8000f76:	89ab      	ldrh	r3, [r5, #12]
 8000f78:	065b      	lsls	r3, r3, #25
 8000f7a:	f53f af2d 	bmi.w	8000dd8 <_svfiprintf_r+0x28>
 8000f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f80:	e72c      	b.n	8000ddc <_svfiprintf_r+0x2c>
 8000f82:	ab03      	add	r3, sp, #12
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	462a      	mov	r2, r5
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <_svfiprintf_r+0x1f0>)
 8000f8a:	a904      	add	r1, sp, #16
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	f000 f9bb 	bl	8001308 <_printf_i>
 8000f92:	e7ed      	b.n	8000f70 <_svfiprintf_r+0x1c0>
 8000f94:	080019c7 	.word	0x080019c7
 8000f98:	080019d1 	.word	0x080019d1
 8000f9c:	00000000 	.word	0x00000000
 8000fa0:	08000cf9 	.word	0x08000cf9
 8000fa4:	080019cd 	.word	0x080019cd

08000fa8 <__sfputc_r>:
 8000fa8:	6893      	ldr	r3, [r2, #8]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	b410      	push	{r4}
 8000fb0:	6093      	str	r3, [r2, #8]
 8000fb2:	da08      	bge.n	8000fc6 <__sfputc_r+0x1e>
 8000fb4:	6994      	ldr	r4, [r2, #24]
 8000fb6:	42a3      	cmp	r3, r4
 8000fb8:	db01      	blt.n	8000fbe <__sfputc_r+0x16>
 8000fba:	290a      	cmp	r1, #10
 8000fbc:	d103      	bne.n	8000fc6 <__sfputc_r+0x1e>
 8000fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fc2:	f000 bb6d 	b.w	80016a0 <__swbuf_r>
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	1c58      	adds	r0, r3, #1
 8000fca:	6010      	str	r0, [r2, #0]
 8000fcc:	7019      	strb	r1, [r3, #0]
 8000fce:	4608      	mov	r0, r1
 8000fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <__sfputs_r>:
 8000fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd8:	4606      	mov	r6, r0
 8000fda:	460f      	mov	r7, r1
 8000fdc:	4614      	mov	r4, r2
 8000fde:	18d5      	adds	r5, r2, r3
 8000fe0:	42ac      	cmp	r4, r5
 8000fe2:	d101      	bne.n	8000fe8 <__sfputs_r+0x12>
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	e007      	b.n	8000ff8 <__sfputs_r+0x22>
 8000fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fec:	463a      	mov	r2, r7
 8000fee:	4630      	mov	r0, r6
 8000ff0:	f7ff ffda 	bl	8000fa8 <__sfputc_r>
 8000ff4:	1c43      	adds	r3, r0, #1
 8000ff6:	d1f3      	bne.n	8000fe0 <__sfputs_r+0xa>
 8000ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ffc <_vfiprintf_r>:
 8000ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	460d      	mov	r5, r1
 8001002:	b09d      	sub	sp, #116	@ 0x74
 8001004:	4614      	mov	r4, r2
 8001006:	4698      	mov	r8, r3
 8001008:	4606      	mov	r6, r0
 800100a:	b118      	cbz	r0, 8001014 <_vfiprintf_r+0x18>
 800100c:	6a03      	ldr	r3, [r0, #32]
 800100e:	b90b      	cbnz	r3, 8001014 <_vfiprintf_r+0x18>
 8001010:	f7ff fc52 	bl	80008b8 <__sinit>
 8001014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001016:	07d9      	lsls	r1, r3, #31
 8001018:	d405      	bmi.n	8001026 <_vfiprintf_r+0x2a>
 800101a:	89ab      	ldrh	r3, [r5, #12]
 800101c:	059a      	lsls	r2, r3, #22
 800101e:	d402      	bmi.n	8001026 <_vfiprintf_r+0x2a>
 8001020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001022:	f7ff fd6e 	bl	8000b02 <__retarget_lock_acquire_recursive>
 8001026:	89ab      	ldrh	r3, [r5, #12]
 8001028:	071b      	lsls	r3, r3, #28
 800102a:	d501      	bpl.n	8001030 <_vfiprintf_r+0x34>
 800102c:	692b      	ldr	r3, [r5, #16]
 800102e:	b99b      	cbnz	r3, 8001058 <_vfiprintf_r+0x5c>
 8001030:	4629      	mov	r1, r5
 8001032:	4630      	mov	r0, r6
 8001034:	f000 fb72 	bl	800171c <__swsetup_r>
 8001038:	b170      	cbz	r0, 8001058 <_vfiprintf_r+0x5c>
 800103a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800103c:	07dc      	lsls	r4, r3, #31
 800103e:	d504      	bpl.n	800104a <_vfiprintf_r+0x4e>
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	b01d      	add	sp, #116	@ 0x74
 8001046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800104a:	89ab      	ldrh	r3, [r5, #12]
 800104c:	0598      	lsls	r0, r3, #22
 800104e:	d4f7      	bmi.n	8001040 <_vfiprintf_r+0x44>
 8001050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001052:	f7ff fd57 	bl	8000b04 <__retarget_lock_release_recursive>
 8001056:	e7f3      	b.n	8001040 <_vfiprintf_r+0x44>
 8001058:	2300      	movs	r3, #0
 800105a:	9309      	str	r3, [sp, #36]	@ 0x24
 800105c:	2320      	movs	r3, #32
 800105e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001062:	f8cd 800c 	str.w	r8, [sp, #12]
 8001066:	2330      	movs	r3, #48	@ 0x30
 8001068:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001218 <_vfiprintf_r+0x21c>
 800106c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001070:	f04f 0901 	mov.w	r9, #1
 8001074:	4623      	mov	r3, r4
 8001076:	469a      	mov	sl, r3
 8001078:	f813 2b01 	ldrb.w	r2, [r3], #1
 800107c:	b10a      	cbz	r2, 8001082 <_vfiprintf_r+0x86>
 800107e:	2a25      	cmp	r2, #37	@ 0x25
 8001080:	d1f9      	bne.n	8001076 <_vfiprintf_r+0x7a>
 8001082:	ebba 0b04 	subs.w	fp, sl, r4
 8001086:	d00b      	beq.n	80010a0 <_vfiprintf_r+0xa4>
 8001088:	465b      	mov	r3, fp
 800108a:	4622      	mov	r2, r4
 800108c:	4629      	mov	r1, r5
 800108e:	4630      	mov	r0, r6
 8001090:	f7ff ffa1 	bl	8000fd6 <__sfputs_r>
 8001094:	3001      	adds	r0, #1
 8001096:	f000 80a7 	beq.w	80011e8 <_vfiprintf_r+0x1ec>
 800109a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800109c:	445a      	add	r2, fp
 800109e:	9209      	str	r2, [sp, #36]	@ 0x24
 80010a0:	f89a 3000 	ldrb.w	r3, [sl]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 809f 	beq.w	80011e8 <_vfiprintf_r+0x1ec>
 80010aa:	2300      	movs	r3, #0
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010b4:	f10a 0a01 	add.w	sl, sl, #1
 80010b8:	9304      	str	r3, [sp, #16]
 80010ba:	9307      	str	r3, [sp, #28]
 80010bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80010c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80010c2:	4654      	mov	r4, sl
 80010c4:	2205      	movs	r2, #5
 80010c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ca:	4853      	ldr	r0, [pc, #332]	@ (8001218 <_vfiprintf_r+0x21c>)
 80010cc:	f7ff f8a0 	bl	8000210 <memchr>
 80010d0:	9a04      	ldr	r2, [sp, #16]
 80010d2:	b9d8      	cbnz	r0, 800110c <_vfiprintf_r+0x110>
 80010d4:	06d1      	lsls	r1, r2, #27
 80010d6:	bf44      	itt	mi
 80010d8:	2320      	movmi	r3, #32
 80010da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010de:	0713      	lsls	r3, r2, #28
 80010e0:	bf44      	itt	mi
 80010e2:	232b      	movmi	r3, #43	@ 0x2b
 80010e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80010e8:	f89a 3000 	ldrb.w	r3, [sl]
 80010ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80010ee:	d015      	beq.n	800111c <_vfiprintf_r+0x120>
 80010f0:	9a07      	ldr	r2, [sp, #28]
 80010f2:	4654      	mov	r4, sl
 80010f4:	2000      	movs	r0, #0
 80010f6:	f04f 0c0a 	mov.w	ip, #10
 80010fa:	4621      	mov	r1, r4
 80010fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001100:	3b30      	subs	r3, #48	@ 0x30
 8001102:	2b09      	cmp	r3, #9
 8001104:	d94b      	bls.n	800119e <_vfiprintf_r+0x1a2>
 8001106:	b1b0      	cbz	r0, 8001136 <_vfiprintf_r+0x13a>
 8001108:	9207      	str	r2, [sp, #28]
 800110a:	e014      	b.n	8001136 <_vfiprintf_r+0x13a>
 800110c:	eba0 0308 	sub.w	r3, r0, r8
 8001110:	fa09 f303 	lsl.w	r3, r9, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	9304      	str	r3, [sp, #16]
 8001118:	46a2      	mov	sl, r4
 800111a:	e7d2      	b.n	80010c2 <_vfiprintf_r+0xc6>
 800111c:	9b03      	ldr	r3, [sp, #12]
 800111e:	1d19      	adds	r1, r3, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9103      	str	r1, [sp, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bfbb      	ittet	lt
 8001128:	425b      	neglt	r3, r3
 800112a:	f042 0202 	orrlt.w	r2, r2, #2
 800112e:	9307      	strge	r3, [sp, #28]
 8001130:	9307      	strlt	r3, [sp, #28]
 8001132:	bfb8      	it	lt
 8001134:	9204      	strlt	r2, [sp, #16]
 8001136:	7823      	ldrb	r3, [r4, #0]
 8001138:	2b2e      	cmp	r3, #46	@ 0x2e
 800113a:	d10a      	bne.n	8001152 <_vfiprintf_r+0x156>
 800113c:	7863      	ldrb	r3, [r4, #1]
 800113e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001140:	d132      	bne.n	80011a8 <_vfiprintf_r+0x1ac>
 8001142:	9b03      	ldr	r3, [sp, #12]
 8001144:	1d1a      	adds	r2, r3, #4
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	9203      	str	r2, [sp, #12]
 800114a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800114e:	3402      	adds	r4, #2
 8001150:	9305      	str	r3, [sp, #20]
 8001152:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001228 <_vfiprintf_r+0x22c>
 8001156:	7821      	ldrb	r1, [r4, #0]
 8001158:	2203      	movs	r2, #3
 800115a:	4650      	mov	r0, sl
 800115c:	f7ff f858 	bl	8000210 <memchr>
 8001160:	b138      	cbz	r0, 8001172 <_vfiprintf_r+0x176>
 8001162:	9b04      	ldr	r3, [sp, #16]
 8001164:	eba0 000a 	sub.w	r0, r0, sl
 8001168:	2240      	movs	r2, #64	@ 0x40
 800116a:	4082      	lsls	r2, r0
 800116c:	4313      	orrs	r3, r2
 800116e:	3401      	adds	r4, #1
 8001170:	9304      	str	r3, [sp, #16]
 8001172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001176:	4829      	ldr	r0, [pc, #164]	@ (800121c <_vfiprintf_r+0x220>)
 8001178:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800117c:	2206      	movs	r2, #6
 800117e:	f7ff f847 	bl	8000210 <memchr>
 8001182:	2800      	cmp	r0, #0
 8001184:	d03f      	beq.n	8001206 <_vfiprintf_r+0x20a>
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <_vfiprintf_r+0x224>)
 8001188:	bb1b      	cbnz	r3, 80011d2 <_vfiprintf_r+0x1d6>
 800118a:	9b03      	ldr	r3, [sp, #12]
 800118c:	3307      	adds	r3, #7
 800118e:	f023 0307 	bic.w	r3, r3, #7
 8001192:	3308      	adds	r3, #8
 8001194:	9303      	str	r3, [sp, #12]
 8001196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001198:	443b      	add	r3, r7
 800119a:	9309      	str	r3, [sp, #36]	@ 0x24
 800119c:	e76a      	b.n	8001074 <_vfiprintf_r+0x78>
 800119e:	fb0c 3202 	mla	r2, ip, r2, r3
 80011a2:	460c      	mov	r4, r1
 80011a4:	2001      	movs	r0, #1
 80011a6:	e7a8      	b.n	80010fa <_vfiprintf_r+0xfe>
 80011a8:	2300      	movs	r3, #0
 80011aa:	3401      	adds	r4, #1
 80011ac:	9305      	str	r3, [sp, #20]
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 0c0a 	mov.w	ip, #10
 80011b4:	4620      	mov	r0, r4
 80011b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011ba:	3a30      	subs	r2, #48	@ 0x30
 80011bc:	2a09      	cmp	r2, #9
 80011be:	d903      	bls.n	80011c8 <_vfiprintf_r+0x1cc>
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0c6      	beq.n	8001152 <_vfiprintf_r+0x156>
 80011c4:	9105      	str	r1, [sp, #20]
 80011c6:	e7c4      	b.n	8001152 <_vfiprintf_r+0x156>
 80011c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80011cc:	4604      	mov	r4, r0
 80011ce:	2301      	movs	r3, #1
 80011d0:	e7f0      	b.n	80011b4 <_vfiprintf_r+0x1b8>
 80011d2:	ab03      	add	r3, sp, #12
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	462a      	mov	r2, r5
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <_vfiprintf_r+0x228>)
 80011da:	a904      	add	r1, sp, #16
 80011dc:	4630      	mov	r0, r6
 80011de:	f3af 8000 	nop.w
 80011e2:	4607      	mov	r7, r0
 80011e4:	1c78      	adds	r0, r7, #1
 80011e6:	d1d6      	bne.n	8001196 <_vfiprintf_r+0x19a>
 80011e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80011ea:	07d9      	lsls	r1, r3, #31
 80011ec:	d405      	bmi.n	80011fa <_vfiprintf_r+0x1fe>
 80011ee:	89ab      	ldrh	r3, [r5, #12]
 80011f0:	059a      	lsls	r2, r3, #22
 80011f2:	d402      	bmi.n	80011fa <_vfiprintf_r+0x1fe>
 80011f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80011f6:	f7ff fc85 	bl	8000b04 <__retarget_lock_release_recursive>
 80011fa:	89ab      	ldrh	r3, [r5, #12]
 80011fc:	065b      	lsls	r3, r3, #25
 80011fe:	f53f af1f 	bmi.w	8001040 <_vfiprintf_r+0x44>
 8001202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001204:	e71e      	b.n	8001044 <_vfiprintf_r+0x48>
 8001206:	ab03      	add	r3, sp, #12
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	462a      	mov	r2, r5
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <_vfiprintf_r+0x228>)
 800120e:	a904      	add	r1, sp, #16
 8001210:	4630      	mov	r0, r6
 8001212:	f000 f879 	bl	8001308 <_printf_i>
 8001216:	e7e4      	b.n	80011e2 <_vfiprintf_r+0x1e6>
 8001218:	080019c7 	.word	0x080019c7
 800121c:	080019d1 	.word	0x080019d1
 8001220:	00000000 	.word	0x00000000
 8001224:	08000fd7 	.word	0x08000fd7
 8001228:	080019cd 	.word	0x080019cd

0800122c <_printf_common>:
 800122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001230:	4616      	mov	r6, r2
 8001232:	4698      	mov	r8, r3
 8001234:	688a      	ldr	r2, [r1, #8]
 8001236:	690b      	ldr	r3, [r1, #16]
 8001238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800123c:	4293      	cmp	r3, r2
 800123e:	bfb8      	it	lt
 8001240:	4613      	movlt	r3, r2
 8001242:	6033      	str	r3, [r6, #0]
 8001244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001248:	4607      	mov	r7, r0
 800124a:	460c      	mov	r4, r1
 800124c:	b10a      	cbz	r2, 8001252 <_printf_common+0x26>
 800124e:	3301      	adds	r3, #1
 8001250:	6033      	str	r3, [r6, #0]
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	0699      	lsls	r1, r3, #26
 8001256:	bf42      	ittt	mi
 8001258:	6833      	ldrmi	r3, [r6, #0]
 800125a:	3302      	addmi	r3, #2
 800125c:	6033      	strmi	r3, [r6, #0]
 800125e:	6825      	ldr	r5, [r4, #0]
 8001260:	f015 0506 	ands.w	r5, r5, #6
 8001264:	d106      	bne.n	8001274 <_printf_common+0x48>
 8001266:	f104 0a19 	add.w	sl, r4, #25
 800126a:	68e3      	ldr	r3, [r4, #12]
 800126c:	6832      	ldr	r2, [r6, #0]
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	42ab      	cmp	r3, r5
 8001272:	dc26      	bgt.n	80012c2 <_printf_common+0x96>
 8001274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	3b00      	subs	r3, #0
 800127c:	bf18      	it	ne
 800127e:	2301      	movne	r3, #1
 8001280:	0692      	lsls	r2, r2, #26
 8001282:	d42b      	bmi.n	80012dc <_printf_common+0xb0>
 8001284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001288:	4641      	mov	r1, r8
 800128a:	4638      	mov	r0, r7
 800128c:	47c8      	blx	r9
 800128e:	3001      	adds	r0, #1
 8001290:	d01e      	beq.n	80012d0 <_printf_common+0xa4>
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	6922      	ldr	r2, [r4, #16]
 8001296:	f003 0306 	and.w	r3, r3, #6
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf02      	ittt	eq
 800129e:	68e5      	ldreq	r5, [r4, #12]
 80012a0:	6833      	ldreq	r3, [r6, #0]
 80012a2:	1aed      	subeq	r5, r5, r3
 80012a4:	68a3      	ldr	r3, [r4, #8]
 80012a6:	bf0c      	ite	eq
 80012a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012ac:	2500      	movne	r5, #0
 80012ae:	4293      	cmp	r3, r2
 80012b0:	bfc4      	itt	gt
 80012b2:	1a9b      	subgt	r3, r3, r2
 80012b4:	18ed      	addgt	r5, r5, r3
 80012b6:	2600      	movs	r6, #0
 80012b8:	341a      	adds	r4, #26
 80012ba:	42b5      	cmp	r5, r6
 80012bc:	d11a      	bne.n	80012f4 <_printf_common+0xc8>
 80012be:	2000      	movs	r0, #0
 80012c0:	e008      	b.n	80012d4 <_printf_common+0xa8>
 80012c2:	2301      	movs	r3, #1
 80012c4:	4652      	mov	r2, sl
 80012c6:	4641      	mov	r1, r8
 80012c8:	4638      	mov	r0, r7
 80012ca:	47c8      	blx	r9
 80012cc:	3001      	adds	r0, #1
 80012ce:	d103      	bne.n	80012d8 <_printf_common+0xac>
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012d8:	3501      	adds	r5, #1
 80012da:	e7c6      	b.n	800126a <_printf_common+0x3e>
 80012dc:	18e1      	adds	r1, r4, r3
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	2030      	movs	r0, #48	@ 0x30
 80012e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80012e6:	4422      	add	r2, r4
 80012e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80012ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80012f0:	3302      	adds	r3, #2
 80012f2:	e7c7      	b.n	8001284 <_printf_common+0x58>
 80012f4:	2301      	movs	r3, #1
 80012f6:	4622      	mov	r2, r4
 80012f8:	4641      	mov	r1, r8
 80012fa:	4638      	mov	r0, r7
 80012fc:	47c8      	blx	r9
 80012fe:	3001      	adds	r0, #1
 8001300:	d0e6      	beq.n	80012d0 <_printf_common+0xa4>
 8001302:	3601      	adds	r6, #1
 8001304:	e7d9      	b.n	80012ba <_printf_common+0x8e>
	...

08001308 <_printf_i>:
 8001308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800130c:	7e0f      	ldrb	r7, [r1, #24]
 800130e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001310:	2f78      	cmp	r7, #120	@ 0x78
 8001312:	4691      	mov	r9, r2
 8001314:	4680      	mov	r8, r0
 8001316:	460c      	mov	r4, r1
 8001318:	469a      	mov	sl, r3
 800131a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800131e:	d807      	bhi.n	8001330 <_printf_i+0x28>
 8001320:	2f62      	cmp	r7, #98	@ 0x62
 8001322:	d80a      	bhi.n	800133a <_printf_i+0x32>
 8001324:	2f00      	cmp	r7, #0
 8001326:	f000 80d2 	beq.w	80014ce <_printf_i+0x1c6>
 800132a:	2f58      	cmp	r7, #88	@ 0x58
 800132c:	f000 80b9 	beq.w	80014a2 <_printf_i+0x19a>
 8001330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001338:	e03a      	b.n	80013b0 <_printf_i+0xa8>
 800133a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800133e:	2b15      	cmp	r3, #21
 8001340:	d8f6      	bhi.n	8001330 <_printf_i+0x28>
 8001342:	a101      	add	r1, pc, #4	@ (adr r1, 8001348 <_printf_i+0x40>)
 8001344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001348:	080013a1 	.word	0x080013a1
 800134c:	080013b5 	.word	0x080013b5
 8001350:	08001331 	.word	0x08001331
 8001354:	08001331 	.word	0x08001331
 8001358:	08001331 	.word	0x08001331
 800135c:	08001331 	.word	0x08001331
 8001360:	080013b5 	.word	0x080013b5
 8001364:	08001331 	.word	0x08001331
 8001368:	08001331 	.word	0x08001331
 800136c:	08001331 	.word	0x08001331
 8001370:	08001331 	.word	0x08001331
 8001374:	080014b5 	.word	0x080014b5
 8001378:	080013df 	.word	0x080013df
 800137c:	0800146f 	.word	0x0800146f
 8001380:	08001331 	.word	0x08001331
 8001384:	08001331 	.word	0x08001331
 8001388:	080014d7 	.word	0x080014d7
 800138c:	08001331 	.word	0x08001331
 8001390:	080013df 	.word	0x080013df
 8001394:	08001331 	.word	0x08001331
 8001398:	08001331 	.word	0x08001331
 800139c:	08001477 	.word	0x08001477
 80013a0:	6833      	ldr	r3, [r6, #0]
 80013a2:	1d1a      	adds	r2, r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6032      	str	r2, [r6, #0]
 80013a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80013ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80013b0:	2301      	movs	r3, #1
 80013b2:	e09d      	b.n	80014f0 <_printf_i+0x1e8>
 80013b4:	6833      	ldr	r3, [r6, #0]
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	1d19      	adds	r1, r3, #4
 80013ba:	6031      	str	r1, [r6, #0]
 80013bc:	0606      	lsls	r6, r0, #24
 80013be:	d501      	bpl.n	80013c4 <_printf_i+0xbc>
 80013c0:	681d      	ldr	r5, [r3, #0]
 80013c2:	e003      	b.n	80013cc <_printf_i+0xc4>
 80013c4:	0645      	lsls	r5, r0, #25
 80013c6:	d5fb      	bpl.n	80013c0 <_printf_i+0xb8>
 80013c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013cc:	2d00      	cmp	r5, #0
 80013ce:	da03      	bge.n	80013d8 <_printf_i+0xd0>
 80013d0:	232d      	movs	r3, #45	@ 0x2d
 80013d2:	426d      	negs	r5, r5
 80013d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013d8:	4859      	ldr	r0, [pc, #356]	@ (8001540 <_printf_i+0x238>)
 80013da:	230a      	movs	r3, #10
 80013dc:	e011      	b.n	8001402 <_printf_i+0xfa>
 80013de:	6821      	ldr	r1, [r4, #0]
 80013e0:	6833      	ldr	r3, [r6, #0]
 80013e2:	0608      	lsls	r0, r1, #24
 80013e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80013e8:	d402      	bmi.n	80013f0 <_printf_i+0xe8>
 80013ea:	0649      	lsls	r1, r1, #25
 80013ec:	bf48      	it	mi
 80013ee:	b2ad      	uxthmi	r5, r5
 80013f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80013f2:	4853      	ldr	r0, [pc, #332]	@ (8001540 <_printf_i+0x238>)
 80013f4:	6033      	str	r3, [r6, #0]
 80013f6:	bf14      	ite	ne
 80013f8:	230a      	movne	r3, #10
 80013fa:	2308      	moveq	r3, #8
 80013fc:	2100      	movs	r1, #0
 80013fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001402:	6866      	ldr	r6, [r4, #4]
 8001404:	60a6      	str	r6, [r4, #8]
 8001406:	2e00      	cmp	r6, #0
 8001408:	bfa2      	ittt	ge
 800140a:	6821      	ldrge	r1, [r4, #0]
 800140c:	f021 0104 	bicge.w	r1, r1, #4
 8001410:	6021      	strge	r1, [r4, #0]
 8001412:	b90d      	cbnz	r5, 8001418 <_printf_i+0x110>
 8001414:	2e00      	cmp	r6, #0
 8001416:	d04b      	beq.n	80014b0 <_printf_i+0x1a8>
 8001418:	4616      	mov	r6, r2
 800141a:	fbb5 f1f3 	udiv	r1, r5, r3
 800141e:	fb03 5711 	mls	r7, r3, r1, r5
 8001422:	5dc7      	ldrb	r7, [r0, r7]
 8001424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001428:	462f      	mov	r7, r5
 800142a:	42bb      	cmp	r3, r7
 800142c:	460d      	mov	r5, r1
 800142e:	d9f4      	bls.n	800141a <_printf_i+0x112>
 8001430:	2b08      	cmp	r3, #8
 8001432:	d10b      	bne.n	800144c <_printf_i+0x144>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	07df      	lsls	r7, r3, #31
 8001438:	d508      	bpl.n	800144c <_printf_i+0x144>
 800143a:	6923      	ldr	r3, [r4, #16]
 800143c:	6861      	ldr	r1, [r4, #4]
 800143e:	4299      	cmp	r1, r3
 8001440:	bfde      	ittt	le
 8001442:	2330      	movle	r3, #48	@ 0x30
 8001444:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001448:	f106 36ff 	addle.w	r6, r6, #4294967295
 800144c:	1b92      	subs	r2, r2, r6
 800144e:	6122      	str	r2, [r4, #16]
 8001450:	f8cd a000 	str.w	sl, [sp]
 8001454:	464b      	mov	r3, r9
 8001456:	aa03      	add	r2, sp, #12
 8001458:	4621      	mov	r1, r4
 800145a:	4640      	mov	r0, r8
 800145c:	f7ff fee6 	bl	800122c <_printf_common>
 8001460:	3001      	adds	r0, #1
 8001462:	d14a      	bne.n	80014fa <_printf_i+0x1f2>
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	b004      	add	sp, #16
 800146a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	4833      	ldr	r0, [pc, #204]	@ (8001544 <_printf_i+0x23c>)
 8001478:	2778      	movs	r7, #120	@ 0x78
 800147a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	6831      	ldr	r1, [r6, #0]
 8001482:	061f      	lsls	r7, r3, #24
 8001484:	f851 5b04 	ldr.w	r5, [r1], #4
 8001488:	d402      	bmi.n	8001490 <_printf_i+0x188>
 800148a:	065f      	lsls	r7, r3, #25
 800148c:	bf48      	it	mi
 800148e:	b2ad      	uxthmi	r5, r5
 8001490:	6031      	str	r1, [r6, #0]
 8001492:	07d9      	lsls	r1, r3, #31
 8001494:	bf44      	itt	mi
 8001496:	f043 0320 	orrmi.w	r3, r3, #32
 800149a:	6023      	strmi	r3, [r4, #0]
 800149c:	b11d      	cbz	r5, 80014a6 <_printf_i+0x19e>
 800149e:	2310      	movs	r3, #16
 80014a0:	e7ac      	b.n	80013fc <_printf_i+0xf4>
 80014a2:	4827      	ldr	r0, [pc, #156]	@ (8001540 <_printf_i+0x238>)
 80014a4:	e7e9      	b.n	800147a <_printf_i+0x172>
 80014a6:	6823      	ldr	r3, [r4, #0]
 80014a8:	f023 0320 	bic.w	r3, r3, #32
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	e7f6      	b.n	800149e <_printf_i+0x196>
 80014b0:	4616      	mov	r6, r2
 80014b2:	e7bd      	b.n	8001430 <_printf_i+0x128>
 80014b4:	6833      	ldr	r3, [r6, #0]
 80014b6:	6825      	ldr	r5, [r4, #0]
 80014b8:	6961      	ldr	r1, [r4, #20]
 80014ba:	1d18      	adds	r0, r3, #4
 80014bc:	6030      	str	r0, [r6, #0]
 80014be:	062e      	lsls	r6, r5, #24
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	d501      	bpl.n	80014c8 <_printf_i+0x1c0>
 80014c4:	6019      	str	r1, [r3, #0]
 80014c6:	e002      	b.n	80014ce <_printf_i+0x1c6>
 80014c8:	0668      	lsls	r0, r5, #25
 80014ca:	d5fb      	bpl.n	80014c4 <_printf_i+0x1bc>
 80014cc:	8019      	strh	r1, [r3, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	6123      	str	r3, [r4, #16]
 80014d2:	4616      	mov	r6, r2
 80014d4:	e7bc      	b.n	8001450 <_printf_i+0x148>
 80014d6:	6833      	ldr	r3, [r6, #0]
 80014d8:	1d1a      	adds	r2, r3, #4
 80014da:	6032      	str	r2, [r6, #0]
 80014dc:	681e      	ldr	r6, [r3, #0]
 80014de:	6862      	ldr	r2, [r4, #4]
 80014e0:	2100      	movs	r1, #0
 80014e2:	4630      	mov	r0, r6
 80014e4:	f7fe fe94 	bl	8000210 <memchr>
 80014e8:	b108      	cbz	r0, 80014ee <_printf_i+0x1e6>
 80014ea:	1b80      	subs	r0, r0, r6
 80014ec:	6060      	str	r0, [r4, #4]
 80014ee:	6863      	ldr	r3, [r4, #4]
 80014f0:	6123      	str	r3, [r4, #16]
 80014f2:	2300      	movs	r3, #0
 80014f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014f8:	e7aa      	b.n	8001450 <_printf_i+0x148>
 80014fa:	6923      	ldr	r3, [r4, #16]
 80014fc:	4632      	mov	r2, r6
 80014fe:	4649      	mov	r1, r9
 8001500:	4640      	mov	r0, r8
 8001502:	47d0      	blx	sl
 8001504:	3001      	adds	r0, #1
 8001506:	d0ad      	beq.n	8001464 <_printf_i+0x15c>
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	079b      	lsls	r3, r3, #30
 800150c:	d413      	bmi.n	8001536 <_printf_i+0x22e>
 800150e:	68e0      	ldr	r0, [r4, #12]
 8001510:	9b03      	ldr	r3, [sp, #12]
 8001512:	4298      	cmp	r0, r3
 8001514:	bfb8      	it	lt
 8001516:	4618      	movlt	r0, r3
 8001518:	e7a6      	b.n	8001468 <_printf_i+0x160>
 800151a:	2301      	movs	r3, #1
 800151c:	4632      	mov	r2, r6
 800151e:	4649      	mov	r1, r9
 8001520:	4640      	mov	r0, r8
 8001522:	47d0      	blx	sl
 8001524:	3001      	adds	r0, #1
 8001526:	d09d      	beq.n	8001464 <_printf_i+0x15c>
 8001528:	3501      	adds	r5, #1
 800152a:	68e3      	ldr	r3, [r4, #12]
 800152c:	9903      	ldr	r1, [sp, #12]
 800152e:	1a5b      	subs	r3, r3, r1
 8001530:	42ab      	cmp	r3, r5
 8001532:	dcf2      	bgt.n	800151a <_printf_i+0x212>
 8001534:	e7eb      	b.n	800150e <_printf_i+0x206>
 8001536:	2500      	movs	r5, #0
 8001538:	f104 0619 	add.w	r6, r4, #25
 800153c:	e7f5      	b.n	800152a <_printf_i+0x222>
 800153e:	bf00      	nop
 8001540:	080019d8 	.word	0x080019d8
 8001544:	080019e9 	.word	0x080019e9

08001548 <__sflush_r>:
 8001548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001550:	0716      	lsls	r6, r2, #28
 8001552:	4605      	mov	r5, r0
 8001554:	460c      	mov	r4, r1
 8001556:	d454      	bmi.n	8001602 <__sflush_r+0xba>
 8001558:	684b      	ldr	r3, [r1, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc02      	bgt.n	8001564 <__sflush_r+0x1c>
 800155e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001560:	2b00      	cmp	r3, #0
 8001562:	dd48      	ble.n	80015f6 <__sflush_r+0xae>
 8001564:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001566:	2e00      	cmp	r6, #0
 8001568:	d045      	beq.n	80015f6 <__sflush_r+0xae>
 800156a:	2300      	movs	r3, #0
 800156c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001570:	682f      	ldr	r7, [r5, #0]
 8001572:	6a21      	ldr	r1, [r4, #32]
 8001574:	602b      	str	r3, [r5, #0]
 8001576:	d030      	beq.n	80015da <__sflush_r+0x92>
 8001578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800157a:	89a3      	ldrh	r3, [r4, #12]
 800157c:	0759      	lsls	r1, r3, #29
 800157e:	d505      	bpl.n	800158c <__sflush_r+0x44>
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	1ad2      	subs	r2, r2, r3
 8001584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001586:	b10b      	cbz	r3, 800158c <__sflush_r+0x44>
 8001588:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800158a:	1ad2      	subs	r2, r2, r3
 800158c:	2300      	movs	r3, #0
 800158e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001590:	6a21      	ldr	r1, [r4, #32]
 8001592:	4628      	mov	r0, r5
 8001594:	47b0      	blx	r6
 8001596:	1c43      	adds	r3, r0, #1
 8001598:	89a3      	ldrh	r3, [r4, #12]
 800159a:	d106      	bne.n	80015aa <__sflush_r+0x62>
 800159c:	6829      	ldr	r1, [r5, #0]
 800159e:	291d      	cmp	r1, #29
 80015a0:	d82b      	bhi.n	80015fa <__sflush_r+0xb2>
 80015a2:	4a2a      	ldr	r2, [pc, #168]	@ (800164c <__sflush_r+0x104>)
 80015a4:	410a      	asrs	r2, r1
 80015a6:	07d6      	lsls	r6, r2, #31
 80015a8:	d427      	bmi.n	80015fa <__sflush_r+0xb2>
 80015aa:	2200      	movs	r2, #0
 80015ac:	6062      	str	r2, [r4, #4]
 80015ae:	04d9      	lsls	r1, r3, #19
 80015b0:	6922      	ldr	r2, [r4, #16]
 80015b2:	6022      	str	r2, [r4, #0]
 80015b4:	d504      	bpl.n	80015c0 <__sflush_r+0x78>
 80015b6:	1c42      	adds	r2, r0, #1
 80015b8:	d101      	bne.n	80015be <__sflush_r+0x76>
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	b903      	cbnz	r3, 80015c0 <__sflush_r+0x78>
 80015be:	6560      	str	r0, [r4, #84]	@ 0x54
 80015c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80015c2:	602f      	str	r7, [r5, #0]
 80015c4:	b1b9      	cbz	r1, 80015f6 <__sflush_r+0xae>
 80015c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015ca:	4299      	cmp	r1, r3
 80015cc:	d002      	beq.n	80015d4 <__sflush_r+0x8c>
 80015ce:	4628      	mov	r0, r5
 80015d0:	f7ff fa9a 	bl	8000b08 <_free_r>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80015d8:	e00d      	b.n	80015f6 <__sflush_r+0xae>
 80015da:	2301      	movs	r3, #1
 80015dc:	4628      	mov	r0, r5
 80015de:	47b0      	blx	r6
 80015e0:	4602      	mov	r2, r0
 80015e2:	1c50      	adds	r0, r2, #1
 80015e4:	d1c9      	bne.n	800157a <__sflush_r+0x32>
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0c6      	beq.n	800157a <__sflush_r+0x32>
 80015ec:	2b1d      	cmp	r3, #29
 80015ee:	d001      	beq.n	80015f4 <__sflush_r+0xac>
 80015f0:	2b16      	cmp	r3, #22
 80015f2:	d11e      	bne.n	8001632 <__sflush_r+0xea>
 80015f4:	602f      	str	r7, [r5, #0]
 80015f6:	2000      	movs	r0, #0
 80015f8:	e022      	b.n	8001640 <__sflush_r+0xf8>
 80015fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015fe:	b21b      	sxth	r3, r3
 8001600:	e01b      	b.n	800163a <__sflush_r+0xf2>
 8001602:	690f      	ldr	r7, [r1, #16]
 8001604:	2f00      	cmp	r7, #0
 8001606:	d0f6      	beq.n	80015f6 <__sflush_r+0xae>
 8001608:	0793      	lsls	r3, r2, #30
 800160a:	680e      	ldr	r6, [r1, #0]
 800160c:	bf08      	it	eq
 800160e:	694b      	ldreq	r3, [r1, #20]
 8001610:	600f      	str	r7, [r1, #0]
 8001612:	bf18      	it	ne
 8001614:	2300      	movne	r3, #0
 8001616:	eba6 0807 	sub.w	r8, r6, r7
 800161a:	608b      	str	r3, [r1, #8]
 800161c:	f1b8 0f00 	cmp.w	r8, #0
 8001620:	dde9      	ble.n	80015f6 <__sflush_r+0xae>
 8001622:	6a21      	ldr	r1, [r4, #32]
 8001624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001626:	4643      	mov	r3, r8
 8001628:	463a      	mov	r2, r7
 800162a:	4628      	mov	r0, r5
 800162c:	47b0      	blx	r6
 800162e:	2800      	cmp	r0, #0
 8001630:	dc08      	bgt.n	8001644 <__sflush_r+0xfc>
 8001632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800163a:	81a3      	strh	r3, [r4, #12]
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
 8001640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001644:	4407      	add	r7, r0
 8001646:	eba8 0800 	sub.w	r8, r8, r0
 800164a:	e7e7      	b.n	800161c <__sflush_r+0xd4>
 800164c:	dfbffffe 	.word	0xdfbffffe

08001650 <_fflush_r>:
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	690b      	ldr	r3, [r1, #16]
 8001654:	4605      	mov	r5, r0
 8001656:	460c      	mov	r4, r1
 8001658:	b913      	cbnz	r3, 8001660 <_fflush_r+0x10>
 800165a:	2500      	movs	r5, #0
 800165c:	4628      	mov	r0, r5
 800165e:	bd38      	pop	{r3, r4, r5, pc}
 8001660:	b118      	cbz	r0, 800166a <_fflush_r+0x1a>
 8001662:	6a03      	ldr	r3, [r0, #32]
 8001664:	b90b      	cbnz	r3, 800166a <_fflush_r+0x1a>
 8001666:	f7ff f927 	bl	80008b8 <__sinit>
 800166a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f3      	beq.n	800165a <_fflush_r+0xa>
 8001672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001674:	07d0      	lsls	r0, r2, #31
 8001676:	d404      	bmi.n	8001682 <_fflush_r+0x32>
 8001678:	0599      	lsls	r1, r3, #22
 800167a:	d402      	bmi.n	8001682 <_fflush_r+0x32>
 800167c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800167e:	f7ff fa40 	bl	8000b02 <__retarget_lock_acquire_recursive>
 8001682:	4628      	mov	r0, r5
 8001684:	4621      	mov	r1, r4
 8001686:	f7ff ff5f 	bl	8001548 <__sflush_r>
 800168a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800168c:	07da      	lsls	r2, r3, #31
 800168e:	4605      	mov	r5, r0
 8001690:	d4e4      	bmi.n	800165c <_fflush_r+0xc>
 8001692:	89a3      	ldrh	r3, [r4, #12]
 8001694:	059b      	lsls	r3, r3, #22
 8001696:	d4e1      	bmi.n	800165c <_fflush_r+0xc>
 8001698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800169a:	f7ff fa33 	bl	8000b04 <__retarget_lock_release_recursive>
 800169e:	e7dd      	b.n	800165c <_fflush_r+0xc>

080016a0 <__swbuf_r>:
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a2:	460e      	mov	r6, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	4605      	mov	r5, r0
 80016a8:	b118      	cbz	r0, 80016b2 <__swbuf_r+0x12>
 80016aa:	6a03      	ldr	r3, [r0, #32]
 80016ac:	b90b      	cbnz	r3, 80016b2 <__swbuf_r+0x12>
 80016ae:	f7ff f903 	bl	80008b8 <__sinit>
 80016b2:	69a3      	ldr	r3, [r4, #24]
 80016b4:	60a3      	str	r3, [r4, #8]
 80016b6:	89a3      	ldrh	r3, [r4, #12]
 80016b8:	071a      	lsls	r2, r3, #28
 80016ba:	d501      	bpl.n	80016c0 <__swbuf_r+0x20>
 80016bc:	6923      	ldr	r3, [r4, #16]
 80016be:	b943      	cbnz	r3, 80016d2 <__swbuf_r+0x32>
 80016c0:	4621      	mov	r1, r4
 80016c2:	4628      	mov	r0, r5
 80016c4:	f000 f82a 	bl	800171c <__swsetup_r>
 80016c8:	b118      	cbz	r0, 80016d2 <__swbuf_r+0x32>
 80016ca:	f04f 37ff 	mov.w	r7, #4294967295
 80016ce:	4638      	mov	r0, r7
 80016d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	6922      	ldr	r2, [r4, #16]
 80016d6:	1a98      	subs	r0, r3, r2
 80016d8:	6963      	ldr	r3, [r4, #20]
 80016da:	b2f6      	uxtb	r6, r6
 80016dc:	4283      	cmp	r3, r0
 80016de:	4637      	mov	r7, r6
 80016e0:	dc05      	bgt.n	80016ee <__swbuf_r+0x4e>
 80016e2:	4621      	mov	r1, r4
 80016e4:	4628      	mov	r0, r5
 80016e6:	f7ff ffb3 	bl	8001650 <_fflush_r>
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d1ed      	bne.n	80016ca <__swbuf_r+0x2a>
 80016ee:	68a3      	ldr	r3, [r4, #8]
 80016f0:	3b01      	subs	r3, #1
 80016f2:	60a3      	str	r3, [r4, #8]
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	6022      	str	r2, [r4, #0]
 80016fa:	701e      	strb	r6, [r3, #0]
 80016fc:	6962      	ldr	r2, [r4, #20]
 80016fe:	1c43      	adds	r3, r0, #1
 8001700:	429a      	cmp	r2, r3
 8001702:	d004      	beq.n	800170e <__swbuf_r+0x6e>
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	07db      	lsls	r3, r3, #31
 8001708:	d5e1      	bpl.n	80016ce <__swbuf_r+0x2e>
 800170a:	2e0a      	cmp	r6, #10
 800170c:	d1df      	bne.n	80016ce <__swbuf_r+0x2e>
 800170e:	4621      	mov	r1, r4
 8001710:	4628      	mov	r0, r5
 8001712:	f7ff ff9d 	bl	8001650 <_fflush_r>
 8001716:	2800      	cmp	r0, #0
 8001718:	d0d9      	beq.n	80016ce <__swbuf_r+0x2e>
 800171a:	e7d6      	b.n	80016ca <__swbuf_r+0x2a>

0800171c <__swsetup_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <__swsetup_r+0xa8>)
 8001720:	4605      	mov	r5, r0
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	460c      	mov	r4, r1
 8001726:	b118      	cbz	r0, 8001730 <__swsetup_r+0x14>
 8001728:	6a03      	ldr	r3, [r0, #32]
 800172a:	b90b      	cbnz	r3, 8001730 <__swsetup_r+0x14>
 800172c:	f7ff f8c4 	bl	80008b8 <__sinit>
 8001730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001734:	0719      	lsls	r1, r3, #28
 8001736:	d422      	bmi.n	800177e <__swsetup_r+0x62>
 8001738:	06da      	lsls	r2, r3, #27
 800173a:	d407      	bmi.n	800174c <__swsetup_r+0x30>
 800173c:	2209      	movs	r2, #9
 800173e:	602a      	str	r2, [r5, #0]
 8001740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001744:	81a3      	strh	r3, [r4, #12]
 8001746:	f04f 30ff 	mov.w	r0, #4294967295
 800174a:	e033      	b.n	80017b4 <__swsetup_r+0x98>
 800174c:	0758      	lsls	r0, r3, #29
 800174e:	d512      	bpl.n	8001776 <__swsetup_r+0x5a>
 8001750:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001752:	b141      	cbz	r1, 8001766 <__swsetup_r+0x4a>
 8001754:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001758:	4299      	cmp	r1, r3
 800175a:	d002      	beq.n	8001762 <__swsetup_r+0x46>
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff f9d3 	bl	8000b08 <_free_r>
 8001762:	2300      	movs	r3, #0
 8001764:	6363      	str	r3, [r4, #52]	@ 0x34
 8001766:	89a3      	ldrh	r3, [r4, #12]
 8001768:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800176c:	81a3      	strh	r3, [r4, #12]
 800176e:	2300      	movs	r3, #0
 8001770:	6063      	str	r3, [r4, #4]
 8001772:	6923      	ldr	r3, [r4, #16]
 8001774:	6023      	str	r3, [r4, #0]
 8001776:	89a3      	ldrh	r3, [r4, #12]
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	81a3      	strh	r3, [r4, #12]
 800177e:	6923      	ldr	r3, [r4, #16]
 8001780:	b94b      	cbnz	r3, 8001796 <__swsetup_r+0x7a>
 8001782:	89a3      	ldrh	r3, [r4, #12]
 8001784:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001788:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178c:	d003      	beq.n	8001796 <__swsetup_r+0x7a>
 800178e:	4621      	mov	r1, r4
 8001790:	4628      	mov	r0, r5
 8001792:	f000 f8a5 	bl	80018e0 <__smakebuf_r>
 8001796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800179a:	f013 0201 	ands.w	r2, r3, #1
 800179e:	d00a      	beq.n	80017b6 <__swsetup_r+0x9a>
 80017a0:	2200      	movs	r2, #0
 80017a2:	60a2      	str	r2, [r4, #8]
 80017a4:	6962      	ldr	r2, [r4, #20]
 80017a6:	4252      	negs	r2, r2
 80017a8:	61a2      	str	r2, [r4, #24]
 80017aa:	6922      	ldr	r2, [r4, #16]
 80017ac:	b942      	cbnz	r2, 80017c0 <__swsetup_r+0xa4>
 80017ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80017b2:	d1c5      	bne.n	8001740 <__swsetup_r+0x24>
 80017b4:	bd38      	pop	{r3, r4, r5, pc}
 80017b6:	0799      	lsls	r1, r3, #30
 80017b8:	bf58      	it	pl
 80017ba:	6962      	ldrpl	r2, [r4, #20]
 80017bc:	60a2      	str	r2, [r4, #8]
 80017be:	e7f4      	b.n	80017aa <__swsetup_r+0x8e>
 80017c0:	2000      	movs	r0, #0
 80017c2:	e7f7      	b.n	80017b4 <__swsetup_r+0x98>
 80017c4:	20000010 	.word	0x20000010

080017c8 <memmove>:
 80017c8:	4288      	cmp	r0, r1
 80017ca:	b510      	push	{r4, lr}
 80017cc:	eb01 0402 	add.w	r4, r1, r2
 80017d0:	d902      	bls.n	80017d8 <memmove+0x10>
 80017d2:	4284      	cmp	r4, r0
 80017d4:	4623      	mov	r3, r4
 80017d6:	d807      	bhi.n	80017e8 <memmove+0x20>
 80017d8:	1e43      	subs	r3, r0, #1
 80017da:	42a1      	cmp	r1, r4
 80017dc:	d008      	beq.n	80017f0 <memmove+0x28>
 80017de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017e6:	e7f8      	b.n	80017da <memmove+0x12>
 80017e8:	4402      	add	r2, r0
 80017ea:	4601      	mov	r1, r0
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d100      	bne.n	80017f2 <memmove+0x2a>
 80017f0:	bd10      	pop	{r4, pc}
 80017f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80017fa:	e7f7      	b.n	80017ec <memmove+0x24>

080017fc <_sbrk_r>:
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	4d06      	ldr	r5, [pc, #24]	@ (8001818 <_sbrk_r+0x1c>)
 8001800:	2300      	movs	r3, #0
 8001802:	4604      	mov	r4, r0
 8001804:	4608      	mov	r0, r1
 8001806:	602b      	str	r3, [r5, #0]
 8001808:	f7fe ff44 	bl	8000694 <_sbrk>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	d102      	bne.n	8001816 <_sbrk_r+0x1a>
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	b103      	cbz	r3, 8001816 <_sbrk_r+0x1a>
 8001814:	6023      	str	r3, [r4, #0]
 8001816:	bd38      	pop	{r3, r4, r5, pc}
 8001818:	200001c8 	.word	0x200001c8

0800181c <memcpy>:
 800181c:	440a      	add	r2, r1
 800181e:	4291      	cmp	r1, r2
 8001820:	f100 33ff 	add.w	r3, r0, #4294967295
 8001824:	d100      	bne.n	8001828 <memcpy+0xc>
 8001826:	4770      	bx	lr
 8001828:	b510      	push	{r4, lr}
 800182a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800182e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001832:	4291      	cmp	r1, r2
 8001834:	d1f9      	bne.n	800182a <memcpy+0xe>
 8001836:	bd10      	pop	{r4, pc}

08001838 <_realloc_r>:
 8001838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800183c:	4680      	mov	r8, r0
 800183e:	4615      	mov	r5, r2
 8001840:	460c      	mov	r4, r1
 8001842:	b921      	cbnz	r1, 800184e <_realloc_r+0x16>
 8001844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001848:	4611      	mov	r1, r2
 800184a:	f7ff b9c9 	b.w	8000be0 <_malloc_r>
 800184e:	b92a      	cbnz	r2, 800185c <_realloc_r+0x24>
 8001850:	f7ff f95a 	bl	8000b08 <_free_r>
 8001854:	2400      	movs	r4, #0
 8001856:	4620      	mov	r0, r4
 8001858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800185c:	f000 f89e 	bl	800199c <_malloc_usable_size_r>
 8001860:	4285      	cmp	r5, r0
 8001862:	4606      	mov	r6, r0
 8001864:	d802      	bhi.n	800186c <_realloc_r+0x34>
 8001866:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800186a:	d8f4      	bhi.n	8001856 <_realloc_r+0x1e>
 800186c:	4629      	mov	r1, r5
 800186e:	4640      	mov	r0, r8
 8001870:	f7ff f9b6 	bl	8000be0 <_malloc_r>
 8001874:	4607      	mov	r7, r0
 8001876:	2800      	cmp	r0, #0
 8001878:	d0ec      	beq.n	8001854 <_realloc_r+0x1c>
 800187a:	42b5      	cmp	r5, r6
 800187c:	462a      	mov	r2, r5
 800187e:	4621      	mov	r1, r4
 8001880:	bf28      	it	cs
 8001882:	4632      	movcs	r2, r6
 8001884:	f7ff ffca 	bl	800181c <memcpy>
 8001888:	4621      	mov	r1, r4
 800188a:	4640      	mov	r0, r8
 800188c:	f7ff f93c 	bl	8000b08 <_free_r>
 8001890:	463c      	mov	r4, r7
 8001892:	e7e0      	b.n	8001856 <_realloc_r+0x1e>

08001894 <__swhatbuf_r>:
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	460c      	mov	r4, r1
 8001898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800189c:	2900      	cmp	r1, #0
 800189e:	b096      	sub	sp, #88	@ 0x58
 80018a0:	4615      	mov	r5, r2
 80018a2:	461e      	mov	r6, r3
 80018a4:	da0d      	bge.n	80018c2 <__swhatbuf_r+0x2e>
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80018ac:	f04f 0100 	mov.w	r1, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2340      	movne	r3, #64	@ 0x40
 80018b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80018b8:	2000      	movs	r0, #0
 80018ba:	6031      	str	r1, [r6, #0]
 80018bc:	602b      	str	r3, [r5, #0]
 80018be:	b016      	add	sp, #88	@ 0x58
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
 80018c2:	466a      	mov	r2, sp
 80018c4:	f000 f848 	bl	8001958 <_fstat_r>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	dbec      	blt.n	80018a6 <__swhatbuf_r+0x12>
 80018cc:	9901      	ldr	r1, [sp, #4]
 80018ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80018d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80018d6:	4259      	negs	r1, r3
 80018d8:	4159      	adcs	r1, r3
 80018da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018de:	e7eb      	b.n	80018b8 <__swhatbuf_r+0x24>

080018e0 <__smakebuf_r>:
 80018e0:	898b      	ldrh	r3, [r1, #12]
 80018e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018e4:	079d      	lsls	r5, r3, #30
 80018e6:	4606      	mov	r6, r0
 80018e8:	460c      	mov	r4, r1
 80018ea:	d507      	bpl.n	80018fc <__smakebuf_r+0x1c>
 80018ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80018f0:	6023      	str	r3, [r4, #0]
 80018f2:	6123      	str	r3, [r4, #16]
 80018f4:	2301      	movs	r3, #1
 80018f6:	6163      	str	r3, [r4, #20]
 80018f8:	b003      	add	sp, #12
 80018fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fc:	ab01      	add	r3, sp, #4
 80018fe:	466a      	mov	r2, sp
 8001900:	f7ff ffc8 	bl	8001894 <__swhatbuf_r>
 8001904:	9f00      	ldr	r7, [sp, #0]
 8001906:	4605      	mov	r5, r0
 8001908:	4639      	mov	r1, r7
 800190a:	4630      	mov	r0, r6
 800190c:	f7ff f968 	bl	8000be0 <_malloc_r>
 8001910:	b948      	cbnz	r0, 8001926 <__smakebuf_r+0x46>
 8001912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001916:	059a      	lsls	r2, r3, #22
 8001918:	d4ee      	bmi.n	80018f8 <__smakebuf_r+0x18>
 800191a:	f023 0303 	bic.w	r3, r3, #3
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	81a3      	strh	r3, [r4, #12]
 8001924:	e7e2      	b.n	80018ec <__smakebuf_r+0xc>
 8001926:	89a3      	ldrh	r3, [r4, #12]
 8001928:	6020      	str	r0, [r4, #0]
 800192a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800192e:	81a3      	strh	r3, [r4, #12]
 8001930:	9b01      	ldr	r3, [sp, #4]
 8001932:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001936:	b15b      	cbz	r3, 8001950 <__smakebuf_r+0x70>
 8001938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800193c:	4630      	mov	r0, r6
 800193e:	f000 f81d 	bl	800197c <_isatty_r>
 8001942:	b128      	cbz	r0, 8001950 <__smakebuf_r+0x70>
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	f023 0303 	bic.w	r3, r3, #3
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	81a3      	strh	r3, [r4, #12]
 8001950:	89a3      	ldrh	r3, [r4, #12]
 8001952:	431d      	orrs	r5, r3
 8001954:	81a5      	strh	r5, [r4, #12]
 8001956:	e7cf      	b.n	80018f8 <__smakebuf_r+0x18>

08001958 <_fstat_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4d07      	ldr	r5, [pc, #28]	@ (8001978 <_fstat_r+0x20>)
 800195c:	2300      	movs	r3, #0
 800195e:	4604      	mov	r4, r0
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	602b      	str	r3, [r5, #0]
 8001966:	f7fe fe6c 	bl	8000642 <_fstat>
 800196a:	1c43      	adds	r3, r0, #1
 800196c:	d102      	bne.n	8001974 <_fstat_r+0x1c>
 800196e:	682b      	ldr	r3, [r5, #0]
 8001970:	b103      	cbz	r3, 8001974 <_fstat_r+0x1c>
 8001972:	6023      	str	r3, [r4, #0]
 8001974:	bd38      	pop	{r3, r4, r5, pc}
 8001976:	bf00      	nop
 8001978:	200001c8 	.word	0x200001c8

0800197c <_isatty_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	4d06      	ldr	r5, [pc, #24]	@ (8001998 <_isatty_r+0x1c>)
 8001980:	2300      	movs	r3, #0
 8001982:	4604      	mov	r4, r0
 8001984:	4608      	mov	r0, r1
 8001986:	602b      	str	r3, [r5, #0]
 8001988:	f7fe fe6b 	bl	8000662 <_isatty>
 800198c:	1c43      	adds	r3, r0, #1
 800198e:	d102      	bne.n	8001996 <_isatty_r+0x1a>
 8001990:	682b      	ldr	r3, [r5, #0]
 8001992:	b103      	cbz	r3, 8001996 <_isatty_r+0x1a>
 8001994:	6023      	str	r3, [r4, #0]
 8001996:	bd38      	pop	{r3, r4, r5, pc}
 8001998:	200001c8 	.word	0x200001c8

0800199c <_malloc_usable_size_r>:
 800199c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019a0:	1f18      	subs	r0, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bfbc      	itt	lt
 80019a6:	580b      	ldrlt	r3, [r1, r0]
 80019a8:	18c0      	addlt	r0, r0, r3
 80019aa:	4770      	bx	lr

080019ac <_init>:
 80019ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ae:	bf00      	nop
 80019b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019b2:	bc08      	pop	{r3}
 80019b4:	469e      	mov	lr, r3
 80019b6:	4770      	bx	lr

080019b8 <_fini>:
 80019b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ba:	bf00      	nop
 80019bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019be:	bc08      	pop	{r3}
 80019c0:	469e      	mov	lr, r3
 80019c2:	4770      	bx	lr
