
05.1_USART_Tx_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000524  08000524  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000524  08000524  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000524  08000524  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000524  08000524  00001524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000528  08000528  00001528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800052c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000530  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000530  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001852  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005a9  00000000  00000000  00003886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000157  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  0000416f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000224c  00000000  00000000  0002382f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3289  00000000  00000000  00025a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8d04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e0  00000000  00000000  000e8d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000e9328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004f8 	.word	0x080004f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004f8 	.word	0x080004f8

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <delay>:
void USART2_Init(void);
void USART2_Transmit(char data);
void USART2_IRQHandler(void);

void delay(int d)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  int temp;
  temp = d;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	60fb      	str	r3, [r7, #12]
  while(d>0)
 800024c:	e00f      	b.n	800026e <delay+0x2e>
    {
      for(int i=0; i<d; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	e005      	b.n	8000260 <delay+0x20>
	{
	  temp++;
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3301      	adds	r3, #1
 8000258:	60fb      	str	r3, [r7, #12]
      for(int i=0; i<d; i++)
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	3301      	adds	r3, #1
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68ba      	ldr	r2, [r7, #8]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	429a      	cmp	r2, r3
 8000266:	dbf5      	blt.n	8000254 <delay+0x14>
	}
      d--;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3b01      	subs	r3, #1
 800026c:	607b      	str	r3, [r7, #4]
  while(d>0)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2b00      	cmp	r3, #0
 8000272:	dcec      	bgt.n	800024e <delay+0xe>
    }
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
	...

08000284 <main>:
int main(void) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
    // Initialize USART2
    USART2_Init();
 800028a:	f000 f81f 	bl	80002cc <USART2_Init>

    // Example string to send
    char *msg = "Hello, USART2!\r\n";
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <main+0x40>)
 8000290:	607b      	str	r3, [r7, #4]
    while (*msg) {
 8000292:	e006      	b.n	80002a2 <main+0x1e>
        USART2_Transmit(*msg++);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	607a      	str	r2, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f859 	bl	8000354 <USART2_Transmit>
    while (*msg) {
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1f4      	bne.n	8000294 <main+0x10>
    }

    while (1) {
        // Main loop can do other things while transmission is handled by interrupt
	GPIOA->ODR ^= (1<<5);
 80002aa:	4b07      	ldr	r3, [pc, #28]	@ (80002c8 <main+0x44>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a06      	ldr	r2, [pc, #24]	@ (80002c8 <main+0x44>)
 80002b0:	f083 0320 	eor.w	r3, r3, #32
 80002b4:	6153      	str	r3, [r2, #20]
	delay(500);
 80002b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002ba:	f7ff ffc1 	bl	8000240 <delay>
	GPIOA->ODR ^= (1<<5);
 80002be:	bf00      	nop
 80002c0:	e7f3      	b.n	80002aa <main+0x26>
 80002c2:	bf00      	nop
 80002c4:	08000510 	.word	0x08000510
 80002c8:	40020000 	.word	0x40020000

080002cc <USART2_Init>:


    }
}

void USART2_Init(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000348 <USART2_Init+0x7c>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000348 <USART2_Init+0x7c>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER &= ~(1<<(2*5));
 80002dc:	4b1b      	ldr	r3, [pc, #108]	@ (800034c <USART2_Init+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1a      	ldr	r2, [pc, #104]	@ (800034c <USART2_Init+0x80>)
 80002e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80002e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<(2*5));
 80002e8:	4b18      	ldr	r3, [pc, #96]	@ (800034c <USART2_Init+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a17      	ldr	r2, [pc, #92]	@ (800034c <USART2_Init+0x80>)
 80002ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002f2:	6013      	str	r3, [r2, #0]
    // Enable USART2 clock
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80002f4:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <USART2_Init+0x7c>)
 80002f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002f8:	4a13      	ldr	r2, [pc, #76]	@ (8000348 <USART2_Init+0x7c>)
 80002fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002fe:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure PA2 (USART2_TX) as alternate function
    GPIOA->MODER &= ~(GPIO_MODER_MODER2);
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <USART2_Init+0x80>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a11      	ldr	r2, [pc, #68]	@ (800034c <USART2_Init+0x80>)
 8000306:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800030a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER2_1;  // Alternate function mode
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <USART2_Init+0x80>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a0e      	ldr	r2, [pc, #56]	@ (800034c <USART2_Init+0x80>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << 8);            // AF7 (USART2_TX) for PA2
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <USART2_Init+0x80>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a0b      	ldr	r2, [pc, #44]	@ (800034c <USART2_Init+0x80>)
 800031e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000322:	6213      	str	r3, [r2, #32]

    // Configure USART2
    USART2->BRR = 0x0683;  // Baud rate 9600 at 16 MHz
 8000324:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <USART2_Init+0x84>)
 8000326:	f240 6283 	movw	r2, #1667	@ 0x683
 800032a:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_TXEIE | USART_CR1_UE;  // Transmit enable, TXE interrupt enable, USART enable
 800032c:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <USART2_Init+0x84>)
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <USART2_Init+0x84>)
 8000332:	f443 5302 	orr.w	r3, r3, #8320	@ 0x2080
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	60d3      	str	r3, [r2, #12]

    // Enable USART2 interrupt in NVIC
    NVIC_EnableIRQ(USART2_IRQn);
 800033c:	2026      	movs	r0, #38	@ 0x26
 800033e:	f7ff ff61 	bl	8000204 <__NVIC_EnableIRQ>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40023800 	.word	0x40023800
 800034c:	40020000 	.word	0x40020000
 8000350:	40004400 	.word	0x40004400

08000354 <USART2_Transmit>:

void USART2_Transmit(char data) {
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));  // Wait until TXE (transmit data register empty) flag is set
 800035e:	bf00      	nop
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <USART2_Transmit+0x2c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f9      	beq.n	8000360 <USART2_Transmit+0xc>
    USART2->DR = data;
 800036c:	4a04      	ldr	r2, [pc, #16]	@ (8000380 <USART2_Transmit+0x2c>)
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	6053      	str	r3, [r2, #4]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40004400 	.word	0x40004400

08000384 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_TXE)
 8000388:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <USART2_IRQHandler+0x28>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000390:	2b00      	cmp	r3, #0
 8000392:	d005      	beq.n	80003a0 <USART2_IRQHandler+0x1c>
      {
        USART2->CR1 &= ~USART_CR1_TXEIE;  // Disable TXE interrupt
 8000394:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <USART2_IRQHandler+0x28>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a04      	ldr	r2, [pc, #16]	@ (80003ac <USART2_IRQHandler+0x28>)
 800039a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800039e:	60d3      	str	r3, [r2, #12]
    }
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40004400 	.word	0x40004400

080003b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <NMI_Handler+0x4>

080003b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <HardFault_Handler+0x4>

080003c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <MemManage_Handler+0x4>

080003c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <BusFault_Handler+0x4>

080003d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <UsageFault_Handler+0x4>

080003d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000406:	f000 f83f 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <SystemInit+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <SystemInit+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800046c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000438:	f7ff ffea 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000462:	f000 f825 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000466:	f7ff ff0d 	bl	8000284 <main>
  bx  lr    
 800046a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000478:	0800052c 	.word	0x0800052c
  ldr r2, =_sbss
 800047c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000480:	20000024 	.word	0x20000024

08000484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_IncTick+0x20>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <HAL_IncTick+0x24>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <HAL_IncTick+0x24>)
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000020 	.word	0x20000020

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	4d0d      	ldr	r5, [pc, #52]	@ (80004e8 <__libc_init_array+0x38>)
 80004b4:	4c0d      	ldr	r4, [pc, #52]	@ (80004ec <__libc_init_array+0x3c>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	2600      	movs	r6, #0
 80004bc:	42a6      	cmp	r6, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	4d0b      	ldr	r5, [pc, #44]	@ (80004f0 <__libc_init_array+0x40>)
 80004c2:	4c0c      	ldr	r4, [pc, #48]	@ (80004f4 <__libc_init_array+0x44>)
 80004c4:	f000 f818 	bl	80004f8 <_init>
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	10a4      	asrs	r4, r4, #2
 80004cc:	2600      	movs	r6, #0
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d8:	4798      	blx	r3
 80004da:	3601      	adds	r6, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e2:	4798      	blx	r3
 80004e4:	3601      	adds	r6, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000524 	.word	0x08000524
 80004ec:	08000524 	.word	0x08000524
 80004f0:	08000524 	.word	0x08000524
 80004f4:	08000528 	.word	0x08000528

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
