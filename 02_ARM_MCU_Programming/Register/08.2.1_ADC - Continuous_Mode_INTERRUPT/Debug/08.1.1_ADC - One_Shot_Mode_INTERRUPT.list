
08.1.1_ADC - One_Shot_Mode_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  0800047c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  0800047c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0000147c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000480  08000480  00001480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000484  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000488  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000488  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001858  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000575  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014b  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f41  00000000  00000000  0000412b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f8f  00000000  00000000  0001d06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c32b3  00000000  00000000  0001effb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e22ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000058c  00000000  00000000  000e22f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000e2880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000464 	.word	0x08000464

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000464 	.word	0x08000464

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <adc1_in1_config>:

uint32_t adc_read;


void adc1_in1_config()
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  // Enable clock to Port, selected for ADC
  RCC->AHB1ENR |= (1<<0); // enable clock to Port A
 8000244:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <adc1_in1_config+0x8c>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a20      	ldr	r2, [pc, #128]	@ (80002cc <adc1_in1_config+0x8c>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30

  // Set ADC pin to Analog Mode (in this case PA1) ; PA0 is "Wakeup Pin" by default. Hence changing pin to PA1
  GPIOA->MODER &= ~(0x3 << (2*1));
 8000250:	4b1f      	ldr	r3, [pc, #124]	@ (80002d0 <adc1_in1_config+0x90>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1e      	ldr	r2, [pc, #120]	@ (80002d0 <adc1_in1_config+0x90>)
 8000256:	f023 030c 	bic.w	r3, r3, #12
 800025a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0x3 << (2*1)); // set pin to Analog Mode
 800025c:	4b1c      	ldr	r3, [pc, #112]	@ (80002d0 <adc1_in1_config+0x90>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1b      	ldr	r2, [pc, #108]	@ (80002d0 <adc1_in1_config+0x90>)
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	6013      	str	r3, [r2, #0]


  // Enable clock to ADC1
  RCC->APB2ENR |= (1<<8);
 8000268:	4b18      	ldr	r3, [pc, #96]	@ (80002cc <adc1_in1_config+0x8c>)
 800026a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800026c:	4a17      	ldr	r2, [pc, #92]	@ (80002cc <adc1_in1_config+0x8c>)
 800026e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000272:	6453      	str	r3, [r2, #68]	@ 0x44

  // Turn off ADC1 - via control register 2
  ADC1->CR2 &= ~(1<<0);
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <adc1_in1_config+0x94>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a16      	ldr	r2, [pc, #88]	@ (80002d4 <adc1_in1_config+0x94>)
 800027a:	f023 0301 	bic.w	r3, r3, #1
 800027e:	6093      	str	r3, [r2, #8]

  //   adjust result using (ALIGN) bit, conversion mode - using ADC_CR2 register.

//    ADC1->CR2 |= (0<<11); // right justified
  ADC1->CR2 |= (1<<1); // continuous mode
 8000280:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <adc1_in1_config+0x94>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a13      	ldr	r2, [pc, #76]	@ (80002d4 <adc1_in1_config+0x94>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6093      	str	r3, [r2, #8]

  // ----------------------------------------
  // set conversion sequence
  ADC1->SQR3 |= (1<<0);
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <adc1_in1_config+0x94>)
 800028e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000290:	4a10      	ldr	r2, [pc, #64]	@ (80002d4 <adc1_in1_config+0x94>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	6353      	str	r3, [r2, #52]	@ 0x34

  // set number of conversions or Conversion Sequence Length
  ADC1->SQR1 = (0x0000); // setting conversion sequence length to be 1
 8000298:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <adc1_in1_config+0x94>)
 800029a:	2200      	movs	r2, #0
 800029c:	62da      	str	r2, [r3, #44]	@ 0x2c
  // ----------------------------------------

  // Enable End of Conversion Interrupt
  ADC1->CR1 |= (1<<5);
 800029e:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <adc1_in1_config+0x94>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4a0c      	ldr	r2, [pc, #48]	@ (80002d4 <adc1_in1_config+0x94>)
 80002a4:	f043 0320 	orr.w	r3, r3, #32
 80002a8:	6053      	str	r3, [r2, #4]
  // Turn on ADC1 - via control register 2
  ADC1->CR2 |= (1<<0);
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <adc1_in1_config+0x94>)
 80002ac:	689b      	ldr	r3, [r3, #8]
 80002ae:	4a09      	ldr	r2, [pc, #36]	@ (80002d4 <adc1_in1_config+0x94>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6093      	str	r3, [r2, #8]

  NVIC_EnableIRQ(ADC_IRQn);
 80002b6:	2012      	movs	r0, #18
 80002b8:	f7ff ffa4 	bl	8000204 <__NVIC_EnableIRQ>
  ADC1->CR2 |= (1<<30); // Start ADC conversion using SWSTART bit
 80002bc:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <adc1_in1_config+0x94>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a04      	ldr	r2, [pc, #16]	@ (80002d4 <adc1_in1_config+0x94>)
 80002c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002c6:	6093      	str	r3, [r2, #8]
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000
 80002d4:	40012000 	.word	0x40012000

080002d8 <main>:

int main()
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  adc1_in1_config();
 80002dc:	f7ff ffb0 	bl	8000240 <adc1_in1_config>
  while(1)
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <main+0x8>

080002e4 <ADC_IRQHandler>:
//}

//		OR

void ADC_IRQHandler()
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  if (ADC1->SR & (1<<1)) // Check if end of conversion flag is set
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <ADC_IRQHandler+0x30>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f003 0302 	and.w	r3, r3, #2
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d009      	beq.n	8000308 <ADC_IRQHandler+0x24>
  {
     adc_read = ADC1->DR; // Read the ADC value
 80002f4:	4b07      	ldr	r3, [pc, #28]	@ (8000314 <ADC_IRQHandler+0x30>)
 80002f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <ADC_IRQHandler+0x34>)
 80002fa:	6013      	str	r3, [r2, #0]
     ADC1->SR &= ~(1<<1); // Clear the end of conversion flag
 80002fc:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <ADC_IRQHandler+0x30>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a04      	ldr	r2, [pc, #16]	@ (8000314 <ADC_IRQHandler+0x30>)
 8000302:	f023 0302 	bic.w	r3, r3, #2
 8000306:	6013      	str	r3, [r2, #0]
  }
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40012000 	.word	0x40012000
 8000318:	20000020 	.word	0x20000020

0800031c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000320:	bf00      	nop
 8000322:	e7fd      	b.n	8000320 <NMI_Handler+0x4>

08000324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <HardFault_Handler+0x4>

0800032c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000330:	bf00      	nop
 8000332:	e7fd      	b.n	8000330 <MemManage_Handler+0x4>

08000334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <BusFault_Handler+0x4>

0800033c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000340:	bf00      	nop
 8000342:	e7fd      	b.n	8000340 <UsageFault_Handler+0x4>

08000344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000372:	f000 f83f 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <SystemInit+0x20>)
 8000382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000386:	4a05      	ldr	r2, [pc, #20]	@ (800039c <SystemInit+0x20>)
 8000388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800038c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003a4:	f7ff ffea 	bl	800037c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a8:	480c      	ldr	r0, [pc, #48]	@ (80003dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003aa:	490d      	ldr	r1, [pc, #52]	@ (80003e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003ac:	4a0d      	ldr	r2, [pc, #52]	@ (80003e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b0:	e002      	b.n	80003b8 <LoopCopyDataInit>

080003b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b6:	3304      	adds	r3, #4

080003b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003bc:	d3f9      	bcc.n	80003b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003be:	4a0a      	ldr	r2, [pc, #40]	@ (80003e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80003c0:	4c0a      	ldr	r4, [pc, #40]	@ (80003ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c4:	e001      	b.n	80003ca <LoopFillZerobss>

080003c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c8:	3204      	adds	r2, #4

080003ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003cc:	d3fb      	bcc.n	80003c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 f825 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d2:	f7ff ff81 	bl	80002d8 <main>
  bx  lr    
 80003d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003e4:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 80003e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ec:	20000028 	.word	0x20000028

080003f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <CAN1_RX0_IRQHandler>
	...

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <HAL_IncTick+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <HAL_IncTick+0x24>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <HAL_IncTick+0x24>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000000 	.word	0x20000000
 8000418:	20000024 	.word	0x20000024

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4d0d      	ldr	r5, [pc, #52]	@ (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	@ (8000458 <__libc_init_array+0x3c>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2600      	movs	r6, #0
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4d0b      	ldr	r5, [pc, #44]	@ (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	@ (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1b64      	subs	r4, r4, r5
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2600      	movs	r6, #0
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
