
08.3_ADC - Multi_Channel_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000014bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004c0  080004c0  000014c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004c4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080004c8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080004c8  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000014ae  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000549  00000000  00000000  000034e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200e6  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000235f  00000000  00000000  00023e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6975  00000000  00000000  000261a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecb1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  000ecb60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000ed118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004a4 	.word	0x080004a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004a4 	.word	0x080004a4

08000204 <delay>:
#include <stdio.h>

uint32_t adc_val[2];

void delay(int n)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  while(n*1000 > 0)
 800020c:	e002      	b.n	8000214 <delay+0x10>
    {
      n--;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3b01      	subs	r3, #1
 8000212:	607b      	str	r3, [r7, #4]
  while(n*1000 > 0)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b00      	cmp	r3, #0
 8000218:	dcf9      	bgt.n	800020e <delay+0xa>
    }
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <adc_config>:

void adc_config()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (1<<0); // Port A Enabled
 800022c:	4b20      	ldr	r3, [pc, #128]	@ (80002b0 <adc_config+0x88>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000230:	4a1f      	ldr	r2, [pc, #124]	@ (80002b0 <adc_config+0x88>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOA->MODER &= ~(0x3 << (2*1)) & ~(0x3 << (2*2) & ~(0x3 << (2*3)));
 8000238:	4b1e      	ldr	r3, [pc, #120]	@ (80002b4 <adc_config+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a1d      	ldr	r2, [pc, #116]	@ (80002b4 <adc_config+0x8c>)
 800023e:	f023 033c 	bic.w	r3, r3, #60	@ 0x3c
 8000242:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0x3 << (2*1)) | (0x3 << (2*2)) | (0x3 << (2*3)); // Set to Analog Mode
 8000244:	4b1b      	ldr	r3, [pc, #108]	@ (80002b4 <adc_config+0x8c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a1a      	ldr	r2, [pc, #104]	@ (80002b4 <adc_config+0x8c>)
 800024a:	f043 03fc 	orr.w	r3, r3, #252	@ 0xfc
 800024e:	6013      	str	r3, [r2, #0]

  RCC->APB2ENR |= (1<<8); // ADC1 Enabled
 8000250:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <adc_config+0x88>)
 8000252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000254:	4a16      	ldr	r2, [pc, #88]	@ (80002b0 <adc_config+0x88>)
 8000256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800025a:	6453      	str	r3, [r2, #68]	@ 0x44

//  ADC1->CCR |= (1<<16); // OPTIONAL - Set Prescaler to (/4)

  ADC1->CR2 &= ~(1<<0); // ADC Disabled
 800025c:	4b16      	ldr	r3, [pc, #88]	@ (80002b8 <adc_config+0x90>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a15      	ldr	r2, [pc, #84]	@ (80002b8 <adc_config+0x90>)
 8000262:	f023 0301 	bic.w	r3, r3, #1
 8000266:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= (1<<1); // Continuous Mode
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <adc_config+0x90>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a12      	ldr	r2, [pc, #72]	@ (80002b8 <adc_config+0x90>)
 800026e:	f043 0302 	orr.w	r3, r3, #2
 8000272:	6093      	str	r3, [r2, #8]
  // Right Align by default

//  NEW----------------------------------------------
  // Resolution 12 bit by default
  ADC1->CR1 |= (1<<8); // Enable Scan Mode, since we are using Multi Channel
 8000274:	4b10      	ldr	r3, [pc, #64]	@ (80002b8 <adc_config+0x90>)
 8000276:	685b      	ldr	r3, [r3, #4]
 8000278:	4a0f      	ldr	r2, [pc, #60]	@ (80002b8 <adc_config+0x90>)
 800027a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800027e:	6053      	str	r3, [r2, #4]

  ADC1->CR2 |= (1<<10); // Enable EOCS : End of Conversion Selection
 8000280:	4b0d      	ldr	r3, [pc, #52]	@ (80002b8 <adc_config+0x90>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	4a0c      	ldr	r2, [pc, #48]	@ (80002b8 <adc_config+0x90>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800028a:	6093      	str	r3, [r2, #8]

  // Select Sample Timer using SMPR - 000 by default

  // Configure/Decide number of Channels
  ADC1->SQR1 |= (1<<20); // Set for 2 channels
 800028c:	4b0a      	ldr	r3, [pc, #40]	@ (80002b8 <adc_config+0x90>)
 800028e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000290:	4a09      	ldr	r2, [pc, #36]	@ (80002b8 <adc_config+0x90>)
 8000292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000296:	62d3      	str	r3, [r2, #44]	@ 0x2c

//  ---------------------------------------------

  ADC1->CR2 |= (1<<0); // ADC Enabled
 8000298:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <adc_config+0x90>)
 800029a:	689b      	ldr	r3, [r3, #8]
 800029c:	4a06      	ldr	r2, [pc, #24]	@ (80002b8 <adc_config+0x90>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6093      	str	r3, [r2, #8]

}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000
 80002b8:	40012000 	.word	0x40012000

080002bc <adc_start>:

void adc_start(int channel)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  ADC1->SQR3 = 0;
 80002c4:	4b0b      	ldr	r3, [pc, #44]	@ (80002f4 <adc_start+0x38>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34
  ADC1->SQR3 |= (channel << 0); // Setting Channel Sequence -- putting one channel at a time
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <adc_start+0x38>)
 80002cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4908      	ldr	r1, [pc, #32]	@ (80002f4 <adc_start+0x38>)
 80002d2:	4313      	orrs	r3, r2
 80002d4:	634b      	str	r3, [r1, #52]	@ 0x34

  ADC1->SR = 0;
 80002d6:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <adc_start+0x38>)
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]

  ADC1->CR2 |= (1<<30);
 80002dc:	4b05      	ldr	r3, [pc, #20]	@ (80002f4 <adc_start+0x38>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <adc_start+0x38>)
 80002e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002e6:	6093      	str	r3, [r2, #8]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40012000 	.word	0x40012000

080002f8 <wait_read>:

uint16_t wait_read()
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  while(!(ADC1->SR & 1<<1))
 80002fc:	bf00      	nop
 80002fe:	4b07      	ldr	r3, [pc, #28]	@ (800031c <wait_read+0x24>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <wait_read+0x6>
	{

	}
  return ADC1->DR;
 800030a:	4b04      	ldr	r3, [pc, #16]	@ (800031c <wait_read+0x24>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800030e:	b29b      	uxth	r3, r3
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40012000 	.word	0x40012000

08000320 <main>:


int main()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  adc_config();
 8000324:	f7ff ff80 	bl	8000228 <adc_config>

  while(1)
    {
      adc_start(1); // started ADC for Channel 1
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ffc7 	bl	80002bc <adc_start>
      adc_val[0] = wait_read();
 800032e:	f7ff ffe3 	bl	80002f8 <wait_read>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <main+0x38>)
 8000338:	601a      	str	r2, [r3, #0]

      delay(1000);
 800033a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800033e:	f7ff ff61 	bl	8000204 <delay>

      adc_start(2); // started ADC for Channel 2
 8000342:	2002      	movs	r0, #2
 8000344:	f7ff ffba 	bl	80002bc <adc_start>
      adc_val[1] = wait_read();
 8000348:	f7ff ffd6 	bl	80002f8 <wait_read>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	4b01      	ldr	r3, [pc, #4]	@ (8000358 <main+0x38>)
 8000352:	605a      	str	r2, [r3, #4]
      adc_start(1); // started ADC for Channel 1
 8000354:	bf00      	nop
 8000356:	e7e7      	b.n	8000328 <main+0x8>
 8000358:	20000020 	.word	0x20000020

0800035c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <NMI_Handler+0x4>

08000364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <HardFault_Handler+0x4>

0800036c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <MemManage_Handler+0x4>

08000374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <BusFault_Handler+0x4>

0800037c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000380:	bf00      	nop
 8000382:	e7fd      	b.n	8000380 <UsageFault_Handler+0x4>

08000384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b2:	f000 f83f 	bl	8000434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <SystemInit+0x20>)
 80003c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003c6:	4a05      	ldr	r2, [pc, #20]	@ (80003dc <SystemInit+0x20>)
 80003c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000418 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80003e4:	f7ff ffea 	bl	80003bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	@ (8000420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	@ (800042c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800040e:	f000 f825 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000412:	f7ff ff85 	bl	8000320 <main>
  bx  lr    
 8000416:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000424:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000428:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800042c:	2000002c 	.word	0x2000002c

08000430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC_IRQHandler>
	...

08000434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_IncTick+0x20>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <HAL_IncTick+0x24>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4413      	add	r3, r2
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <HAL_IncTick+0x24>)
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	20000000 	.word	0x20000000
 8000458:	20000028 	.word	0x20000028

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	@ (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	@ (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	@ (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	@ (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
