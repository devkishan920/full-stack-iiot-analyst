
Project - Crossing System for Visually Challenged.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000744  08000744  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000744  08000744  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000744  08000744  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000744  08000744  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000744  08000744  00001744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000748  08000748  00001748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800074c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000004  08000750  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000750  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b53  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000600  00000000  00000000  00003b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00004188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000181  00000000  00000000  000043a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c1  00000000  00000000  00004529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000023e4  00000000  00000000  00023bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c333d  00000000  00000000  00025fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e930b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006b8  00000000  00000000  000e9350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a4  00000000  00000000  000e9a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800072c 	.word	0x0800072c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800072c 	.word	0x0800072c

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <gpio_init>:
// PA5, PA6, PA7 : LEDs
// TIM2
 int a=0, i=0, b=0, remaining=0;

void gpio_init()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  RCC->AHB1ENR |= (1<<0); // Clock enable for Port A
 8000244:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <gpio_init+0x34>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <gpio_init+0x34>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOA->MODER &= ~(0x3<<(2*5)) & ~(0x3<<(2*6)) & ~(0x3<<(2*7)); // clear moder
 8000250:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <gpio_init+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a08      	ldr	r2, [pc, #32]	@ (8000278 <gpio_init+0x38>)
 8000256:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800025a:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (1<<(2*5)) | (1<<(2*6)) | ((1<<(2*7))); // set as output
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <gpio_init+0x38>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <gpio_init+0x38>)
 8000262:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000

0800027c <tim2_init>:

void tim2_init() // timer2 set for delay
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= (1<<0);
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <tim2_init+0x50>)
 8000282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000284:	4a11      	ldr	r2, [pc, #68]	@ (80002cc <tim2_init+0x50>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6413      	str	r3, [r2, #64]	@ 0x40
  TIM2->CR1 &= ~(1<<0);
 800028c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000296:	f023 0301 	bic.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]

  // psc = (16000/16000000) = 1ms
   TIM2->PSC = 16000-1;// Loading Pre-Scaler Value
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002a4:	629a      	str	r2, [r3, #40]	@ 0x28
   TIM2->ARR = 1000; // Load Auto Reload Register
 80002a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002ae:	62da      	str	r2, [r3, #44]	@ 0x2c

   TIM2->CR1 |= (1<<0); //  Enable Counter Timer
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800

080002d0 <delay_1sec>:

void delay_1sec(int ms)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  TIM2->CNT = 0;
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	2200      	movs	r2, #0
 80002de:	625a      	str	r2, [r3, #36]	@ 0x24
  while(TIM2->CNT < ms);
 80002e0:	bf00      	nop
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d3f9      	bcc.n	80002e2 <delay_1sec+0x12>
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr

080002fc <delay>:

void delay(int sec)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  while(sec>0)
 8000304:	e015      	b.n	8000332 <delay+0x36>
    {
      delay_1sec(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800030a:	f7ff ffe1 	bl	80002d0 <delay_1sec>
      sec--;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3b01      	subs	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
      a++;
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <delay+0x48>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <delay+0x48>)
 800031c:	6013      	str	r3, [r2, #0]

      if(i==1)
 800031e:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <delay+0x4c>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d105      	bne.n	8000332 <delay+0x36>
	{
	  remaining = 10-a;
 8000326:	4b07      	ldr	r3, [pc, #28]	@ (8000344 <delay+0x48>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f1c3 030a 	rsb	r3, r3, #10
 800032e:	4a07      	ldr	r2, [pc, #28]	@ (800034c <delay+0x50>)
 8000330:	6013      	str	r3, [r2, #0]
  while(sec>0)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b00      	cmp	r3, #0
 8000336:	dce6      	bgt.n	8000306 <delay+0xa>
	}
    }
}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	3708      	adds	r7, #8
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000020 	.word	0x20000020
 8000348:	20000024 	.word	0x20000024
 800034c:	2000002c 	.word	0x2000002c

08000350 <cross_button>:

void cross_button() // setting pc13 as interrupt
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000354:	b672      	cpsid	i
}
 8000356:	bf00      	nop
  __disable_irq();
  RCC->AHB1ENR |= (1<<2);
 8000358:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <cross_button+0x54>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a11      	ldr	r2, [pc, #68]	@ (80003a4 <cross_button+0x54>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
  RCC->APB2ENR |= (1<<14);
 8000364:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <cross_button+0x54>)
 8000366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000368:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <cross_button+0x54>)
 800036a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800036e:	6453      	str	r3, [r2, #68]	@ 0x44
  SYSCFG->EXTICR[3] |= (0x20);
 8000370:	4b0d      	ldr	r3, [pc, #52]	@ (80003a8 <cross_button+0x58>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a0c      	ldr	r2, [pc, #48]	@ (80003a8 <cross_button+0x58>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
  EXTI->IMR |= (1<<13);
 800037c:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <cross_button+0x5c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a0a      	ldr	r2, [pc, #40]	@ (80003ac <cross_button+0x5c>)
 8000382:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000386:	6013      	str	r3, [r2, #0]
  EXTI->RTSR |= (1<<13);
 8000388:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <cross_button+0x5c>)
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	4a07      	ldr	r2, [pc, #28]	@ (80003ac <cross_button+0x5c>)
 800038e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000392:	6093      	str	r3, [r2, #8]
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000394:	2028      	movs	r0, #40	@ 0x28
 8000396:	f7ff ff35 	bl	8000204 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800039a:	b662      	cpsie	i
}
 800039c:	bf00      	nop
  __enable_irq();
}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40013800 	.word	0x40013800
 80003ac:	40013c00 	.word	0x40013c00

080003b0 <SysTick_1s>:

volatile int interrupt_flag = 0;

void SysTick_1s()
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

// Enable SysTick timer with processor clock
  SysTick->CTRL |= (1<<0); // Counter Enabled
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <SysTick_1s+0x48>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0f      	ldr	r2, [pc, #60]	@ (80003f8 <SysTick_1s+0x48>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= (1<<2); // Clk Source set to Processor Clock
 80003c0:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <SysTick_1s+0x48>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a0c      	ldr	r2, [pc, #48]	@ (80003f8 <SysTick_1s+0x48>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6013      	str	r3, [r2, #0]


// To set desired Delay, Load Value to STRVR register (24 bit, hence max value is (2^24 = 16777216))

  SysTick->LOAD = (16000000);
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <SysTick_1s+0x48>)
 80003ce:	4a0b      	ldr	r2, [pc, #44]	@ (80003fc <SysTick_1s+0x4c>)
 80003d0:	605a      	str	r2, [r3, #4]

  SysTick->VAL = 0;// Clear the current value register
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <SysTick_1s+0x48>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]

  while((SysTick->CTRL & (1<<16))==0);// Wait until the COUNTFLAG is set
 80003d8:	bf00      	nop
 80003da:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <SysTick_1s+0x48>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d0f9      	beq.n	80003da <SysTick_1s+0x2a>
  SysTick->CTRL = 0;// Clear the Count Flag
 80003e6:	4b04      	ldr	r3, [pc, #16]	@ (80003f8 <SysTick_1s+0x48>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010
 80003fc:	00f42400 	.word	0x00f42400

08000400 <sysTick_delay>:

void sysTick_delay(int n)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  while(n>0)
 8000408:	e009      	b.n	800041e <sysTick_delay+0x1e>
    {
      SysTick_1s();
 800040a:	f7ff ffd1 	bl	80003b0 <SysTick_1s>
      n--;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3b01      	subs	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
      b++;
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <sysTick_delay+0x30>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <sysTick_delay+0x30>)
 800041c:	6013      	str	r3, [r2, #0]
  while(n>0)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2b00      	cmp	r3, #0
 8000422:	dcf2      	bgt.n	800040a <sysTick_delay+0xa>
    }
}
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000028 	.word	0x20000028

08000434 <red>:

void red()
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  GPIOA->ODR |= (1<<7); // Red
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <red+0x34>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <red+0x34>)
 800043e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000442:	6153      	str	r3, [r2, #20]
  GPIOA->ODR &= ~(1<<6);
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <red+0x34>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <red+0x34>)
 800044a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800044e:	6153      	str	r3, [r2, #20]
  GPIOA->ODR &= ~(1<<5);
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <red+0x34>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <red+0x34>)
 8000456:	f023 0320 	bic.w	r3, r3, #32
 800045a:	6153      	str	r3, [r2, #20]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40020000 	.word	0x40020000

0800046c <yellow>:

void yellow()
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  GPIOA->ODR &= ~(1<<7);
 8000470:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <yellow+0x34>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a0a      	ldr	r2, [pc, #40]	@ (80004a0 <yellow+0x34>)
 8000476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800047a:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= (1<<6); // Yellow
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <yellow+0x34>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <yellow+0x34>)
 8000482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000486:	6153      	str	r3, [r2, #20]
  GPIOA->ODR &= ~(1<<5);
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <yellow+0x34>)
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	4a04      	ldr	r2, [pc, #16]	@ (80004a0 <yellow+0x34>)
 800048e:	f023 0320 	bic.w	r3, r3, #32
 8000492:	6153      	str	r3, [r2, #20]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40020000 	.word	0x40020000

080004a4 <green>:

void green()
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  GPIOA->ODR &= ~(1<<7);
 80004a8:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <green+0x38>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	@ (80004dc <green+0x38>)
 80004ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004b2:	6153      	str	r3, [r2, #20]
  GPIOA->ODR &= ~(1<<6);
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <green+0x38>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <green+0x38>)
 80004ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004be:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= (1<<5); // Green
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <green+0x38>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <green+0x38>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6153      	str	r3, [r2, #20]
  i=1;
 80004cc:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <green+0x3c>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40020000 	.word	0x40020000
 80004e0:	20000024 	.word	0x20000024

080004e4 <main>:

int main()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  gpio_init();
 80004e8:	f7ff feaa 	bl	8000240 <gpio_init>
  tim2_init();
 80004ec:	f7ff fec6 	bl	800027c <tim2_init>
  cross_button();
 80004f0:	f7ff ff2e 	bl	8000350 <cross_button>


  while(1)
  {
      // Traffic lights working normally
      red();
 80004f4:	f7ff ff9e 	bl	8000434 <red>
      delay(10);
 80004f8:	200a      	movs	r0, #10
 80004fa:	f7ff feff 	bl	80002fc <delay>
      a=0;
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <main+0x5c>)
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]

      yellow();
 8000504:	f7ff ffb2 	bl	800046c <yellow>
      delay(5);
 8000508:	2005      	movs	r0, #5
 800050a:	f7ff fef7 	bl	80002fc <delay>
      a=0;
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <main+0x5c>)
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]

      green();
 8000514:	f7ff ffc6 	bl	80004a4 <green>
      delay(10);
 8000518:	200a      	movs	r0, #10
 800051a:	f7ff feef 	bl	80002fc <delay>
      a=0;i=0;
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <main+0x5c>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <main+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]

      yellow();
 800052a:	f7ff ff9f 	bl	800046c <yellow>
      delay(5);
 800052e:	2005      	movs	r0, #5
 8000530:	f7ff fee4 	bl	80002fc <delay>
      a=0;
 8000534:	4b02      	ldr	r3, [pc, #8]	@ (8000540 <main+0x5c>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
      red();
 800053a:	bf00      	nop
 800053c:	e7da      	b.n	80004f4 <main+0x10>
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020
 8000544:	20000024 	.word	0x20000024

08000548 <EXTI15_10_IRQHandler>:
  }
}

void EXTI15_10_IRQHandler()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 13)) // checks whether interrupt occured or not
 800054c:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <EXTI15_10_IRQHandler+0x84>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d005      	beq.n	8000564 <EXTI15_10_IRQHandler+0x1c>
	{
	  EXTI->PR |= (1<<13); // clearing pending register for bit 13
 8000558:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <EXTI15_10_IRQHandler+0x84>)
 800055a:	695b      	ldr	r3, [r3, #20]
 800055c:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <EXTI15_10_IRQHandler+0x84>)
 800055e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000562:	6153      	str	r3, [r2, #20]
	}

	yellow();
 8000564:	f7ff ff82 	bl	800046c <yellow>
	sysTick_delay(5);
 8000568:	2005      	movs	r0, #5
 800056a:	f7ff ff49 	bl	8000400 <sysTick_delay>
	b=0;
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <EXTI15_10_IRQHandler+0x88>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]

	red();
 8000574:	f7ff ff5e 	bl	8000434 <red>
	sysTick_delay(10);
 8000578:	200a      	movs	r0, #10
 800057a:	f7ff ff41 	bl	8000400 <sysTick_delay>
	b=0;
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <EXTI15_10_IRQHandler+0x88>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]

	if(remaining != 0)
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <EXTI15_10_IRQHandler+0x8c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d01c      	beq.n	80005c6 <EXTI15_10_IRQHandler+0x7e>
	{
	    GPIOA->ODR &= ~(1<<7);
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <EXTI15_10_IRQHandler+0x90>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <EXTI15_10_IRQHandler+0x90>)
 8000592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000596:	6153      	str	r3, [r2, #20]
	    GPIOA->ODR &= ~(1<<6);
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <EXTI15_10_IRQHandler+0x90>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <EXTI15_10_IRQHandler+0x90>)
 800059e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005a2:	6153      	str	r3, [r2, #20]
	    GPIOA->ODR |= (1<<5); // Green
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <EXTI15_10_IRQHandler+0x90>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <EXTI15_10_IRQHandler+0x90>)
 80005aa:	f043 0320 	orr.w	r3, r3, #32
 80005ae:	6153      	str	r3, [r2, #20]
	    i=0;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <EXTI15_10_IRQHandler+0x94>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
	    delay(remaining);
 80005b6:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <EXTI15_10_IRQHandler+0x8c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe9e 	bl	80002fc <delay>
	    a=0;
 80005c0:	4b07      	ldr	r3, [pc, #28]	@ (80005e0 <EXTI15_10_IRQHandler+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	}
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40013c00 	.word	0x40013c00
 80005d0:	20000028 	.word	0x20000028
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	40020000 	.word	0x40020000
 80005dc:	20000024 	.word	0x20000024
 80005e0:	20000020 	.word	0x20000020

080005e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <NMI_Handler+0x4>

080005ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <HardFault_Handler+0x4>

080005f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <MemManage_Handler+0x4>

080005fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <UsageFault_Handler+0x4>

0800060c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063a:	f000 f83f 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <SystemInit+0x20>)
 800064a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064e:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <SystemInit+0x20>)
 8000650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800066c:	f7ff ffea 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	@ (80006a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	@ (80006b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000696:	f000 f825 	bl	80006e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800069a:	f7ff ff23 	bl	80004e4 <main>
  bx  lr    
 800069e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006ac:	0800074c 	.word	0x0800074c
  ldr r2, =_sbss
 80006b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006b4:	20000034 	.word	0x20000034

080006b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_IncTick+0x20>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <HAL_IncTick+0x24>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4413      	add	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	@ (80006e0 <HAL_IncTick+0x24>)
 80006ce:	6013      	str	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000030 	.word	0x20000030

080006e4 <__libc_init_array>:
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	4d0d      	ldr	r5, [pc, #52]	@ (800071c <__libc_init_array+0x38>)
 80006e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000720 <__libc_init_array+0x3c>)
 80006ea:	1b64      	subs	r4, r4, r5
 80006ec:	10a4      	asrs	r4, r4, #2
 80006ee:	2600      	movs	r6, #0
 80006f0:	42a6      	cmp	r6, r4
 80006f2:	d109      	bne.n	8000708 <__libc_init_array+0x24>
 80006f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000724 <__libc_init_array+0x40>)
 80006f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000728 <__libc_init_array+0x44>)
 80006f8:	f000 f818 	bl	800072c <_init>
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	10a4      	asrs	r4, r4, #2
 8000700:	2600      	movs	r6, #0
 8000702:	42a6      	cmp	r6, r4
 8000704:	d105      	bne.n	8000712 <__libc_init_array+0x2e>
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f855 3b04 	ldr.w	r3, [r5], #4
 800070c:	4798      	blx	r3
 800070e:	3601      	adds	r6, #1
 8000710:	e7ee      	b.n	80006f0 <__libc_init_array+0xc>
 8000712:	f855 3b04 	ldr.w	r3, [r5], #4
 8000716:	4798      	blx	r3
 8000718:	3601      	adds	r6, #1
 800071a:	e7f2      	b.n	8000702 <__libc_init_array+0x1e>
 800071c:	08000744 	.word	0x08000744
 8000720:	08000744 	.word	0x08000744
 8000724:	08000744 	.word	0x08000744
 8000728:	08000748 	.word	0x08000748

0800072c <_init>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	bf00      	nop
 8000730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000732:	bc08      	pop	{r3}
 8000734:	469e      	mov	lr, r3
 8000736:	4770      	bx	lr

08000738 <_fini>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr
